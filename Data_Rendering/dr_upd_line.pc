/* DEC/CMS REPLACEMENT HISTORY, Element DR_UPD_LINE.PC*/
/* *3    24-SEP-1990 16:17:49 GILLESPIE "Merge: Beta Deltas"*/
/*  1B1  24-SEP-1990 16:17:22 GILLESPIE "Beta Deltas"*/
/* *2    14-AUG-1990 16:10:59 GILLESPIE "(SPR 2001) Change to use LINE_ATTRIBUTE structure"*/
/* *1    19-JUN-1989 12:31:36 SYSTEM ""*/
/* DEC/CMS REPLACEMENT HISTORY, Element DR_UPD_LINE.PC*/

/******************************************************************************

		Copyright Exploration Systems, Inc. 1989
		   Unpublished -- All rights reserved

THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc.  AND MAY
CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF 

			Exploration Systems, Inc.
			579 Market Street
			San Francisco, CA  USA 94105
			(415) 974-1600

(The above notice does not constitute an admission of publication or
unrestricted dissemination of the work) 


******************************************************************************/

/*****************************************************************************

NAME:           dr_update_line

DESCRIPTION:    This routine updates a line structure into the LINES table 
                of the current project.

     Input:     line - a pointer to a line structure.
                nlist_file - character string with directory and filename.
		dr_data - a pointer to a DR_DATA structure,

     Output:    none

     Status:    SUCCESS
                CT_ORACLE_EOF
		<oracle error number>
                
 	 Mods:		1)	SCD 5/30/87 Make nlist_id same as line_id.

******************************************************************************/

#ifndef ESI_GL_DEFS_H
#include "esi_gl_defs.h"
#endif

#ifndef ESI_ORACLE_H
#include "esi_oracle.h"
#endif

#ifndef ESI_DR_H
#include "esi_dr.h"
#endif

#ifndef ESI_CT_H
#include "esi_ct.h"
#endif

#ifndef ESI_CT_ERR_H
#include "esi_ct_err.h"
#endif

#ifndef ESI_MP_H
#include "esi_mp.h"		/* mapping structures */
#endif

#ifndef ESI_QS_H
#include "esi_qs.h"
#endif
#include "esi_gks.h"

#define CODE_TO_NAME 2


/************************************************************/
publicdef INT dr_update_line( line, nlist_file, dr_data, isfault, horizon)
LINE     *line;
FILENAME nlist_file;
DR_DATA  *dr_data;
BOOL     isfault;
CHAR     *horizon;
{
    INT          status, nlen;
    INT          seq;
    PROJECT_NAME project;
    NLIST_ID     nlist_name;
    UINT         dim_list[2];
	
    EXEC SQL BEGIN DECLARE SECTION;
       VARCHAR sqlstmt[1024];
    EXEC SQL END DECLARE SECTION;

    status = SUCCESS;

    /* get project name */
    qs_inq_c( QS_PROJECT_NAME, project, &nlen );

    /* Create nlist id string from line_id */
   
    sprintf(nlist_name, "%d", line->line_id);

    if (isfault)
        {
        seq = line->line_id;
        status = dr_update_fault_trace (dr_data, horizon, seq, line);

        strcpy  (nlist_file, "$$FAULT$$");
        sprintf (nlist_name, "%d", seq);
        }
    else
        {
        /* 
         * Update the nlist.
         */
        dim_list[0] = 1, dim_list[1] = 2;
        status = dr_update_nlist(line->line_nlist,nlist_file,nlist_name,
                              dim_list,0.0, dr_data);
        }

   if( status != SUCCESS )
   {
      return( status );
   }

   EXEC SQL WHENEVER SQLERROR GOTO sqlerrorpt;
   EXEC SQL WHENEVER NOT FOUND GOTO sqlnotfound;

/*
 * Make statement for immediate execution for the LINES table
 */
   sqlstmt.len = sprintf((char *)sqlstmt.arr,"UPDATE %s.LINES \
SET LINE_COLOR = '%d',LINE_STYLE = '%d', LINE_THICKNESS = '%f',\
LINE_NAME = '%s', POLYGON_FLAG = '%s', \
POLYGON_HATCH_STYLE = '%d', POLYGON_FILL_COLOR = '%d' \
WHERE LINE_ID = %d",
		project, line->line.color, line->line.style,
		line->line.width, line->line_name,
		(line->polygon_flag ? "YES" : "NO"),
		line->polygon_fill_style,
		line->polygon_fill_color, line->line_id );

   EXEC SQL EXECUTE IMMEDIATE :sqlstmt;

   return( status );

sqlnotfound:
   status = CT_ORACLE_EOF;
   return( status );

sqlerrorpt:
   status = OR_STATUS;
   return( status );
}
