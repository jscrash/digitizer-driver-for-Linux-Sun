/* DEC/CMS REPLACEMENT HISTORY, Element DR_OBJ_LIST.PC*/
/* *1    19-JUN-1989 12:31:11 SYSTEM ""*/
/* DEC/CMS REPLACEMENT HISTORY, Element DR_OBJ_LIST.PC*/

/******************************************************************************

		Copyright Exploration Systems, Inc. 1989
		   Unpublished -- All rights reserved

THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc.  AND MAY
CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF 

			Exploration Systems, Inc.
			579 Market Street
			San Francisco, CA  USA 94105
			(415) 974-1600

(The above notice does not constitute an admission of publication or
unrestricted dissemination of the work) 


******************************************************************************/

/******************************************************************************

NAME:           dr_get_object_list

DESCRIPTION:    Build a TCP of all defined graphic object types


     Input:     None

     Output:    object_type_list - a TCP
                no_items_out - Number of objects

     Status:    SUCCESS

******************************************************************************/

#include "esi_c_lib.h"
#include "esi_dr.h"
#include "esi_oracle.h"
#include "esi_qs.h"
#include "esi_ts.h"

publicdef INT dr_get_object_list(object_type_list,no_items_out)
CHAR ***object_type_list;
INT *no_items_out;
{
    PROJECT_NAME project;
    CHAR **tcp = 0;
    INT no_items;
    INT status;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR object_name[41];
        VARCHAR sqlstmt[250];
    EXEC SQL END DECLARE SECTION;

/*  Define a cursor			*/

    qs_inq_c(QS_PROJECT_NAME,project,(INT *)0);
    sqlstmt.len = sprintf((char *)sqlstmt.arr,
"SELECT NAME \
FROM %s.GRAPHIC_OBJECT_CODES \
WHERE NAME != 'LAST_CODE_USED' \
ORDER BY NAME", project);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;
    EXEC SQL WHENEVER NOT FOUND GOTO sql_eof;

    EXEC SQL PREPARE S1 FROM :sqlstmt;
    EXEC SQL DECLARE GO_CUR CURSOR FOR S1;
    EXEC SQL OPEN GO_CUR;

/*  Extract objects from the cursor until there are no more		*/

    for(no_items = 0; TRUE; no_items++)
    {

        EXEC SQL FETCH GO_CUR INTO :object_name;

        V_SETZERO(object_name);
	ts_tcp_append(&tcp, (char *)object_name.arr);
    }

sql_eof:
    EXEC SQL CLOSE GO_CUR;

    *object_type_list = tcp;
    *no_items_out = no_items;
    
    return SUCCESS;

sql_error:
    status = OR_STATUS;
    return status;
}
