/* DEC/CMS REPLACEMENT HISTORY, Element HO_GET_DTIME.PC */
/* *2     6-JUN-1991 14:55:58 MING "(SPR 0) new checkin" */
/* *1     6-JUN-1991 14:55:15 MING "get date time as the input format" */
/* DEC/CMS REPLACEMENT HISTORY, Element HO_GET_DTIME.PC */
/******************************************************************************

                Copyright Finder Graphics Systems, Inc. 1990
		   Unpublished -- All rights reserved

THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Finder Graphics Systems, Inc.  AND
MAY CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF

			Finder Graphics Systems, Inc.
			201 Tamal Vista Blvd
			Corte Madera, CA  USA 94925
			(415) 927-0100

(The above notice does not constitute an admission of publication or
unrestricted dissemination of the work)

******************************************************************************/



/* Function Description -----------------------------------------------------
Description: return the date time in 'format' format according to the dstr.
	     dstr must be in Oracle date format SYSDATE....

Prototype:
    publicdef INT ho_get_dtime (dstr,format,dtime)

Parameters:	    (indicate (I)/(O)/(M) for input/output/input-and-modified)
    (I) arg	- description
    (I) CHAR *dstr;
    (I) CHAR *format;
    (I) CHAR *dtime;

Return Value/Status:
    SUCCESS	- Successfull completion
    FAIL	- Unsuccessfull completion

Scope:
    PUBLIC
    PRIVATE to <module_description>

Limitations/Assumptions:

-----------------------------------------------------------------------------*/


#include "esi_dtypes.h"
#include "esi_oracle.h"

#if USE_PROTOTYPES
publicdef INT ho_get_dtime (CHAR *dstr,CHAR *format,CHAR *dtime)
#else
publicdef INT ho_get_dtime (dstr,format,dtime)
CHAR *dstr;
CHAR *format;
CHAR *dtime;
#endif
    {

    EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR stmt[1000];
    VARCHAR date[80];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO err;

    stmt.len = sprintf ((CHAR *)stmt.arr,
"SELECT TO_CHAR(%s,'%s') FROM DUAL",dstr,format);

    EXEC SQL PREPARE S1 FROM :stmt;
    EXEC SQL DECLARE C1 CURSOR FOR S1;
    EXEC SQL OPEN C1;


    EXEC SQL FETCH C1 INTO :date;

    EXEC SQL CLOSE C1;

    V_FROMV (dtime,date);

    return SUCCESS;

err:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    printf ("%s\n",OR_MESSAGE);
    return FAIL;
    }

