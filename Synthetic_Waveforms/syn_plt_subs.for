C  DEC/CMS REPLACEMENT HISTORY, Element SYN_PLT_SUBS.FOR
C  *5    18-DEC-1989 11:06:17 GILLESPIE "(SPR 5077) Use WMG_GPL"
C  *4    17-OCT-1989 08:56:53 GORDON "(SPR 4999) Update color selection method"
C  *3    26-SEP-1989 10:26:50 GORDON "(SPR 201) fix bad include line (sun_gks77.i)"
C  *2    19-SEP-1989 10:17:05 GORDON "(PURNA) GULF MODS UNDER SPR 100"
C  *1    10-AUG-1989 18:52:29 VINCE "Fortran code after UNIX mods"
C  DEC/CMS REPLACEMENT HISTORY, Element SYN_PLT_SUBS.FOR
C DEC/CMS REPLACEMENT HISTORY, Element SYN_PLOT_SUBS.FOR
C******************************************************************************
C
C                Copyright Exploration Systems, Inc. 1989
C		   Unpublished -- All rights reserved
C
C THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc AND MAY
C CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
C DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
C MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF
C
C			Exploration Systems, Inc.
C			579 Market Street
C			San Francisco, CA  USA 94105
C			(415) 974-1600
C
C (The above notice does not constitute an admission of publication or
C unrestricted dissemination of the work)
C
C******************************************************************************
C

      SUBROUTINE SYNPLOT(SYNFILE,IFEET)
C***********************************************************************
C
C    ROUTINE:    SYNPLOT
C
C    FUNCTION:   TOP LEVEL ROUTINE FOR PLOTTING SYNTHETICS
C
C***********************************************************************

      INCLUDE 'esi_we_wells.i'

      CHARACTER*(*) SYNFILE
      CHARACTER*(SIZEOF_UWI)    TWELL
      CHARACTER*(SIZEOF_WNAME)  WELNM
      CHARACTER*(SIZEOF_OPER)   OPER
      CHARACTER*(SIZEOF_STATE)  STAT
      CHARACTER*(SIZEOF_COUNTY) COUNT
      CHARACTER*40 COMMEN
      CHARACTER*1 DISP
      CHARACTER*2 RANGD,TSHPD
      INTEGER ITSH,IRANG,ISEC
C
C  USER INPUT SECTION
C
      CALL HOGFNT(IUNIT)
      OPEN(IUNIT,FILE=SYNFILE,STATUS='OLD',FORM='UNFORMATTED')
      READ(IUNIT)TWELL,WELNM,OPER,STAT,COUNT,ITSH,TSHPD,IRANG,RANGD
     X   ,ISEC
      CLOSE (IUNIT)
C

      CALL SYNPLOT_DIALOG(TWELL,WELNM,COMMEN,SCALE,PLTSPD,
     X  NTRCES,TRSP,DISP,ICANCEL,IRESLOG,IFEET)
      IF(ICANCEL.EQ.1)THEN
         RETURN
      ENDIF
      IFBATCH = 0
      CALL SYNPLOTTER(SYNFILE,COMMEN,SCALE,PLTSPD,NTRCES,TRSP,
     X DISP,IRESLOG,IFEET,IFBATCH)
C
      CALL SYNPLOT_BATCH(SYNFILE,COMMEN,SCALE,PLTSPD,NTRCES,TRSP,
     X DISP,IRESLOG,IFEET)
C
      RETURN
      END






      SUBROUTINE SYNPLOT_BATCH(SYNFILE,COMMEN,SCALE,PLTSPD,NTRCES,
     X TRSP,DISP,IRESLOG,IFEET)
C***********************************************************************
C
C    ROUTINE:    SYNPLOT_BATCH
C
C    FUNCTION:   PERFORM BATCH PLOTTING OF SYNTHETIC BY SPAWNING A JOB
C                FROM A .COM FILE.
C
C***********************************************************************

      INCLUDE 'esi_qs.i'
      INCLUDE 'esi_am.i'
C
      CHARACTER*(*)SYNFILE,COMMEN,DISP
      REAL SCALE,PLTSPD,TRSP
      INTEGER NTRCES,IRESLOG,IFEET
C
      CHARACTER*255 WIYESNO1,WIYESNO2,STRING
C
      CHARACTER*32 F_ACCOUNT,F_PASSWORD,F_DATABASE,PROJECT
      CHARACTER*32 XMAXSTR,YMAXSTR
      CHARACTER*255 COMMAND_FILE, NEUTRAL_FILE, PARAM_FILE
      CHARACTER*255 PDRIVER,PQUEUE,PSTATUS
      REAL*4 PXSIZE,PYSIZE
      INTEGER*4 PF_STATUS, PNPENS
      CHARACTER*98 ORASTRING
C
C SEE IF BATCH PLOT SHOULD BE LAUNCHED
C
      WIYESNO1='Would you like to plot the SYNTHETIC?'
      WIYESNO2=' '
      CALL WIGYESNO(WIYESNO1,WIYESNO2,IFYES,IERR)
      IF(IFYES.EQ.0)THEN
          CALL DELFIL(SYNFILE,ISTAT)
          RETURN
      ENDIF
C
      PF_STATUS = SUCCESS
      PXSIZE = 0.0
      PYSIZE = 0.0
      PNPENS = 0
C
C 01/04/89 GS - Implement latest plotting filename standards 

      CALL HOG_ADD_PATH( 'ESI$BIN', 'SYNPLOT', 
     *			  LEN(COMMAND_FILE), COMMAND_FILE)
C 
      CALL HOG_GET_UNIQUE_FILENAME( NEUTRAL_FILE )
      CALL TFSTRCAT( NEUTRAL_FILE, '.NPF', NEUTRAL_FILE )
      CALL HOG_ADD_PATH( 'ESI$PLOTS', NEUTRAL_FILE, 
     *			  LEN(NEUTRAL_FILE), NEUTRAL_FILE )
C 
      CALL HOG_GET_UNIQUE_FILENAME( PARAM_FILE )
      CALL TFSTRCAT( PARAM_FILE, '.DAT', PARAM_FILE )
      CALL HOG_ADD_PATH( 'ESI$SCRATCH', PARAM_FILE, LEN(PARAM_FILE), 
     *			  PARAM_FILE )
      CALL HOG_TRANSLATE_FILENAME( PARAM_FILE, PARAM_FILE )
C 
      STRING = 'Creating neutral file - '//NEUTRAL_FILE
      CALL AMG_MESSAGE(AM_DIALOG,STRING(1:ISTRLEN(STRING)))
C
C MAKE A DATA FILE
C
      CALL HOGFNT(IUNIT)
      OPEN(IUNIT,FILE=PARAM_FILE,STATUS='NEW',FORM='FORMATTED',RECL=256)
1     FORMAT(A)
      WRITE(IUNIT,1)SYNFILE
      WRITE(IUNIT,1)COMMEN
      WRITE(IUNIT,2)SCALE
2     FORMAT(F15.5)
      WRITE(IUNIT,2)PLTSPD
      WRITE(IUNIT,3)NTRCES
3     FORMAT(I10)
      WRITE(IUNIT,2)TRSP
      WRITE(IUNIT,1)DISP
      WRITE(IUNIT,3)IRESLOG
      WRITE(IUNIT,3)IFEET
      CLOSE(IUNIT)
C
C INQUIRE PROJECT, USER ETC.
C
      CALL QSG_INQC(IQS_PROJECT_NAME, PROJECT, L1)
      CALL QSG_INQC(IQS_FINDER_ACCOUNT, F_ACCOUNT, L1)
      CALL QSG_INQC(IQS_FINDER_PASSWORD, F_PASSWORD, L1)
      CALL QSG_INQC(IQS_DATABASE, F_DATABASE, L1)
      CALL TFSTRCAT(F_ACCOUNT, '/', STRING)
      CALL TFSTRCAT(STRING, F_PASSWORD, ORASTRING)
      IF(F_DATABASE .NE. ' ')THEN
          CALL TFSTRCAT(ORASTRING,'@', STRING)
          CALL TFSTRCAT(STRING,F_DATABASE,ORASTRING)
      ENDIF
      
      PF_STATUS = 0
      CALL PFGL_GET_PLOTTER(PDRIVER,PQUEUE,PSTATUS,PNPENS,
     1                            PXSIZE,PYSIZE,PF_STATUS)
      IF (PF_STATUS .NE. 0) THEN
            STRING = 'NOT PLOTTING SYNTHETIC...'
            CALL AMG_MESSAGE(AM_DIALOG, STRING (1:ISTRLEN(STRING)))
            RETURN
      ENDIF
C
      ILC = ISTRLEN(COMMAND_FILE)
      ILO = ISTRLEN(ORASTRING)
      ILN = ISTRLEN(NEUTRAL_FILE)
      ILP = ISTRLEN(PROJECT)
      ILS = ISTRLEN(PARAM_FILE)
      WRITE (UNIT=XMAXSTR, FMT='(F9.3)') PXSIZE
      WRITE (UNIT=YMAXSTR, FMT='(F9.3)') PYSIZE
      STRING= '"' // ORASTRING(1:ILO) // '"'
     X    // ', ' // NEUTRAL_FILE(1:ILN)
     X    // ', ' // PROJECT (1:ILP) 
     X    // ', ' // PARAM_FILE (1:ILS)
     X    // ', ' // PDRIVER (1:ISTRLEN(PDRIVER))
     X    // ', ' // PQUEUE  (1:ISTRLEN(PQUEUE ))
     X    // ', ' // XMAXSTR (1:ISTRLEN(XMAXSTR)) 
     X    // ', ' // YMAXSTR (1:ISTRLEN(YMAXSTR))

      CALL WIGQFRONT(IFRONT)      
      IBT=1
      CALL HOG_SPAWN(IBT,COMMAND_FILE,STRING,IUSER)
      CALL WIGOPCD(IFRONT)
      RETURN
      END

      SUBROUTINE SYNPLOTTER(SYNFILE,COMMEN,SCALE,PLTSPD,NTRCES,TRSP,
     X                      DISP,IRESLOG,IFEET,IFBATCH)
C***********************************************************************
C
C    ROUTINE:    SYNPLOTTER
C
C    FUNCTION:   CREATE THE SYNTHETICS DISPLAY.
C                ITEMS PLOTTED LEFT TO RIGHT IN ORDER
C                ------------------------------------
C                1.  SONIC LOG (FT/SEC OR METERS/SEC)
C                2.  DENSITY LOG
C                3.  *OPTIONAL* UP TO 5 ADDITIONAL LOG CURVES
C                4.  REFLECTION COEFFICIENTS
C                5.  *OPTIONAL* SEVEN FILTERED ACOUSTIC IMPEDANCE LOGS
C                6.  UP TO 5 SETS OF SYNTHETICS, EACH HAVING UP TO 6
C                    TRACES, ONE GROUP FOR NORMAL, ONE GROUP FOR REVERSE
C                    POLARITY, AND AN EXTRA GROUP IF MULTIPLES HAVE
C                    BEEN GENERATED.
C
C***********************************************************************
      INCLUDE 'esi_wm.i'
      INCLUDE 'esi_we_wells.i'
      INCLUDE 'sf_defs.i'
      INCLUDE 'esi_sy_msg.i'
      INCLUDE 'sun_gks77.i'


      CHARACTER TWELL*(SIZEOF_UWI),JNUMB*128,SYNFILE*(*)
      CHARACTER WELNM*(SIZEOF_WNAME),OPER*(SIZEOF_OPER)
      CHARACTER STAT*(SIZEOF_STATE)
      CHARACTER COUNT*(SIZEOF_COUNTY),TSHPD*2,RANGD*2
      CHARACTER*255 WSTRING,WSTRING2

      INTEGER   ITSH, IRANG, ISEC
      DIMENSION ACOUST(2500),XBUF(8192),YBUF(8192)
      COMMON/SYNBUF/XBUF,YBUF

      DIMENSION VALUES(5000),TRACE(8000),SONIC(5000),REFL(5000)
      COMMON/SYNVAL/VALUES
      COMMON/SYNTRA/TRACE
      EQUIVALENCE(VALUES(1),SONIC(1),REFL(1))
      DIMENSION DY(30)
      DIMENSION DEPTH(2500)

      INTEGER   TVF1(3), TVF2(3), TVF3(3), TVF4(3),
     X          TVFTIME(3)
      INTEGER   TVFTAPER

      CHARACTER*60 LOCAT
      CHARACTER*10 CURVES(7)
      CHARACTER*10 TCUR
      CHARACTER*1  DISP
      CHARACTER*40 COMMEN
      CHARACTER*128 STRING
      PARAMETER (MAXTOPS = 100)
      CHARACTER*16 ANNOT(MAXTOPS)
      CHARACTER*1  ANA
      DIMENSION    ADEPTH(MAXTOPS)
      DIMENSION    AY1(MAXTOPS),AY2(MAXTOPS),AX1(MAXTOPS)
      INTEGER      IFLP(8)       , ILOG(8)
      DATA         IFLP    /8*0/ , ILOG   /8*0/
      DATA         ANA /'N'/
C
      REAL RWINDO(4),CWINDO(4),RVIEWP(4),CVIEWP(4)
      INTEGER   NORMAL, HIGHLIGHT, BACKGROUND
C
      DO 2 JK = 1 , 8
         IFLP(JK)=0
2     ILOG(JK)=0
C
C  USER INPUT SECTION
C
      CALL HOGFNT(IUNIT)
      OPEN(IUNIT,FILE=SYNFILE,STATUS='OLD',FORM='UNFORMATTED')
      READ(IUNIT)TWELL,WELNM,OPER,STAT,COUNT,ITSH,TSHPD,IRANG,RANGD
     X   ,ISEC
      CALL GETLOC(LOCAT,COUNT,STAT,ITSH,TSHPD,IRANG,RANGD,ISEC)
      READ(IUNIT) NCRVES
      READ(IUNIT) DELTAT
      READ(IUNIT) IACOUS
      READ(IUNIT) NFILT
      READ(IUNIT) IEKB,IDELEV
      READ(IUNIT) IMULTI
      READ(IUNIT) RMULTI
      READ(IUNIT) IAGC
      READ(IUNIT) NPTSL,CURVES

      READ(IUNIT)(DEPTH(I),I=1,NPTSL)
C
C GET COLOR CODES FROM DATABASE
C
      CALL LUG_TEXT_TO_INDEX( 'COLOR', HIGHLIGHT, 'HIGHLIGHT' )
      CALL LUG_TEXT_TO_INDEX( 'COLOR', NORMAL, 'NORMAL' )
      CALL LUG_TEXT_TO_INDEX( 'COLOR', BACKGROUND, 'BACKGROUND' )
C
C GET WELL TOPS FOR ANNOTATION PURPOSES
C
C     CALL SYNTOP_DBREAD(TWELL,MAXTOPS,NANNOT,ANNOT,ADEPTH)
      NANNOT = 0
      ANA='N'
      IF(NANNOT.NE.0)ANA='Y'
C
C CORRECT WELL TOPS TO DATUM
C
      IF(ANA.EQ.'Y'. AND. (IEKB.NE.-999)) THEN
      NLZ=0
      DO 43421 JJKKJ=1,NANNOT
        ADEPTH(JJKKJ)=ADEPTH(JJKKJ)- (IEKB-IDELEV)
43421 IF(ADEPTH(JJKKJ).LE.0.0)NLZ=NLZ+1
           IF(NLZ.GT.0)THEN
              NANNOT=NANNOT-NLZ
              DO 43424 I = 1 , NANNOT
                ANNOT(I)=ANNOT(I+NLZ)
43424           ADEPTH(I)=ADEPTH(I+NLZ)
           ENDIF
      ENDIF
C
C READ CURVES
C CURVES DIGITIZED STORED IN ARRAY CURVES
C
      DO 300 JJ = 1,NCRVES
        IFLP(JJ)=0
        IF(CURVES(JJ).EQ.'DPHI'.OR.CURVES(JJ).EQ.'NPHI'.OR.
     X   CURVES(JJ).EQ.'DT')IFLP(JJ)=1
        IF((CURVES(JJ).EQ.'ILD'.OR.CURVES(JJ).EQ.'LLD'.OR.
     X    CURVES(JJ).EQ.'ILM'.OR.CURVES(JJ).EQ.'SFL').AND.
     X    IRESLOG.EQ.1)THEN
          ILOG(JJ)=1
        ELSE
          ILOG(JJ)=0
        ENDIF
300   CONTINUE

C
C CALCULTE TMAX
C
      TMAX = NPTSL * DELTAT
      TMAX = TMAX / .1
      I    = TMAX
      TMAX = (I+1) * .1
      NPTSR=NPTSL

C
C XLINE IS LENGTH OF HORIZONTAL LINES
C CURVES ARE 1.7 INCHES APART
C
C TRACES HAVE A .5 LEFT MARGIN  AND A 1. CENTER MARGIN
C 1 INCH RIGHT MARGIN
C
      TRSPAC = 1/TRSP
      NFILT2=NFILT
      IF (IMULTI .NE. 0.) NFILT2=2*NFILT
      XLINE =2.0  + (NCRVES)*1.7+1. +NFILT2*(2.5+NTRCES*TRSPAC*2)
      XALINE = 12.8
      IF (IACOUS.EQ.0) XALINE = 0.0
      XLINE = XLINE + XALINE

C
C SIZE OF PLOT HAS 2.5 INCHES TO LEFT OF START OF HORI LINE
C
C  5 INCHES ON RIGHT
C  UNLESS NO ANNOTATIONS HAS 2.5 ON RIGHT
C
      XLEN  = XLINE + 3.999 + 5.
      IF(ANA.EQ.'N')XLEN = XLEN - 3.999
      YLEN = 4.5 + TMAX * PLTSPD
      CALL WMG_INQ_WKWN(XNDC1,XNDC2,YNDC1,YNDC2)
      XXTNR=XLEN
      IF(ANA.EQ.'Y')XXTNR=XLEN-1.0

      IF(IFBATCH.EQ.1)THEN
          BACKGROUND = -1
          IWKID = 1
          CALL GQWKT(IWKID,IERRIN,ITUS,RWINDO,CWINDO,RVIEWP,CVIEWP)
          XNDC1 = 0.
C
C MOD BY JJC 11/11/88 TO INCLUDE THE DEVICE RATIO IN CASE THE DEVICE IS
C	  NOT SQUARE.
C
          XNDC2 = XNDC2 * (XXTNR / CVIEWP(2) )
          YNDC1 = 0
          YNDC2 = YNDC2 * (YLEN / CVIEWP(4) )
      ENDIF

C          
C     PLACE SYNTHETIC ON SCREEN 1
C
      CALL WMG_SET_CURRENT_SCREEN( 1 )

      CALL WMGWALLOCATE(IW1,XNDC1,XNDC2,YNDC1,YNDC2,BACKGROUND)
      WSTRING2='SYNTHETIC'
      WRITE(WSTRING,8500)TWELL
8500  FORMAT('SYNTHETIC ',A15)
      CALL WMGOSET(IW1,WM_CLASS_WINDOW,WSTRING2,WSTRING)
      CALL WMGTALLOCATE(ITNR,0.,1.,0.,1.,0.,XXTNR,0.,YLEN)

      CALL GSTXAL(GAHNOR,GAVHOR)
      CALL GSLWSC(1.0)
      CALL GSPLCI(NORMAL)
      CALL WMGGALLOCATE(ITEXTGROUP)
      WSTRING='SYNTHETIC LABELING'
      CALL WMGOSET(ITEXTGROUP,WM_CLASS_GROUP,WSTRING2,WSTRING)
      CALL WMGSALLOCATE(IWELLTEXTSEGMENT)
      WSTRING='SYNTHETIC WELL TEXT'
      CALL WMGOSET(IWELLTEXTSEGMENT,WM_CLASS_SEGMENT,WSTRING2,
     X              WSTRING)
      ZERO=0.
      XBUF(1)=ZERO
      YBUF(1)=ZERO
      XBUF(2)=XXTNR
      YBUF(2)=ZERO
      XBUF(3)=XXTNR
      YBUF(3)=YLEN
      XBUF(4)=ZERO
      YBUF(4)=YLEN
      XBUF(5)=ZERO
      YBUF(5)=ZERO
      CALL WMG_GPL(5,XBUF,YBUF)
      CALL GSCHH(.3)
      X=.5
      IFONT=SIMPLX
      IPREC=GCHARP
      CALL GSTXFP(IFONT,IPREC)
      CALL GSTXCI(NORMAL)
      CALL MGG_MESSAGE(SY_COMPANY_NAME, STRING)
      CALL GTX(X,YLEN-.7, STRING)
      X=1.5
      CALL GSCHH(.21)
      CALL GTX(X,YLEN-1.1,WELNM)
      WSTRING = 'OPERATOR: '//OPER
      CALL GTX(X,YLEN-1.5,WSTRING)
      CALL GTX(X,YLEN-1.9,LOCAT)
      IF(IEKB.EQ.-999)THEN
            WSTRING = 'EKB: N/A Datum: N/A'
      ELSE
            WRITE(WSTRING,765)IEKB,IDELEV
765         FORMAT('EKB: ',I6,' Datum:',I6)
            CALL STRN2B(WSTRING)
            IF(IDELEV.EQ.0)THEN
                I = ISTRLEN(WSTRING)
                WSTRING(I:I+8)='Sea Level'
            ENDIF
      ENDIF
      CALL GTX(X,YLEN-2.3,WSTRING)
  333 FORMAT(I8)
  334 FORMAT(F8.3)
  335 FORMAT(F8.2)
      WSTRING = 'Comments: '//COMMEN
      CALL GTX(X,YLEN-2.7,WSTRING)
      CALL WMGSCLOSE(IWELLTEXTSEGMENT)
      CALL WMGGCLOSE(ITEXTGROUP)
      CALL GSCHXP(6./7.)
      CALL GSCHSP(.3)
      CALL GSCHH(.1)

C
C
C PLOT DEPTH SCALE ON LEFT
C
      CALL WMGSALLOCATE(ILDEPTHSEGMENT)
      WSTRING='Left Depth Scale'
      CALL WMGOSET(ILDEPTHSEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
      CALL  GSTXCI(HIGHLIGHT)
      CALL GSPLCI(HIGHLIGHT)
      IF (IFEET.EQ.1) THEN
        CALL GTX(.7, YLEN-3.1, 'Depth (F)')
      ELSE
        CALL GTX(.7, YLEN-3.1, 'Depth (M)')
      ENDIF
      IF ( DEPTH(1) .LE. 0. ) THEN
      	  FPN=0
      	  APN=0
      ELSE 
	IPN = ( DEPTH(1) - 1. ) / 100
	APN = 100 * ( IPN + 1 )
	IPN = ( DEPTH(1) - 1. ) / 1000
	FPN = 1000 * ( IPN + 1 )
      ENDIF
      Y=YLEN - 3.6
      X=.8
      YINC = PLTSPD * DELTAT
      CALL GSCHH(.1)
      DO 450 JJ = 1,NPTSL
      IF(DEPTH(JJ) .LT. APN)GOTO 450
      IF(APN .EQ. FPN) THEN
             JJJPN = FPN
             WRITE(JNUMB,'(I5)') JJJPN
             CALL GTX(X,Y,JNUMB)
             XBUF(1)=1.5
             XBUF(2)=1.7
             YBUF(1)=Y
             YBUF(2)=Y
             CALL WMG_GPL(2,XBUF,YBUF)
             FPN=FPN+1000
      ELSE
             XBUF(1)=1.5
             YBUF(1)=Y
             XBUF(2)=1.6
             YBUF(2)=Y
             CALL WMG_GPL(2,XBUF,YBUF)
      ENDIF
      APN=APN+100.
450   Y=Y-YINC
      CALL WMGSCLOSE(ILDEPTHSEGMENT)

C
C PLOT HORIZONTAL LINES WITH TIME SCALE
C
      CALL WMGSALLOCATE(ITIMESEGMENT)
      WSTRING='TIMING LINES'
      CALL WMGOSET(ITIMESEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
      CALL GSPLCI(HIGHLIGHT)
      CALL GSTXCI(HIGHLIGHT)
      CALL GTX(1.9,YLEN-3.1,'TIME')
      YINC = PLTSPD / 10.
      Y = YLEN - 3.6 + YINC
      IEND = TMAX  * 10.001 + 1
      XLEX = XLEN - 6.5
      IF(ANA.EQ.'N')XLEX=XLEX+3.999

      DO 460 JJ = 1 , IEND
        FPN = (JJ-1) / 10.
        Y = Y - YINC
        ISIDE = (-1) ** JJ
        IF (ISIDE .LT.0) THEN
          WRITE(JNUMB,'(F5.3)') FPN
          X=1.9
          CALL GTX(X,Y,JNUMB)
          XBUF(1)=2.5
          XBUF(2)=XLEX
          YBUF(1)=Y
          YBUF(2)=Y
          CALL WMG_GPL(2,XBUF,YBUF)
          WRITE(JNUMB,'(F5.3)') FPN
          CALL GTX(XLEX+.2,Y,JNUMB)
        ELSE
          WRITE(JNUMB,'(F5.3)') FPN
          CALL GTX(XLEX+.2,Y,JNUMB)
          XBUF(1)=XLEX
          XBUF(2)=2.5
          YBUF(1)=Y
          YBUF(2)=Y
          CALL WMG_GPL(2,XBUF,YBUF)
          WRITE(JNUMB,'(F5.3)') FPN
          X=1.9
          CALL GTX(X,Y,JNUMB)
        ENDIF
460   CONTINUE
      XLENN=XLEN-6.3
      IF(ANA.EQ.'N')XLENN=XLENN+3.9
      CALL GTX(XLENN,YLEN-3.1,'TIME')
      CALL WMGSCLOSE(ITIMESEGMENT)

C
C
C DETERMINE VELOCITY SCALE AND PLOT IT
C
      CALL WMGSALLOCATE(IVELSEGMENT)
      WSTRING='VELOCITY FUNCTION'
      CALL WMGOSET(IVELSEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
      CALL GSPLCI(NORMAL)
      CALL GSTXCI(NORMAL)
      IF (IFEET.EQ.1) THEN
        CALL GTX(2.8, YLEN-3.1, 'Velocity (F/SEC)')
      ELSE
        CALL GTX(2.8, YLEN-3.1, 'Velocity (M/SEC)')
      ENDIF
C
      READ(IUNIT)(VALUES(I),I=1,NPTSL)
      SMIN = SONIC(1)
      SMAX = SONIC(1)

      DO 33445 JKL = 1,NPTSL
        IF(VALUES(JKL).EQ.0)VALUES(JKL) = VALUES(JKL-1)
        IF(SONIC(JKL).LT.SMIN)SMIN=SONIC(JKL)
33445 IF(SONIC(JKL).GT.SMAX)SMAX=SONIC(JKL)

      IDIF = SMAX
      IDIF = IDIF / 1000 + 1
      IDIF = IDIF * 1000
      IF(IDIF.LE.9000)IDIF = 9000
      IF(IDIF.GT.9000 .AND. IDIF .LE. 14000) IDIF = 14000
      IF(IDIF.GT.14000) IDIF = 24000
      ISTART = 4
      XINC = .1
      IF(IDIF.EQ.9000)AINC = .4
      IF(IDIF.NE.9000)AINC = .2
      X = 2.4
      IF(IDIF.EQ.9000)IADD = 1
      IF(IDIF.EQ.14000)IADD=1
      IF(IDIF.EQ.24000)IADD = 2
      IF(IFEET.EQ.0)THEN
          ISTART = 0
          IADD = 2
      ENDIF
      A = 2.5
      CALL GSCHH(.07)

      DO 505 JJ = 1,21
        X = X+XINC
        XBUF(1)=X
        XBUF(2)=X
        YBUF(1)=YLEN-3.6
        YBUF(2)=YLEN-3.5
        CALL WMG_GPL(2,XBUF,YBUF)
        IF (ABS(X-A).GT. 0.001) GOTO 505
        FPN = ISTART
        JJJPN = FPN
        WRITE(JNUMB,'(I2)') JJJPN
        CALL STRLJ(JNUMB)
        CALL GTX(X-.02, YLEN-3.47, JNUMB)
        A = A + AINC
        ISTART = ISTART + IADD
505   CONTINUE

C
C  PLOT SONIC LOG
C  YINC = SAMPLING PERIOD TIME PLOT SPEED
C  VELDIV IS VELOCITY SCALER
C
      YINC = DELTAT * PLTSPD
      IF(IDIF .EQ. 9000)  VELDIV = 2500
      IF(IDIF.EQ.14000)   VELDIV = 5000
      IF(IDIF.EQ.24000)   VELDIV = 10000
      IF(IFEET.EQ.0)THEN
           VVVMIN = 0.0
           VELDIV = 5000.0
      ELSE
           VVVMIN = 4000.0
      ENDIF
      Y = YLEN -3.6
      X = (SONIC(1) - VVVMIN) / VELDIV +2.5
      XBUF(1)=X
      YBUF(1)=Y
      DO 600 JJ = 1,NPTSL
        IF(SONIC(JJ).LT.VVVMIN.AND.JJ.GT. 1)SONIC(JJ) = SONIC(JJ-1)
        Y = Y - YINC
        X = 2.5 + (SONIC(JJ) - VVVMIN) / VELDIV
        XBUF(JJ+1)=X
600     YBUF(JJ+1)=Y
      CALL WMG_GPL(NPTSL+1,XBUF(1),YBUF(1))
      Y = YLEN - 3.6 - TMAX * PLTSPD
      IF(IFEET.EQ.1)THEN
          ISTART = 4
      ELSE
          ISTART = 0
      ENDIF
C
      XINC = .1
      X = 2.4
      A = 2.5

      DO 555 JJ = 1, 21
        X = X+XINC
        XBUF(1)=X
        YBUF(1)=Y
        XBUF(2)=X
        YBUF(2)=Y-.1
        CALL WMG_GPL(2,XBUF,YBUF)
        IF (ABS(A-X).GT. 0.001) GOTO 555
        FPN = ISTART
        JJJPN = FPN
        WRITE(JNUMB,'(I2)') JJJPN
        CALL STRLJ(JNUMB)
        CALL GTX(X-.02,Y-.2,JNUMB)
        A=A+AINC
        ISTART = ISTART + IADD
555   CONTINUE
      CALL WMGSCLOSE(IVELSEGMENT)


C
C PLOT CURVES AND REFLECTION COEF
C
       DO 2000 JCURVE = 2,NCRVES+1
C
C 4.5 IS MARGIN + SONIC 2 "
C .5 IS LEFT MARGIN OF INDIVIDUAL CURVE
C
        XX = 4.5 + (JCURVE-2) * 1.7 + .5
C
C CHECK FOR REFLECTION COEF
C AND SET NO OF POINTS AND CURVE NAME FOR CURCON CALL
C
        IF (JCURVE .LT. NCRVES+1) THEN
              NNPTS = NPTSL
             TCUR = CURVES(JCURVE)
        ELSE
             TCUR = 'REFL. COEF.'
             NNPTS = NPTSL
        ENDIF
        CALL WMGSALLOCATE(ICURSEGMENT)
        WSTRING=TCUR
        CALL WMGOSET(ICURSEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
C
C CURCON SET UP
C NDEC - NUMBER OF DECIMALS FOR CURVE IN MIN MAX NUMBER PLOT
C SYMBX - CENTERS SYMBOL HEADING
C
C PUTS WHATEVER CURVE IN VALUES
C
       READ (IUNIT) (VALUES(I),I=1,NPTSL)
       CALL CURCON(TCUR, NDEC, SYMBX, NNPTS)
C 
C PRINT NAME OF CURVE AND MIN MAX VALUES
C CHECK FOR SWITHED LOG SO YOU CAN SWITCH MIN MAX
C
       CALL GSCHH(.1)
       CALL GTX(XX+SYMBX,YLEN-3.1,TCUR)
       XMIN = VALUES(1)
       XMAX=VALUES(1)
       DO 33446 JKL = 1,NNPTS
       IF (JCURVE.LE.NCRVES. AND. VALUES(JKL).EQ.0.0)
     X      VALUES(JKL) = VALUES(JKL-1)
       IF (VALUES(JKL).LT.XMIN) XMIN = VALUES(JKL)
33446  IF (VALUES(JKL).GT.XMAX) XMAX = VALUES(JKL)
       XDIF = XMAX - XMIN
      IF(IFLP(JCURVE) .EQ. 1)THEN
          TEMP = XMIN
          XMIN = XMAX
          XMAX = TEMP
      END IF

      JJJXMIN=XMIN
      IF(NDEC.EQ.-1) WRITE(JNUMB,333) JJJXMIN
      IF(NDEC.EQ.2) WRITE(JNUMB,335) XMIN
      IF(NDEC.EQ.3) WRITE(JNUMB,334) XMIN
      CALL STRLJ(JNUMB)
      CALL GTX(XX,YLEN-3.55,JNUMB)
      JJJXMAX = XMAX
      IF(NDEC.EQ.-1) WRITE(JNUMB,333) JJJXMAX
      IF(NDEC.EQ.2) WRITE(JNUMB,335) XMAX
      IF(NDEC.EQ.3) WRITE(JNUMB,334) XMAX
      CALL STRLJ(JNUMB)
      CALL GTX(XX+1.,YLEN-3.55,JNUMB)
      IF(IFLP(JCURVE) .EQ.1)THEN
          TEMP=XMIN
          XMIN=XMAX
          XMAX=TEMP
      END IF
      IF(ILOG(JCURVE).EQ.1) THEN
         DO 56565 JJJR = 1,NNPTS
           IF(VALUES(JJJR).LT.0.0)VALUES(JJJR)=0.0
56565    IF(VALUES(JJJR).GT.0.0)VALUES(JJJR)=ALOG10(VALUES(JJJR))
         XMAX=ALOG10(XMAX)
         IF(XMIN.GT.0)XMIN=ALOG10(XMIN)
         XDIF=XMAX-XMIN
      ENDIF
C
C PLOT CURVE
C
C CURVE IS ONE INCH WIDE
C
      IF(XDIF.EQ.0.0)XDIF=1.0
      XPOS = (VALUES(1)-XMIN) / XDIF
      IF(IFLP(JCURVE).EQ.1)XPOS = 1. - XPOS
      IF(JCURVE.EQ.NCRVES+1)XPOS = (0.-XMIN)/XDIF
      XBUF(1)=XX+XPOS
      YBUF(1)=YLEN-3.6
      XRFLC = XX+XPOS
      Y = YLEN - 3.6
      NNQ=2
      DO 2050 JJ = 1,NNPTS
         IF(VALUES(JJ).LT.XMIN)VALUES(JJ)=VALUES(JJ-1)
         XPOS=(VALUES(JJ)-XMIN) / XDIF
         IF(IFLP(JCURVE) .EQ. 1)XPOS = 1. - XPOS
         Y=Y-YINC
         IF(JCURVE.EQ.NCRVES+1)THEN
            XXP = XX+XPOS
            XBUF(NNQ)=XRFLC
            YBUF(NNQ)=Y+YINC
            NNQ=NNQ+1
            XBUF(NNQ)=XRFLC
            YBUF(NNQ)=Y
            NNQ=NNQ+1
         END IF
         XBUF(NNQ)=XX+XPOS
         YBUF(NNQ)=Y
 2050 NNQ=NNQ+1
      NNQ=NNQ-1
      CALL WMG_GPL(NNQ,XBUF(1),YBUF(1))
 2000 CALL WMGSCLOSE(ICURSEGMENT)


C
C CHECK FOR ACOUSTIC LOGS
C
C IF SO THERE ARE SEVEN
C O,30,60,90,120,150,180 DEGREE PHASE
C
      IF (IACOUS.EQ.0) GOTO 3210
      CALL WMGSALLOCATE(IACOUSSEGMENT)
      WSTRING='Acoustic Impedence Logs'
      CALL WMGOSET(IACOUSSEGMENT,WM_CLASS_SEGMENT,WSTRIN2,WSTRING)
      XX=4.5+NCRVES*1.7+1.
      READ(IUNIT)FACMIN,FACS
      NPTSA=NPTSL
      DO 2200 JJ = 1,7
      READ(IUNIT)(ACOUST(II),II=1,NPTSA)
      XMIN = ACOUST(1)
      XMAX = ACOUST(1)

      DO 33447 JKL = 1 , NPTSA
C     IF(ACOUST(JKL).EQ.0.0)ACOUST(JKL) = ACOUST(JKL-1)
        IF(ACOUST(JKL).LT.XMIN)XMIN = ACOUST(JKL)
33447 IF(ACOUST(JKL).GT.XMAX)XMAX = ACOUST(JKL)

      XDIF = XMAX - XMIN
      IDEG = (JJ-1) * 30
      CALL GSCHH(.1)
      WRITE(JNUMB,'(I3,'' Degrees'')')IDEG
      X=XX+ (JJ-1) * 1.8285714
      CALL GTX(X,YLEN-3.5,JNUMB)
      IF(JJ.EQ.3)THEN
C
        JFMIN=FACMIN+.001
        JFMAX=FACS+.001
        WRITE(JNUMB,33321)JFMIN,JFMAX
33321   FORMAT('Filtered Acoustic Logs - Acoustic Filter ',I3,' to ',
     X I3,' HZ')
        CALL STRN2B(JNUMB)
        CALL GTX(X,YLEN-3.1,JNUMB)
C
      END IF
      XBUF(1)=X+(ACOUST(1)-XMIN)/XDIF*1.4
      YBUF(1)=YLEN-3.6
      Y=YLEN-3.6
C
C PLOT LOG
C
      DO 2202 JK = 1,NPTSA
         Y=Y-YINC
         XPOS = (ACOUST(JK)-XMIN) / XDIF * 1.4
         XBUF(JK+1)=X+XPOS
2202  YBUF(JK+1)=Y

      CALL WMG_GPL(NPTSA+1,XBUF(1),YBUF(1))
2200  CONTINUE
      CALL WMGSCLOSE(IACOUSSEGMENT)


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  PLOT SYNTHETIC TRACES
C  NFILT:  IS NUMBER OF FILTERS SERIES- IE THE NUMBER OF SYNTHETICS
C          GROUPS TO PLOT
C  NFILT2: IS = NFILT IF NO MULTIPLES, ELSE = 2 * NFILT
C  NCRVES: NUMBER OF LOG TRACES PLOTTED
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

3210  TX_HGT = 0.1
      TX_EXP = 1.0
      TX_CHSP = 0.0
      CALL GSCHH(TX_HGT)
      CALL GSCHXP(TX_EXP)
      CALL GSCHSP(TX_CHSP)



      DO 4000 JFILT = 1, NFILT2
          CALL GSPLCI(NORMAL)
          CALL GSTXCI(NORMAL)

          IODD = (-1) ** JFILT
C
C CALCULATE X
C
          XX = 4.5 + NCRVES*1.7 +1. + (JFILT-1)* (2.5+NTRCES*TRSPAC*2.)

C
C IF ACOUSTIC LOGS PRESENT WE MUST SHIFT OVER IN X
C
          IF (IACOUS.NE.0) XX = XX + .25 + XALINE
          TRW = (2.5 + NTRCES*TRSPAC*2.)

C
C  READ FILTER MIN FILTER MAX, AND PHASE
C
          IREAD=0


      IF( (IODD.EQ.(-1) .AND. IMULTI.NE.0) .OR.
     X                                   (IMULTI .EQ. 0.) ) THEN

         READ (IUNIT) ITYPE, NTVFILTS, LENGTH, ISAMP, IPHASE

         IREAD=1

         IF (ITYPE.EQ.COSINE_WAV) THEN
            READ (IUNIT) TVF1, TVF2, TVFTIME 
            WSTRING = 'Cosine Wavelet'

         ELSEIF (ITYPE.EQ.RICKER_WAV) THEN
            READ (IUNIT) TVF1, TVFTIME, TVFTAPER 
            WSTRING = 'Ricker Wavelet'

         ELSEIF (ITYPE.EQ.ORMSBY_WAV) THEN
            READ (IUNIT)  TVF1, TVF2, TVF3, TVF4, TVFTIME, TVFTAPER
            WSTRING = 'Ormsby Wavelet'

         ELSEIF (ITYPE.EQ.BUTTERWORTH_WAV) THEN
            READ (IUNIT)  TVF1, TVF2, TVF3, TVF4, TVFTIME, TVFTAPER
            WSTRING = 'Butterworth Wavelet'

         ELSE
            WSTRING = 'User Defined'
         ENDIF

         CALL WMGGALLOCATE(ITRACEGROUP)
         CALL WMGOSET(ITRACEGROUP,WM_CLASS_GROUP,WSTRING2,WSTRING)
      ENDIF


      READ (IUNIT) (TRACE(I),I=1,NPTSL)
      TRW2 =(TRW-.5)/2.
      YY = YLEN - 1.1
      RA = 6./7. * .1
C
C IF JUST ONE FILTER PLOT LOOKS DIFFERENT THEN MANY FILTERS
C SMALL TITLE
C
      IF (NFILT2.EQ.1) YY = YLEN - .5
      DD = XX + .5
      EE = YLEN - 3.6 + .2 + (NTVFILTS + 3) * .20

      CALL WMGSALLOCATE(ITRACETEXTSEGMENT)


      IF (IREAD.EQ.1) THEN
         WSTRING = 'Filter Design Label'
         CALL WMGOSET(ITRACETEXTSEGMENT,WM_CLASS_SEGMENT,
     X                  WSTRING2,WSTRING)
         CALL GSTXCI(NORMAL)
         Y = EE

C
C WINDOW STUFF
C
         CALL GTX(DD,Y,'       Time Variant Filter')
         Y = Y - .20

         IF (ITYPE.EQ.COSINE_WAV) THEN
            CALL GTX(DD,Y,'Cosine:   Time Gate   Min Freq  Max Freq')

         ELSEIF (ITYPE.EQ.RICKER_WAV) THEN
            CALL GTX(DD,Y,'Ricker:  Time Gate     Pred Freq')

         ELSEIF (ITYPE.EQ.ORMSBY_WAV) THEN
            CALL GTX(DD,Y,'Ormsby:  Time Gate   F1  F2  F3  F4')

         ELSEIF (ITYPE.EQ.BUTTERWORTH_WAV) THEN
            CALL GTX(DD,Y,'Buttwr:  Time Gate   F1  S1  F2  S2')
 
         ELSE
            CALL GTX(DD,Y,'User Defined Wavelet')
         ENDIF

         Y = Y - .057
         CALL GTX(DD,Y-.03,'-----------------------------------')
         LOCAT = ' '

C
C  ANNOTATE THE TIMES AND FREQUENCIES FOR EACH TIME VARIANT FILTER
C

         DO 5421 ILO = 1 , NTVFILTS
           ILON=0
           IF (ILO.GT.1) ILON= TVFTIME(ILO-1)

           IF (ITYPE.EQ.COSINE_WAV) THEN
             WRITE (LOCAT, 8523)  ILON, TVFTIME(ILO), TVF1(ILO),
     X                            TVF2(ILO)
8523         FORMAT('         ',I4,'-',I4,'   ',I4,'     ',I4)

           ELSEIF (ITYPE.EQ.RICKER_WAV) THEN
             WRITE (LOCAT, 8533)  ILON, TVFTIME(ILO), TVF1(ILO)
8533         FORMAT('         ',I4,'-',I4,'      ',I4)

           ELSEIF (ITYPE.EQ.ORMSBY_WAV) THEN
             WRITE (LOCAT, 8543)  ILON, TVFTIME(ILO), TVF1(ILO),
     X                            TVF2(ILO), TVF3(ILO), TVF4(ILO)
8543         FORMAT('         ',I4,'-',I4,'  ',I3,' ',I3,' ',I3,' '
     X              I3)

           ELSEIF (ITYPE.EQ.BUTTERWORTH_WAV) THEN
             WRITE (LOCAT, 8553)  ILON, TVFTIME(ILO), TVF1(ILO),
     X                            TVF2(ILO), TVF3(ILO), TVF4(ILO)
8553         FORMAT('         ',I4,'-',I4,'  ',I3,' ',I3,' ',I3,' '
     X             I3)
 
           ELSE
             LOCAT = '     0 - Maximum Time'
           ENDIF

           Y = Y - .20
5421       CALL GTX(DD,Y,LOCAT)

C
C  ANNOTATE LENGTH,PHASE FOR THE WAVELET (UNDER THE TIME GATE, FREQ. LABELS)
C

           Y = Y - .2
           WRITE (LOCAT, 8593)  LENGTH, IPHASE
8593       FORMAT('Length (ms)= ',I3, '  Phase (deg)= ',I4)
           CALL GTX(DD,Y,LOCAT)

      ENDIF



      IF (IREAD.EQ.0) THEN
        CALL GSPLCI(NORMAL)
        CALL GSTXCI(NORMAL)
        WSTRING='Multiple Label'
        CALL WMGOSET(ITRACETEXTSEGMENT,WM_CLASS_SEGMENT,
     X                WSTRING2,WSTRING)
        IF (JTVF.EQ.0) EE = YLEN-2.6
           Y = EE
           CALL GTX(DD,Y,'      Multiples')
           Y = Y - .14
           CALL GTX(DD,Y,'<=======================')
           Y = Y - .14
           WRITE (LOCAT, 5423)  RMULTI
5423	   FORMAT('With Surface Coef = ',F6.3)
           CALL GTX(DD,Y,LOCAT)
      ENDIF
      CALL WMGSCLOSE(ITRACETEXTSEGMENT)

C
C IF 1 FILTER PLOT SMALL TITLE
C
       Z = NTRCES - 1
C
C CENTER 'NORMAL'
C
       CALL WMGSALLOCATE(ITRACENSEGMENT)
       IF(IREAD.EQ.1)THEN
        WSTRING='Normal'
       ELSE
        WSTRING='Normal, Multiples'
       ENDIF
       CALL WMGOSET(ITRACENSEGMENT,WM_CLASS_SEGMENT,WSTRING2,
     X  WSTRING)
C
      SYMBX= XX + .5 +(TRSPAC*Z - RA*6.) / 2.
      CALL GTX(SYMBX,YLEN-3.55,'Normal')
      TRX = XX + .5 - TRSPAC
      NNPTS = NPTSL

C
C IF LONG PLOT CALL SINC FUNCTION TO INCREASE POINTS
C
       IF(PLTSPD.GT.5.0001) THEN
         YINC = YINC /2
         CALL SINSYN(NNPTS)
         NNPTS = NPTSL*2
         DO 66778 KPK = NNPTS-20,NNPTS
66778    TRACE(KPK)=0.0
        ENDIF

C
C PLOT NORMAL POLARITY PLOT
C
      DO 3032 JJ=1,NTRCES
        Y=YLEN-3.6
        YINC=DELTAT*PLTSPD
        IF(PLTSPD.GT.5.0001) YINC=YINC/2
        X=TRX + JJ * TRSPAC
        XBUF(1)=X
        YBUF(1)=Y
        NQQ=2

        DO 3031 KK = 1,NNPTS
           XPOS = TRACE(KK) * SCALE
           Y = Y - YINC
           XBUF(NQQ)=X+XPOS
           YBUF(NQQ)=Y
           NQQ=NQQ+1
C
C CHECK WIGGLE OR FILLED IN TRACE
C
           IF (DISP.EQ.'W'.OR.XPOS.LT.0) GOTO 3031
           XBUF(NQQ)=X
           YBUF(NQQ)=Y
           NQQ=NQQ+1
           XBUF(NQQ)=XPOS+X
           YBUF(NQQ)=Y
           NQQ=NQQ+1
3031  CONTINUE
      NQQ=NQQ-1
      CALL WMG_GPL(NQQ,XBUF(1),YBUF(1))
3032  CONTINUE
      CALL WMGSCLOSE(ITRACENSEGMENT)
      CALL WMGSALLOCATE(ITRACERSEGMENT)
      IF(IREAD.EQ.1)THEN
        WSTRING='Reversed'
      ELSE
        WSTRING='Reversed, Multiples'
      ENDIF
      CALL WMGOSET(ITRACERSEGMENT,WM_CLASS_SEGMENT,WSTRING2,
     X WSTRING)
      TRX = X + 1.1
      SYMBX= TRX +(TRSPAC*Z - RA*8.) / 2.+TRSPAC
      CALL GTX(SYMBX,YLEN-3.55,'Reversed')
C
C PLOT REVERSED POLARITY
C
       DO 3999 JJ = 1,NTRCES
        Y=YLEN-3.6
        YINC=DELTAT*PLTSPD
        IF(PLTSPD.GT.5.00001)YINC=YINC/2
        X=TRX + JJ * TRSPAC
        XBUF(1)=X
        YBUF(1)=Y
        NQQ=2

        DO 4031 KK = 1,NNPTS
           XPOS = TRACE(KK) * SCALE* (-1.)
           Y = Y - YINC
           XBUF(NQQ) = X + XPOS
           YBUF(NQQ) = Y
           NQQ = NQQ + 1
           IF (DISP.EQ.'W')GOTO 4031
           IF (XPOS.LT.0)GOTO 4031
           XBUF(NQQ)=X
           YBUF(NQQ)=Y
           NQQ=NQQ+1
           XBUF(NQQ)=XPOS+X
           YBUF(NQQ)=Y
           NQQ=NQQ+1
4031    CONTINUE

        NQQ=NQQ-1
      CALL WMG_GPL(NQQ,XBUF(1),YBUF(1))
3999  CONTINUE
      CALL WMGSCLOSE(ITRACERSEGMENT)
4000  CALL WMGGCLOSE(ITRACEGROUP)




C
C PLOT DEPTH SCALE ON RIGHT OF PLOT
C

      XLENN = XLEN - 6.3
      IF(ANA.EQ.'N')XLENN = XLENN + 3.999
      CALL GSCHXP(6./7.)
      CALL GSCHSP(.3)
      CALL WMGSALLOCATE(IRDEPTHSEGMENT)
      WSTRING='Right Depth Scale'
      CALL WMGOSET(IRDEPTHSEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
      CALL GSTXCI(HIGHLIGHT)
      CALL GSPLCI(HIGHLIGHT)
      IF (IFEET.EQ.1) THEN
        CALL GTX( XLENN+1., YLEN-3.1, 'Depth (F)')
      ELSE
        CALL GTX( XLENN+1., YLEN-3.1, 'Depth (M)')
      ENDIF
      IF ( DEPTH(1) .LE. 0. ) THEN
      	  FPN=0
      	  APN=0
      ELSE 
	IPN = ( DEPTH(1) - 1. ) / 100
	APN = 100 * ( IPN + 1 )
	IPN = ( DEPTH(1) - 1. ) / 1000
	FPN = 1000 * ( IPN + 1 )
      ENDIF
      CALL GSTXCI(HIGHLIGHT)
      IMAXD=0
      Y=YLEN - 3.6
      X=XLEN-5.1
      IF(ANA.EQ.'N')X = X + 3.999
      YINC = PLTSPD * DELTAT
      DO 488 JJ = 1,NPTSL
      IF(DEPTH(JJ) .LT. APN)GOTO 488
      IF(APN .EQ. FPN) THEN
          JJJFPN = FPN
          WRITE(JNUMB,333) JJJFPN
          CALL STRLJ(JNUMB)
          CALL GTX(X,Y,JNUMB)
          XBUF(1)=X-.2
          YBUF(1)=Y
          XBUF(2)=X-.4
          YBUF(2)=Y
          CALL WMG_GPL(2,XBUF,YBUF)
          FPN=FPN+1000
          IMAXD=IMAXD+1
          DY(IMAXD)=Y
      ELSE
          XBUF(1)=X-.3
          YBUF(1)=Y
          XBUF(2)=X-.4
          YBUF(2)=Y
          CALL WMG_GPL(2,XBUF,YBUF)
      ENDIF
      APN=APN+100.
488   Y=Y-YINC
      CALL WMGSCLOSE(IRDEPTHSEGMENT)
      IF(ANA.NE.'Y')GOTO 5000
      CALL WMGSALLOCATE(IANNSEGMENT)
      WSTRING='Top Annotations'
      CALL WMGOSET(IANNSEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
         X = XLEN - 5.1
         X = X + 4. * 6. /7. * .1 + 1.1
         XN = X + .1 + 26* (6./7.*.07)
         SYMBW = 22. * 6./7.*.1
         X = X + ( (XN-X) - SYMBW) / 2.
         XNOTES = X + 5. * .6 / 7.0
         CALL GSTXCI(NORMAL)
         CALL GTX(XNOTES-.5,YLEN-2.95,'Notes and/or')
         CALL GTX(X-.5,YLEN-3.1,'Formations With Depths')
      CALL GSPLCI(NORMAL)
      CALL GSTXCI(NORMAL)
      CALL GSCHH(.06)
C
C WE HAVE ANNOTATIONS
C
      ICOUNT = 1
      DO 4100 JJ = 1,NPTSL
        IF(DEPTH(JJ).LT.ADEPTH(ICOUNT))GOTO 4100
C
C WE FOUND MATCHING DEPTH SO CALCULATE Y VALUE
C
        AY1(ICOUNT)= YLEN - 3.6 - FLOAT(JJ) * DELTAT * PLTSPD
        AY2(ICOUNT)=AY1(ICOUNT)
        AX1(ICOUNT)=1.0
        ICOUNT=ICOUNT+1
        IF(ICOUNT.GT.NANNOT)GOTO 4101
4100   CONTINUE
4101   ISWIT = 1
C
C THIS LOOP CHECKS FOR ANNOTATIONS TOO CLOSE TOGETHER
C
       DO 4200 KL = 1,1000
            IF(ISWIT.EQ.0)GOTO 4201
            ISWIT=0
       DO 4200 JJ = 1,NANNOT-1
           YDIF = AY2(JJ)-AY2(JJ+1)
           IF(YDIF.GT. .12)GOTO 4200
           ISWIT=ISWIT+1
           YDIF = .121 - YDIF
           AY2(JJ)=AY2(JJ)+YDIF
           AX1(JJ)=AX1(JJ)-.2
4200   CONTINUE
4201    ISWIT = 1
        DO 6700 KLK = 1,1000
        IF(ISWIT.EQ.0)GOTO 44201
        ISWIT = 0
        DO 6700 JJ = 1,NANNOT-1
        YDIF = ABS (AY2(JJ) - AY2(JJ+1))
        XDIF = ABS (AX1(JJ) - AX1(JJ+1))
         IF(ABS(YDIF-.12) .GT. 0.03)GOTO 6700
         IF(XDIF .GT. 0.05)GOTO 6700
         AX1(JJ) = AX1(JJ) - 0.06
         ISWIT = 1
6700    CONTINUE

44201  X = XLEN - 5.1
       IF(ANA.EQ.'N')X=X+3.999
       RA = 4. * 6. / 7. * .1* 1.333
       X2 = X + RA
       CALL GSCHH(.07)
       DO 4300 JJ = 1,NANNOT
       XX = X
C
C THIS LOOP CHECKS FOR LINES THAT WOULD OVERRUN DEPTH NUMBERS
           DO 4301 KL = 1,IMAXD
            YMIN = DY(KL) - .03
            YMAX = DY(KL) + .13
            XCOR = 0.
            IF(ADEPTH(JJ).GT.9999.999)XCOR = .1
            IF(AY1(JJ).GT.YMIN.AND.AY1(JJ).LT.YMAX)XX = X2+ XCOR
 4301       CONTINUE
      XBUF(1)=XX
      YBUF(1)=AY1(JJ)
      XBUF(2)=X+RA+AX1(JJ)
      YBUF(2)=AY1(JJ)
      XBUF(3)=X+RA+AX1(JJ)
      YBUF(3)=AY2(JJ)
      XBUF(4)=X+RA+1.
      YBUF(4)=AY2(JJ)
      CALL WMG_GPL(4,XBUF,YBUF)
      CALL GTX(X+RA+1.1,AY2(JJ),ANNOT(JJ))
      XN = X + RA + 1.1 + (6./7.*20.*.07) + .1
      CALL GTX(XN,AY2(JJ),'(')
      JJJDEPTH = ADEPTH(JJ)
      WRITE(JNUMB,333) JJJDEPTH
      CALL STRLJ(JNUMB)
      IK = ISTRLEN(JNUMB)
      JNUMB(IK+1:IK+1)=')'
      CALL GTX(XN+.09,AY2(JJ),JNUMB)
4300  CONTINUE
      CALL WMGSCLOSE(IANNSEGMENT)
C
C PRINT SYNTHETIC TITLE IF NFILT > 1
C
5000  CALL WMGWCLOSE(IW1)
C
      IF(IFBATCH.EQ.0)THEN
          CLOSE(IUNIT)
      ELSE
          CLOSE(IUNIT,STATUS='DELETE')
      ENDIF
      CALL WMG_UPDATE()
      RETURN
      END







      SUBROUTINE SYNPLOT_DIALOG(WELLNO,WELLNM,COMMEN,SCALE,PLTSPD,
     X                       NTRACES,TRSP,DISP,ICANCEL,IRESLOG,IFEET)
C***********************************************************************
C
C    ROUTINE:    SYNPLOT_DIALOG
C
C    FUNCTION:   GET THE DIALOG PARAMETERS FOR PLOTTING THE SYNTHETICS.
C
C    PARAMETERS:
C                WELLNO  = UWI
C                WELLNM  = WELL NAME
C                COMMEN  = COMMENT
C                SCALE   = AMPLITUDE SCALER
C                PLTSPD  = IN/SEC
C                NTRACES = NUMBER OF TRACES PER SYNTHETIC PLOT
C                TRSP    = NUMBER OF TRACES PER INCH
C                DISP    = V OR W
C                ICANCEL = WAS CANCEL HIT
C                IRESLOG = PLOT RES LOGS ON A LOG SCALE
C
C***********************************************************************


      INCLUDE 'syn.ri'
      INCLUDE 'esi_sy_err.i'
      CHARACTER*255 STRING,HELP
      INTEGER CDLGID,CDITEM,CDVALUE,NCALLS,ID
      COMMON/SYNPLOTN/NCALLS,ID
      CHARACTER *(*) WELLNO,WELLNM,COMMEN,DISP
      DATA HELP/'SYN/SYNPLOT'/
      DATA NCALLS/0/

      IF(NCALLS.EQ.0)THEN
         CALL SYNCDLG_GL(SYNPLOT,ID)
         ID_SYNPLOT=ID
         NCALLS=1
      ENDIF
      CPERI = 100.0/(3.28028*12.0)
      DISP='V'
      COMMEN=' '
      SCALE=1.0
      IF(IFEET.EQ.1)THEN
          PLTSPD=5.0
          TRSP=6.0
          CALL WIGSCDT(ID,SYNPLOT_TPITEXT,'Traces / Inch')
          CALL WIGSCDT(ID,SYNPLOT_PLOTSPTEXT,'Inches / Second')
      ELSE
          PLTSPD=10.0
          TRSP=2.0
          CALL WIGSCDT(ID,SYNPLOT_TPITEXT,'Traces / Cm')
          CALL WIGSCDT(ID,SYNPLOT_PLOTSPTEXT,'Cm / Second')
      ENDIF
C
      NTRACES=6
      ICANCEL=0
      IRESLOG=1
      CALL WIGOPCD(ID)
      CALL WIGSCDV(ID,SYNPLOT_RESLOG,1)
      CALL WIGSCDV(ID,SYNPLOT_VARIABLE,1)
      STRING=WELLNO
      CALL WIGSCDT(ID,SYNPLOT_UWI,STRING)
      STRING=WELLNM
      CALL WIGSCDT(ID,SYNPLOT_WELL,STRING)
      STRING=' '
      CALL WIGSCDT(ID,SYNPLOT_COMMENT,STRING)
      WRITE(STRING,'(F3.1)')SCALE
      CALL WIGSCDT(ID,SYNPLOT_SCALE,STRING)
      WRITE(STRING,'(F3.1)')TRSP
      CALL WIGSCDT(ID,SYNPLOT_TPI,STRING)
      WRITE(STRING,'(I1)')NTRACES
      CALL WIGSCDT(ID,SYNPLOT_NTRACES,STRING)
      WRITE(STRING,'(F6.2)')PLTSPD
      CALL STRLJ(STRING)
      CALL WIGSCDT(ID,SYNPLOT_PLOTSPD,STRING)
      CALL WIGENCDI(ID,SYNPLOT_WELL,0)
      CALL WIGENCDI(ID,SYNPLOT_UWI,0)
100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)


      IF (CDITEM.EQ.SYNPLOT_OK) GOTO 999
      IF (CDITEM.EQ.SYNPLOT_CANCEL) THEN
          ICANCEL=1
          GOTO 9999
      ENDIF

      IF (CDITEM.EQ.SYNPLOT_VARIABLE) THEN
            DISP='V'
            GOTO 100
      ENDIF

      IF (CDITEM.EQ.SYNPLOT_WIGGLE) THEN
            DISP='W'
            GOTO 100
      ENDIF

      IF (CDITEM.EQ.SYNPLOT_RESLOG) THEN
            IF(IRESLOG.EQ.0)THEN
                  IRESLOG=1
            ELSE
                  IRESLOG=0
            ENDIF
      GOTO 100
      ENDIF


999   CALL WIGQCCDI(CDLGID,SYNPLOT_TPI,IDUM,STRING)
      NERR=0
      IF (STRING.EQ.' ') GOTO 1010
      READ (STRING,*,ERR=1010) TRSP
      IF (TRSP.LT.1.OR.TRSP.GT.24) THEN
          NERR=NERR+1
          IF(IFEET.EQ.1)THEN
	    CALL MGG_MESSAGE(SY_TPI_RANGE_EXCEEDED,STRING)
          ELSE
	    CALL MGG_MESSAGE(SY_TPC_RANGE_EXCEEDED,STRING)
          ENDIF
          CALL WIGALERT(1,HELP,STRING,' ')
      ENDIF
      GOTO 1020
1010  NERR = NERR + 1
      IF (IFEET.EQ.1) THEN
	  CALL MGG_MESSAGE(SY_TPI_NON_NUM,STRING)
      ELSE
	  CALL MGG_MESSAGE(SY_TPC_NON_NUM,STRING)
      ENDIF
      CALL WIGALERT(1,HELP,STRING,' ')


1020  CALL WIGQCCDI(CDLGID,SYNPLOT_NTRACES,IDUM,STRING)
      IF(STRING.EQ.' ')GOTO 1030
      READ(STRING,*,ERR=1030)NTRACES
      IF(NTRACES.LT.1.OR.NTRACES.GT.24)THEN
          NERR=NERR+1
          CALL MGG_MESSAGE(SY_NTRACES_RANGE_EXCCEDED,STRING)
          CALL WIGALERT(1,HELP,STRING,' ')
      ENDIF
      GOTO 1040
1030  NERR=NERR+1
      CALL MGG_MESSAGE(SY_NTRACES_NON_NUM,STRING)
      CALL WIGALERT(1,HELP,STRING,' ')


1040  CALL WIGQCCDI(CDLGID,SYNPLOT_SCALE,IDUM,STRING)
      IF(STRING.EQ.' ')GOTO 1050
      READ(STRING,*,ERR=1050)SCALE
      IF(SCALE.LT.0.0.OR.SCALE.GT.10.0)THEN
	  CALL MGG_MESSAGE(SY_AMP_SCALAR_RANGE_EXCEEDED, STRING)
         NERR=NERR+1
         CALL WIGALERT(1,HELP,STRING,' ')
      ENDIF
      GOTO 1060
1050  NERR=NERR+1
      CALL MGG_MESSAGE(SY_AMP_NON_NUMERIC, STRING)
      CALL WIGALERT(1,HELP,STRING,' ')


1060  CALL WIGQCCDI(CDLGID,SYNPLOT_COMMENT,IDUM,STRING)
      II=LEN(COMMEN)
      COMMEN=STRING(1:II)
      CALL STRLJ(COMMEN)
      CALL WIGQCCDI(CDLGID,SYNPLOT_PLOTSPD,IDUM,STRING)
      IF(STRING.EQ.' ')GOTO 1070
      READ(STRING,*,ERR=1070)PLTSPD
      IF(PLTSPD.LT.1.0 .OR. PLTSPD. GT. 50.)THEN
          IF(IFEET.EQ.1)THEN
		CALL MGG_MESSAGE(SY_INCH_SEC_RANGE_EXCEEDED,STRING)
          ELSE
		CALL MGG_MESSAGE(SY_CM_SEC_RANGE_EXCEEDED,STRING)
          ENDIF
          NERR=NERR+1
          CALL WIGALERT(1,HELP,STRING,' ')
      ENDIF
      GOTO 1080
1070  IF(IFEET.EQ.1)THEN 
	CALL MGG_MESSAGE( SY_INCH_SEC_NON_NUM,STRING) 
      ELSE
	CALL MGG_MESSAGE( SY_CM_SEC_NON_NUM,STRING) 
      ENDIF
      NERR=NERR+1
      CALL WIGALERT(1,HELP,STRING,' ')
1080  IF(NERR.NE.0)GOTO 100



9999  CALL WIGCLCD(ID)
      IF(IFEET.EQ.0)THEN
          PLTSPD = PLTSPD / CPERI
          TRSP   = TRSP   * CPERI
      ENDIF
      RETURN
      END


