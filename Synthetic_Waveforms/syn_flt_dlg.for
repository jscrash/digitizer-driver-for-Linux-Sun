C  DEC/CMS REPLACEMENT HISTORY, Element SYN_FLT_DLG.FOR
C  *4     6-NOV-1989 16:30:38 GILLESPIE "(SPR 1) CHANGE MOG_RELEASE_RESOURCE TO AMG_DEFINE_RESOURCE"
C  *3     6-NOV-1989 09:05:10 PURNA "(SPR 30) fix mo_ calls to mog_"
C  *2    19-SEP-1989 10:16:45 GORDON "(PURNA) GULF MODS UNDER SPR 100"
C  *1    10-AUG-1989 18:52:07 VINCE "Fortran code after UNIX mods"
C  DEC/CMS REPLACEMENT HISTORY, Element SYN_FLT_DLG.FOR
C******************************************************************************
C
C                Copyright Finder Graphics Systems, Inc. 1989
C		   Unpublished -- All rights reserved
C
C THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Finder Graphics Systems, Inc AND MAY
C CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
C DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
C MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF
C
C			Finder Graphics Systems, Inc.
C			201 Tamal Vista Blvd
C			Corte Madera, California 94925
C			(415) 927-0100
C
C (The above notice does not constitute an admission of publication or
C unrestricted dissemination of the work)
C
C******************************************************************************
C
 
      SUBROUTINE SYN_WAVELET_DIALOG(ICANCEL)
C ***********************************************************************
C
C    ROUTINE:   SYN_WAVELET_DIALOG
C
C    FUNCTION:  TO ALLOW THE USER TO SELECT A FILTER WAVELET TO CONVOLVE
C               WITH THE REFLECTION COEFFICIENTS TO CREATE SYNTHETIC 
C               TRACES.
C
C    WAVELETS:  ORMSBY(BANDPASS) 
C               RICKER (OLD RICKER - CURRENTLY COMMENTED OUT)
C               RICKER2 (NEW RICKER WAVELET FROM CGG ROUTINE)
C               BUTTERWORTH
C               HALF-CYCLE COSINE (OLD BANDPASS WAVELET - CURRENTLY
C                                  COMMENTED OUT)
C               USER DEFINED
C
C    PARAMETERS:
C               ICANCEL = WAS CANCEL HIT
C               IPHASE  = PHASE ROTATION ANGLE IN DEGREES
C               IDISP   = = 1 IF DISPLAY SPECTRUM ELSE = 0
C               
C    VARIABLES: WAVELET_STATE = 
C
C
C ***********************************************************************

      INCLUDE 'esi_am.i'
      INCLUDE 'sf_defs.i'
      INCLUDE 'synth2.ri'

C
      CHARACTER*255 STRING, HELP
      CHARACTER*15  RES_FILE
      INTEGER       CDLGID, CDITEM, CDVALUE, ID

      COMMON/FILTPARAM/ IFTYPE, IDISP, IPHASE, ISAMP, IETIME

      DATA HELP/'MODEL_TRACES'/
      DATA RES_FILE/'SYNTH2'/


      ICANCEL      = 0

C
C DEFINE DIALOG BOX
C
      CALL AMG_DEFINE_RESOURCE(AM_DIALOG, RES_FILE, SYN_WAVLET, 
     X                         0, ID, 0)

C
C      FILL IT UP
C
      WRITE(STRING,'(I4)') IPHASE
      CALL STRLJ(STRING)
      CALL WIGSCDT(ID, SYN_WAVLET_PHASE, STRING)
      IF (IDISP.EQ.1) THEN
        CALL WIGSCDV(ID, SYN_WAVLET_DISPLAY, 1)
      ENDIF

C
C  SET UP THE DEFAULT WAVELET 
C

      IF (IFTYPE.EQ.RICKER_WAV) THEN
          CALL WIGSCDV(ID, SYN_WAVLET_RICKER, 1)

      ELSEIF (IFTYPE.EQ.BUTTERWORTH_WAV) THEN
          CALL WIGSCDV(ID, SYN_WAVLET_BUTTER, 1)

      ELSEIF (IFTYPE.EQ.ORMSBY_WAV) THEN
          CALL WIGSCDV(ID, SYN_WAVLET_ORMSBY, 1)

      ELSE
          CALL WIGSCDV(ID, SYN_WAVLET_USERDEF, 1)
      ENDIF


      CALL WIGOPCD(ID)
100   CALL WIGRQCDI(CDLGID, CDITEM, CDVALUE, STRING)



C
      IF(CDITEM.EQ.SYN_WAVLET_OK) GOTO 999
      IF(CDITEM.EQ.SYN_WAVLET_CANCEL) THEN
          ICANCEL=1
          GOTO 9999
      ENDIF


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C HALF CYCLE COSINE (BANDPASS) WAVELET
C
C      IF(CDITEM.EQ.MODELT_COSINE)THEN
C          ITEMP_WSTATE = COSINE_WAV
C          GOTO 100
C      ENDIF
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C RICKER WAVELET
C
C      IF(CDITEM.EQ.MODELT_RICKER)THEN
C          ITEMP_WSTATE = 1
C          GOTO 100
C      ENDIF
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C
C RICKER WAVELET (NEW CGG VERSION)
C

      IF (CDITEM.EQ.SYN_WAVLET_RICKER) THEN
          IFTYPE = RICKER_WAV
          GOTO 100
      ENDIF


C
C BUTTERWORTH WAVELET
C
      IF(CDITEM.EQ.SYN_WAVLET_BUTTER) THEN
          IFTYPE = BUTTERWORTH_WAV
          GOTO 100
      ENDIF

C
C ORMSBY BANDPASS WAVELET
C
      IF(CDITEM.EQ.SYN_WAVLET_ORMSBY) THEN
          IFTYPE = ORMSBY_WAV
          GOTO 100
      ENDIF


C
C USER DEFINED WAVELET
C
      IF(CDITEM.EQ.SYN_WAVLET_USERDEF) THEN
          IFTYPE = USER_DEFINED_WAV
          GOTO 100
      ENDIF


C
C  DISPLAY THE WAVELET AND SPECTRUM
C
      IF (CDITEM.EQ.SYN_WAVLET_DISPLAY) THEN
          IF(IDISP.EQ.0)THEN
             IDISP = 1
          ELSE
             IDISP = 0
          ENDIF
          GOTO 100
      ENDIF



C
C  CHECK PHASE ROTATION
C
999   CALL WIGQCCDI(CDLGID, SYN_WAVLET_PHASE, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 2050
      READ(STRING,*,ERR = 2050) IPHASE

      IF (IPHASE.LT.-360.OR.IPHASE.GT.360)THEN
            STRING='Phase is out of range. Valid range is -360 TO +360.'
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 9999

2050  STRING = 'Phase is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')





9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END















      SUBROUTINE SYN_ORMSBY_DIALOG( ICANCEL)
C***********************************************************************
C
C  ROUTINE:   SYN_ORMSBY_DIALOG
C
C  FUNCTION:  GET AND CHECK THE FILTER PARAMETERS FOR AN ORMSBY 
C             BANDPASS (TIME VARIANT) FILTER
C
C  VARIABLES: 
C             LCUTFR()    = LOW CUT FREQUENCY (100% ATTENUATION)
C             LPASSFR()   = LOW PASS FREQUENCY (100% AMPLITUDE)
C             HPASSFR()   = HIGH PASS FREQUENCY (100% AMPLITUDE)
C             HCUTFR()    = HIGH CUT FREQUENCY (100% ATTENUATION)
C             TIME()      = ENDING TIME FOR TIME GATE (MSEC)
C             IETIME      = ENDING TIME OF TRACE(MSEC)
C             ITAPER      = TAPER LENGTH BETWEEN GATES (MSEC)
C             ISAMP       = WAVELET SAMPLE RATE
C             LENGTH      = WAVELET LENGTH IN MSEC
C             IBTYPE      = FILTER TYPE: =   BANDPASS, LOWPASS
C                                            OR  HIGHPASS
C              
C             ICANCEL   = 0 IF NOT CANCEL HIT, 1 IF CANCEL IS HIT
C
C***********************************************************************

      INCLUDE 'synth2.ri'
      INCLUDE 'sf_defs.i'
      INCLUDE 'esi_am.i'

C

      CHARACTER*128 STRING, STRING1, STRING2, HELP
      CHARACTER*15  RES_FILE
      INTEGER       CDLGID,CDITEM,CDVALUE
      INTEGER       HPASSFR, HCUTFR

      COMMON/FILTPARAM/ IFTYPE, IDISP, IPHASE, ISAMP, IETIME

      COMMON/FILTORMS/  LCUTFR(3), LPASSFR(3), HPASSFR(3), HCUTFR(3),
     X                  ITIME(3), NFILT_ORMS, IBTYPE, ITAPER_ORMS,
     X                  LENGTH_ORMS

      DATA HELP/'SYN_ORMSBY'/
      DATA RES_FILE/'SYNTH2'/

C
C  DEFINE MAX ALLOWABLE FREQUENCY (NYQUIST) ACCORDING TO SAMP. RATE
C  AND LENGTH LIMITS
C

      NYQFR = 1000 / ( 2 * ISAMP)
      MIN_LENGTH   = 40
      MAX_LENGTH   = 500
      MIN_TAPER = 1
      MAX_TAPER = 500


C
C  OPEN THE DIALOG
C
      CALL AMG_DEFINE_RESOURCE(AM_DIALOG, RES_FILE, SYN_ORMSBY,
     X                         0, ID, 0)
      CALL WIGOPCD(ID)

C
C  DEFAULT FILTER TYPE 
C
      IF (IBTYPE.EQ.ORMSBY_LPASS) THEN
         CALL WIGSCDV(ID, SYN_ORMSBY_LPASS, 1)
      ELSE IF (IBTYPE.EQ.ORMSBY_HPASS) THEN
         CALL WIGSCDV(ID, SYN_ORMSBY_HPASS, 1)
      ELSE 
         CALL WIGSCDV(ID, SYN_ORMSBY_BPASS, 1)
      ENDIF

C
C  SET UP DEFAULT BANDPASS FREQUENCIES,TIMES  FROM SAVED VALUES
C

      WRITE(STRING,'(I5)') LCUTFR(1)
      CALL WIGSCDT(ID, SYN_ORMSBY_F1_A, STRING)
      WRITE(STRING,'(I5)') LPASSFR(1)
      CALL WIGSCDT(ID, SYN_ORMSBY_F2_A, STRING)
      WRITE(STRING,'(I5)') HPASSFR(1)
      CALL WIGSCDT(ID, SYN_ORMSBY_F3_A, STRING)
      WRITE(STRING,'(I5)') HCUTFR(1)
      CALL WIGSCDT(ID, SYN_ORMSBY_F4_A, STRING)
      WRITE(STRING,'(I5)') ITIME(1)
      CALL WIGSCDT(ID, SYN_ORMSBY_TIME_A, STRING)


      IF (NFILT_ORMS.GT.1) THEN
        WRITE(STRING,'(I5)') LCUTFR(2)
        CALL WIGSCDT(ID, SYN_ORMSBY_F1_B, STRING)
        WRITE(STRING,'(I5)') LPASSFR(2)
        CALL WIGSCDT(ID, SYN_ORMSBY_F2_B, STRING)
        WRITE(STRING,'(I5)') HPASSFR(2)
        CALL WIGSCDT(ID, SYN_ORMSBY_F3_B, STRING)
        WRITE(STRING,'(I5)') HCUTFR(2)
        CALL WIGSCDT(ID, SYN_ORMSBY_F4_B, STRING)
        WRITE(STRING,'(I5)') ITIME(2)
        CALL WIGSCDT(ID, SYN_ORMSBY_TIME_B, STRING)
      ENDIF

      IF (NFILT_ORMS.GT.2) THEN
        WRITE(STRING,'(I5)') LCUTFR(3)
        CALL WIGSCDT(ID, SYN_ORMSBY_F1_C, STRING)
        WRITE(STRING,'(I5)') LPASSFR(3)
        CALL WIGSCDT(ID, SYN_ORMSBY_F2_C, STRING)
        WRITE(STRING,'(I5)') HPASSFR(3)
        CALL WIGSCDT(ID, SYN_ORMSBY_F3_C, STRING)
        WRITE(STRING,'(I5)') HCUTFR(3)
        CALL WIGSCDT(ID, SYN_ORMSBY_F4_C, STRING)
        WRITE(STRING,'(I5)') ITIME(3)
        CALL WIGSCDT(ID, SYN_ORMSBY_TIME_C, STRING)
      ENDIF


      WRITE(STRING,'(I5)') ITAPER_ORMS
      CALL WIGSCDT(ID, SYN_ORMSBY_TAPER, STRING)

      WRITE(STRING,'(I5)') LENGTH_ORMS
      CALL WIGSCDT(ID, SYN_ORMSBY_LENGTH, STRING)

      ICANCEL=0

100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)

C
C  SET FILTER TYPE IF HAS CHANGED
C

      IF (CDITEM.EQ.SYN_ORMSBY_BPASS)  IBTYPE = ORMSBY_BPASS
      IF (CDITEM.EQ.SYN_ORMSBY_LPASS)  IBTYPE = ORMSBY_LPASS
      IF (CDITEM.EQ.SYN_ORMSBY_HPASS)  IBTYPE = ORMSBY_HPASS


      IF (CDITEM.EQ.SYN_ORMSBY_OK) GOTO 999
      IF (CDITEM.EQ.SYN_ORMSBY_CANCEL) THEN
            ICANCEL=1
            GOTO 9999
      ENDIF

      GOTO 100

C
C   DECIDE HOW MANY FILTER ARE BEING USED, MAKE SURE ARE ENTERED IN 
C   CORRECT ORDER (CANNOT ENTER IN F1 IN ROW1, 0 IN ROW2, F2 IN ROW3)
C

999   NFILT_ORMS = 1
      MIN_SLOPE = 100

      IF (IBTYPE.EQ.ORMSBY_BPASS.OR.IBTYPE.EQ.ORMSBY_HPASS) THEN
         CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F1_A, IDUM, STRING)
         CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F1_B, IDUM, STRING1)
         CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F1_C, IDUM, STRING2)
      ELSE
         CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F3_A, IDUM, STRING)
         CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F3_B, IDUM, STRING1)
         CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F3_C, IDUM, STRING2)
      ENDIF

      IF (STRING.EQ.' '.OR.(STRING1.EQ.' '.AND.STRING2.NE.' ')) THEN
         STRING = 'Filters must be entered from first row and be'//
     x            ' consecutive'
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100
      ENDIF

      IF (STRING1.NE.' ')  NFILT_ORMS = 2
      IF (STRING2.NE.' ')  NFILT_ORMS = 3


C
C   CHECK THE LOW CUT FREQUENCY (IF BANDPASS OR HIGHPASS)
C
      IF (IBTYPE.EQ.ORMSBY_BPASS.OR.IBTYPE.EQ.ORMSBY_HPASS) THEN

      DO 1001 I = 1, NFILT_ORMS

           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F1_A, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F1_B, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F1_C, IDUM, STRING)
           ENDIF

           IF(STRING.EQ.' ') GOTO 1010
           READ(STRING,*,ERR=1010) LCUTFR(I)

           MAX_FREQ = 100
           MIN_FREQ = 0

           IF ( LCUTFR(I).LT.MIN_FREQ.OR.LCUTFR(I).GT.MAX_FREQ) THEN
              WRITE (STRING, 1005) I 
1005     FORMAT ('Low Cut Frequency is out of Range for Row: ', I5)
              CALL WIGALERT(1,HELP,STRING,' ')
              GOTO 100
           ENDIF
1001     CONTINUE

         GOTO 1120

1010     WRITE (STRING, 1015) I 
1015     FORMAT ('Low Cut Frequency is not an integer in Row: ', I5)
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100

      ENDIF


C
C   CHECK THE LOW PASS FREQUENCY (IF BANDPASS OR HIGHPASS)
C


1120  IF (IBTYPE.EQ.ORMSBY_BPASS.OR.IBTYPE.EQ.ORMSBY_HPASS) THEN

      DO 1121 I = 1, NFILT_ORMS

           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F2_A, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F2_B, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F2_C, IDUM, STRING)
           ENDIF

           IF(STRING.EQ.' ') GOTO 1130
           READ(STRING,*,ERR = 1130) LPASSFR(I)

           MAX_FREQ = 100
           MIN_FREQ = LCUTFR(I) + 2

           IF( LPASSFR(I).LT.MIN_FREQ.OR.LPASSFR(I).GT.MAX_FREQ) THEN
              WRITE (STRING, 1125) I 
1125     FORMAT ('Low Pass Frequency is out of Range in Row: ', I5)
              CALL WIGALERT(1,HELP,STRING,' ')
              GOTO 100
           ENDIF

1121     CONTINUE

         GOTO 1220

1130     WRITE (STRING, 1135) I 
1135     FORMAT ('Low Pass Frequency is not an integer in Row: ', I5)
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100

      ENDIF      


C
C   CHECK HIGH PASS FREQUENCY (IF BANDPASS OR LOWPASS FILTER)
C

1220  IF (IBTYPE.EQ.ORMSBY_BPASS.OR.IBTYPE.EQ.ORMSBY_LPASS) THEN

      DO 1221 I = 1, NFILT_ORMS

           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F3_A, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F3_B, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F3_C, IDUM, STRING)
           ENDIF

           IF(STRING.EQ.' ') GOTO 1230
           READ(STRING,*, ERR = 1230) HPASSFR(I)

           IF (IBTYPE.EQ.ORMSBY_BPASS) THEN
             MAX_FREQ = NYQFR - 10
             MIN_FREQ = LPASSFR(I) + 1
           ELSE IF (IBTYPE.EQ.ORMSBY_LPASS) THEN
             MAX_FREQ = NYQFR - 10
             MIN_FREQ = 0
          ENDIF

          IF( HPASSFR(I).LT.MIN_FREQ.OR.HPASSFR(I).GT.MAX_FREQ) THEN
              WRITE (STRING, 1225) I 
1225     FORMAT ('High Pass Frequency is out of Range in Row: ', I5)
             CALL WIGALERT(1,HELP,STRING,' ')
             GOTO 100
          ENDIF

1221    CONTINUE

        GOTO 1320

1230    WRITE (STRING, 1235) I 
1235    FORMAT ('High Pass frequency is not an integer in Row: ', I5)
        CALL WIGALERT(1,HELP,STRING,' ')
        GOTO 100

      ENDIF


C
C   CHECK THE HIGH CUT FREQUENCY (IF BANDPASS OR LOWPASS FILTER)
C

1320  IF (IBTYPE.EQ.ORMSBY_BPASS.OR.IBTYPE.EQ.ORMSBY_LPASS) THEN
 
      DO 1321 I = 1, NFILT_ORMS

           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F4_A, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F4_B, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_F4_C, IDUM, STRING)
           ENDIF

           IF (STRING.EQ.' ') GOTO 1330
           READ(STRING,*,ERR = 1330) HCUTFR(I)

           MAX_FREQ = NYQFR
           MIN_FREQ = HPASSFR(I) + 1

           IF ( HCUTFR(I).LT.MIN_FREQ.OR.HCUTFR(I).GT.MAX_FREQ) THEN
              WRITE (STRING, 1325) I 
1325     FORMAT ('High Cut Frequency is out of Range in Row: ', I5)
                 CALL WIGALERT(1,HELP,STRING,' ')
                 GOTO 100
           ENDIF

1321     CONTINUE

         GOTO 1420

1330     WRITE (STRING, 1335) I 
1335     FORMAT ('High Cut Frequency is not an integer in Row: ', I5)
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100

      ENDIF


C
C   NOW CHECK THE END TIMES FOR ALL FILTERS
C

1420  DO 1421 I = 1, NFILT_ORMS

           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_TIME_A, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_TIME_B, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_ORMSBY_TIME_C, IDUM, STRING)
           ENDIF

           READ(STRING,*,ERR = 1430) ITIME(I)

           IF ( ITIME(I).GT.IETIME) ITIME(I) = IETIME

           IF ( (I.GT.1.AND.ITIME(I).LE.ITIME(I - 1)).OR.
     X           ITIME(I).LE.0) THEN
                 STRING = 'End Times must be > 0 and Increasing'
                 CALL WIGALERT(1,HELP,STRING,' ')
                 GOTO 100
           ENDIF

1421     CONTINUE

         GOTO 1520

1430     STRING = 'End Time is not an integer.'
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100


C
C  CHECK FILTER LENGTH (IN MSEC)
C

1520  CALL WIGQCCDI(CDLGID, SYN_ORMSBY_LENGTH, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 1550

      READ(STRING,*,ERR = 1550) LENGTH_ORMS
      IF (LENGTH_ORMS.LT.MIN_LENGTH.OR.LENGTH_ORMS.GT.MAX_LENGTH) THEN
            WRITE (STRING, 1548) MIN_LENGTH, MAX_LENGTH
1548        FORMAT ('Length is out of range. Valid range is ', I3,
     X         ' - ',I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF

      GOTO 1620

1550  STRING = 'Length is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100



C
C  CHECK TAPER LENGTH (IN MSEC)
C

1620  CALL WIGQCCDI(CDLGID, SYN_ORMSBY_TAPER, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 1620
      READ (STRING,*,ERR = 1620) ITAPER_ORMS

      IF (ITAPER_ORMS.LT.MIN_TAPER.OR.ITAPER_ORMS.GT.MAX_TAPER) THEN
            WRITE (STRING, 1648) MIN_TAPER, MAX_TAPER
1648        FORMAT ('Taper Length is out of range. Range is: ', I3,
     x        ' To: ', I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 2500

1650  STRING = 'Taper Length is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100



C
C  NOW CHECK THAT THE ROLLOFFS ARE NOT TOO STEEP FOR THE REQUESTED 
C    FILTER LENGTH
C

2500  DO 2521 I = 1, NFILT_ORMS
        IF (IBTYPE.EQ.ORMSBY_BPASS) THEN
          DFMIN = AMIN0( LPASSFR(I) - LCUTFR(I), HCUTFR(I) - HPASSFR(I))
        ELSE IF (IBTYPE.EQ.ORMSBY_HPASS) THEN
          DFMIN = LPASSFR(I) - LCUTFR(I) 
        ELSE
          DFMIN = HCUTFR(I) - HPASSFR(I)
        ENDIF
        MIN_LEN = 3000 / DFMIN

        IF (LENGTH_ORMS.LT.MIN_LEN) THEN

        WRITE (STRING, 7048) MIN_LEN
7048    FORMAT ('Rolloff is too steep. Min length for this filter = ',
     X           I3, '  -Increase length or change filter design')

          CALL WIGALERT(1,HELP,STRING,' ')
          GOTO 100
        ENDIF

2521  CONTINUE



   



9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END










      SUBROUTINE SYN_BUTTWRTH_DIALOG( ICANCEL)
C***********************************************************************
C
C  ROUTINE:   SYN_BUTTWRTH_DIALOG
C
C  FUNCTION:  GET AND CHECK THE FILTER PARAMETERS FOR A BUTTERWORTH 
C             BANDPASS FILTER
C
C  VARIABLES: 
C             LPASSFR   = LOW PASS FREQUENCY (100% AMPLITUDE)
C             LROFF     = ROLLOFF SLOPE IN DB/OCTAVE ON THE HIGH SIDE
C             HPASSFR   = HIGH PASS FREQUENCY (100% AMPLITUDE)
C             HROFF     = ROLLOFF SLOPE IN DB/OCTAVE ON THE HIGH SIDE
C             LENGTH    = LENGTH OF THE WAVELET IN MSEC
C             ISAMP     = WAVELET SAMPLE RATE
C             ICANCEL   = 0 IF NOT CANCEL HIT, 1 IF CANCEL IS HIT
C
C***********************************************************************

      INCLUDE 'synth2.ri'
      INCLUDE 'esi_am.i'
      INCLUDE 'sf_defs.i'

C
      CHARACTER*255 STRING,HELP
      CHARACTER*32  STRING1, STRING2
      CHARACTER*15  RES_FILE
      INTEGER       CDLGID,CDITEM,CDVALUE
      INTEGER       HFREQ, HROFF


      COMMON/FILTPARAM/ IFTYPE, IDISP, IPHASE, ISAMP, IETIME

      COMMON/FILTBUTT / LROFF(3), LFREQ(3), HFREQ(3), HROFF(3),
     X                  ITIME_BUTT(3), NFILT_BUTT, ITAPER_BUTT,
     X                  LENGTH_BUTT

      DATA HELP/'MO_ORMSBY'/

C
C  DEFINE MAX ALLOWABLE FREQUENCY (NYQUIST) ACCORDING TO SAMP. RATE
C   AND THE MAXIMUM ROLLOFF ALLOWED (IN DB/OCTAVE), MAX. LENGTH
C

      MAXFR = 1000 / ( 2 * ISAMP)
      MINROFF = 6
      MAXROFF = 90
      MIN_LENGTH   = 40
      MAX_LENGTH   = 500
      MIN_TAPER = 1
      MAX_TAPER = 500
      RES_FILE = 'SYNTH2'

C
C  OPEN THE DIALOG BOX
C

      CALL AMG_DEFINE_RESOURCE(AM_DIALOG, RES_FILE, SYN_BUTTWRTH,
     X                         0, ID, 0)
      CALL WIGOPCD(ID)

C
C  SET UP DEFAULT BANDPASS FREQUENCIES, ROLLOFFS, END TIMES
C

      WRITE(STRING,'(I5)') LFREQ(1)
      CALL WIGSCDT(ID, SYN_BUTTWRTH_F1_A, STRING)
      WRITE(STRING,'(I5)') LROFF(1)
      CALL WIGSCDT(ID, SYN_BUTTWRTH_S1_A, STRING)
      WRITE(STRING,'(I5)') HFREQ(1)
      CALL WIGSCDT(ID, SYN_BUTTWRTH_F2_A, STRING)
      WRITE(STRING,'(I5)') HROFF(1)
      CALL WIGSCDT(ID, SYN_BUTTWRTH_S2_A, STRING)
      WRITE(STRING,'(I5)') ITIME_BUTT(1)
      CALL WIGSCDT(ID, SYN_BUTTWRTH_TIME_A, STRING)

      IF (NFILT_BUTT.GT.1) THEN
        WRITE(STRING,'(I5)') LFREQ(2)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_F1_B, STRING)
        WRITE(STRING,'(I5)') LROFF(2)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_S1_B, STRING)
        WRITE(STRING,'(I5)') HFREQ(2)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_F2_B, STRING)
        WRITE(STRING,'(I5)') HROFF(2)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_S2_B, STRING)
        WRITE(STRING,'(I5)') ITIME_BUTT(2)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_TIME_B, STRING)
      ENDIF

      IF (NFILT_BUTT.GT.2) THEN
        WRITE(STRING,'(I5)') LFREQ(3)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_F1_C, STRING)
        WRITE(STRING,'(I5)') LROFF(3)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_S1_C, STRING)
        WRITE(STRING,'(I5)') HFREQ(3)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_F2_C, STRING)
        WRITE(STRING,'(I5)') HROFF(3)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_S2_C, STRING)
        WRITE(STRING,'(I5)') ITIME_BUTT(3)
        CALL WIGSCDT(ID, SYN_BUTTWRTH_TIME_C, STRING)
      ENDIF


      WRITE(STRING,'(I5)') ITAPER_BUTT
      CALL WIGSCDT(ID, SYN_BUTTWRTH_TAPER, STRING)

      WRITE(STRING,'(I5)') LENGTH_BUTT
      CALL WIGSCDT(ID, SYN_BUTTWRTH_LENGTH, STRING)

      ICANCEL=0



100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)

      IF (CDITEM.EQ.SYN_BUTTWRTH_OK) GOTO 999
      IF (CDITEM.EQ.SYN_BUTTWRTH_CANCEL) THEN
            ICANCEL=1
            GOTO 9999
      ENDIF

      GOTO 100

C
C   DECIDE HOW MANY FILTERS ARE BEING USED, MAKE SURE ARE ENTERED IN 
C   CORRECT ORDER (CANNOT ENTER IN F1 IN ROW1, 0 IN ROW2, F2 IN ROW3)
C

999   NFILT_BUTT = 1

      CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_F1_A, IDUM, STRING)
      CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_F1_B, IDUM, STRING1)
      CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_F1_C, IDUM, STRING2)

      IF (STRING.EQ.' '.OR.(STRING1.EQ.' '.AND.STRING2.NE.' ')) THEN
         STRING = 'Filters must be entered from first row and be'//
     x            ' consecutive'
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100
      ENDIF

      IF (STRING1.NE.' ')  NFILT_BUTT = 2
      IF (STRING2.NE.' ')  NFILT_BUTT = 3



C
C  NOW CHECK THE FREQUENCIES AND ROLLOFFS ENTERED BY THE ABUSER
C  LOW PASS FIRST
C

      MAX_FREQ = 100
      MIN_FREQ = 1

      DO 1001 I = 1, NFILT_BUTT

           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_F1_A, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_F1_B, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_F1_C, IDUM, STRING)
           ENDIF

           IF(STRING.EQ.' ') GOTO 1050
           READ(STRING,*,ERR=1050) LFREQ(I)

           IF ( LFREQ(I).LT.MIN_FREQ.OR.LFREQ(I).GT.MAX_FREQ) THEN
              WRITE (STRING, 1005) I 
1005     FORMAT ('Low Cut Frequency is out of Range for Row: ', I5)
              CALL WIGALERT(1,HELP,STRING,' ')
              GOTO 100
           ENDIF


1001     CONTINUE


      GOTO 1120

1050  WRITE (STRING, 1051) I
1051  FORMAT('Low Pass frequency is not an integer in row: ', I3)
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100



C
C  CHECK THE LOW PASS ROLLOFF
C

1120  DO 1151 I = 1, NFILT_BUTT

         IF (I.EQ.1) THEN
           CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_S1_A, IDUM, STRING)
         ELSEIF (I.EQ.2) THEN
           CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_S1_B, IDUM, STRING)
         ELSE
           CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_S1_C, IDUM, STRING)
         ENDIF

         IF(STRING.EQ.' ') GOTO 1130
         READ(STRING,*,ERR = 1130) LROFF(I)

         IF( LROFF(I).LT.MINROFF.OR.LROFF(I).GT.MAXROFF) THEN
            WRITE (STRING,1122) I, MINROFF, MAXROFF
1122        FORMAT( 'Invalid Rolloff in Row: ', I3,
     X              ' Range = ',I3, ', ',I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
         ENDIF

1151  CONTINUE

      GOTO 1220

1130  WRITE (STRING,1131) I
1131  FORMAT( 'Low Side Rolloff is not an integer in Row: ',I3)
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100



C
C  CHECK THE HIGH PASS FREQUENCY
C

1220  MAX_FREQ = MAXFR
    
      DO 1230  I = 1, NFILT_BUTT
           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_F2_A, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_F2_B, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_F2_C, IDUM, STRING)
           ENDIF

           IF (STRING.EQ.' ') GOTO 1250
           READ(STRING,*,ERR=1250) HFREQ(I)

           MIN_FREQ = LFREQ(I)
           IF ( HFREQ(I).LT.MIN_FREQ.OR.HFREQ(I).GT.MAX_FREQ) THEN
              WRITE (STRING, 1205) I 
1205     FORMAT ('Low Cut Frequency is out of Range for Row: ', I5)
              CALL WIGALERT(1,HELP,STRING,' ')
              GOTO 100
           ENDIF

1230  CONTINUE


      GOTO 1320

1250  WRITE (STRING, 1251) I
1251  FORMAT('Low Pass frequency is not an integer in row: ', I3)
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100
 



C
C  CHECK THE HIGH PASS ROLLOFF
C

1320  DO 1331 I = 1, NFILT_BUTT

         IF (I.EQ.1) THEN
           CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_S2_A, IDUM, STRING)
         ELSEIF (I.EQ.2) THEN
           CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_S2_B, IDUM, STRING)
         ELSE
           CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_S2_C, IDUM, STRING)
         ENDIF

         IF (STRING.EQ.' ') GOTO 1350
         READ(STRING,*,ERR = 1350) HROFF(I)

         IF( HROFF(I).LT.MINROFF.OR.HROFF(I).GT.MAXROFF) THEN
            WRITE (STRING,1322) I, MINROFF, MAXROFF
1322        FORMAT( 'Invalid High Side Rolloff in Row: ', I3,
     X              ' Range = ',I3, ', ',I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
         ENDIF

1331  CONTINUE

      GOTO 1420

1350  WRITE (STRING,1351) I
1351  FORMAT( 'High Side Rolloff is not an integer in Row: ',I3)
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100

C
C  NOW CHECK END TIMES
C

1420  DO 1421 I = 1, NFILT_BUTT

           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_TIME_A, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_TIME_B, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_TIME_C, IDUM, STRING)
           ENDIF

           READ(STRING,*,ERR = 1430) ITIME_BUTT(I)

           IF ( ITIME_BUTT(I).GT.IETIME) ITIME_BUTT(I) = IETIME

           IF ( (I.GT.1.AND.ITIME_BUTT(I).LE.ITIME_BUTT(I - 1)).OR.
     X          ITIME_BUTT(I).LE.0) THEN
                 STRING = 'End Times must be > 0 and Increasing'
                 CALL WIGALERT(1,HELP,STRING,' ')
                 GOTO 100
           ENDIF

1421     CONTINUE

         GOTO 1520

1430     STRING = 'End Time is not an integer.'
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100



C
C  CHECK FILTER LENGTH (IN MSEC)
C

1520  CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_LENGTH, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 1550
      READ(STRING,*,ERR = 1550) LENGTH_BUTT
      IF (LENGTH_BUTT.LT.MIN_LENGTH.OR.LENGTH_BUTT.GT.MAX_LENGTH) THEN
            WRITE (STRING, 1548) MIN_LENGTH, MAX_LENGTH
1548  FORMAT ('Length is out of range. Valid range is ', I3,
     X         ' - ',I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 1620

1550  STRING = 'Length is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100

C
C  CHECK TAPER LENGTH (IN MSEC)
C

1620  CALL WIGQCCDI(CDLGID, SYN_BUTTWRTH_TAPER, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 1650
      READ (STRING,*,ERR = 1650) ITAPER_BUTT

      IF (ITAPER_BUTT.LT.MIN_TAPER.OR.ITAPER_BUTT.GT.MAX_TAPER) THEN
            WRITE (STRING, 1648) MIN_TAPER, MAX_TAPER
1648        FORMAT ('Taper Length is out of range. Range is: ', I3,
     x        ' To: ', I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 9999

1650  STRING = 'Taper Length is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100




   
9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END

      SUBROUTINE SYN_RICKER_DIALOG( ICANCEL)
C***********************************************************************
C
C    ROUTINE:   SYN_RICKER_DIALOG
C
C    FUNCTION:  RICKER FILTER PARAMETERS DIALOG BOX  ( NEW CGG DEFINITION)
C
C
C    IPREDF()   =  PREDOMINANT FREQUENCY (INVERSE OF PSEUDO PERIOD)
C    ITIME()    =  END TIMES (FOR TIME VARIANT)
C    ISAMP      =  SAMPLE RATE OF WAVELET
C    LENGTH     =  LENGTH OF WAVELET(SHOULD BE AT LEAST 2 * PSEUDO PERIOD)
C    ICANCEL    =  0 IF NOT CANCEL HIT, 1 IF CANCEL IS HIT
C
C***********************************************************************

      INCLUDE 'synth2.ri'
      INCLUDE 'esi_am.i'
      INCLUDE 'sf_defs.i'


      CHARACTER*254  STRING,HELP
      CHARACTER*32   STRING1, STRING2
      CHARACTER*15   RES_FILE
      INTEGER        CDLGID,CDITEM,CDVALUE

      COMMON/FILTPARAM/ IFTYPE, IDISP, IPHASE, ISAMP, IETIME

      COMMON/FILTRICK / IPREDF(3), ITIME_RICK(3), NFILT_RICK, 
     X                  ITAPER_RICK, LENGTH_RICK

      DATA HELP/'SYN_RICKER'/
C
C  DEFINE MAXIMUM ALLOWABLE PREDOMINANT FREQUENCY AND LENGTH
C

      MINFR = 8 / ISAMP
      MAXFR = 60
      MAX_LENGTH = 500
      MIN_TAPER = 1
      MAX_TAPER = 500

C
C  OPEN THE DIALOG BOX
C
      RES_FILE = 'SYNTH2'

      CALL AMG_DEFINE_RESOURCE(AM_DIALOG, RES_FILE, SYN_RICKER,
     X                         0, ID, 0)
      CALL WIGOPCD(ID)


      WRITE (STRING,'(I5)') IPREDF(1)
      CALL WIGSCDT(ID, SYN_RICKER_FREQ_1,STRING)
      WRITE (STRING,'(I5)') ITIME_RICK(1)
      CALL WIGSCDT(ID, SYN_RICKER_TIME_A, STRING)

      IF (NFILT_RICK.GT.1) THEN
         WRITE (STRING,'(I5)') IPREDF(2)
         CALL WIGSCDT(ID, SYN_RICKER_FREQ_2,STRING)
         WRITE (STRING,'(I5)') ITIME_RICK(2)
         CALL WIGSCDT(ID, SYN_RICKER_TIME_B, STRING)
      ENDIF

      IF (NFILT_RICK.GT.2) THEN
         WRITE(STRING,'(I5)') IPREDF(3)
         CALL WIGSCDT(ID, SYN_RICKER_FREQ_3, STRING)
         WRITE (STRING,'(I5)') ITIME_RICK(3)
         CALL WIGSCDT(ID, SYN_RICKER_TIME_C, STRING)
      ENDIF


      WRITE(STRING,'(I5)') ITAPER_RICK
      CALL WIGSCDT(ID, SYN_RICKER_TAPER, STRING)

      WRITE(STRING,'(I5)') LENGTH_RICK
      CALL WIGSCDT(ID, SYN_RICKER_LENGTH, STRING)

      ICANCEL=0
      MIN_LENGTH = -99


100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)

      IF (CDITEM.EQ.SYN_RICKER_OK) GOTO 999
      IF (CDITEM.EQ.SYN_RICKER_CANCEL) THEN
            ICANCEL=1
            GOTO 9999
      ENDIF
      GOTO 100




C
C   DECIDE HOW MANY FREQS ARE BEING USED, MAKE SURE ARE ENTERED IN 
C   CORRECT ORDER (CANNOT ENTER IN F1 IN ROW1, 0 IN ROW2, F2 IN ROW3)
C

999   NFILT_RICK = 1

      CALL WIGQCCDI(CDLGID, SYN_RICKER_FREQ_1, IDUM, STRING)
      CALL WIGQCCDI(CDLGID, SYN_RICKER_FREQ_2, IDUM, STRING1)
      CALL WIGQCCDI(CDLGID, SYN_RICKER_FREQ_3, IDUM, STRING2)

      IF (STRING.EQ.' '.OR.(STRING1.EQ.' '.AND.STRING2.NE.' ')) THEN
         STRING = 'Filters must be entered from first row and be'//
     x            ' consecutive'
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100
      ENDIF

      IF (STRING1.NE.' ')  NFILT_RICK = 2
      IF (STRING2.NE.' ')  NFILT_RICK = 3


C
C  NOW CHECK THE FREQUENCY VALUES
C

      DO 1001 I = 1, NFILT_RICK

           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_RICKER_FREQ_1, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_RICKER_FREQ_2, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_RICKER_FREQ_3, IDUM, STRING)
           ENDIF

           IF(STRING.EQ.' ') GOTO 1050
           READ (STRING,*,ERR = 1050) IPREDF(I)

           IF(IPREDF(I).LT.MINFR.OR.IPREDF(I).GT.MAXFR) THEN
              WRITE(STRING, 43) I, MINFR,MAXFR
43         FORMAT('Freq is out of range in row: ', I3,
     X            '. Valid range is', I3, ' -', I4)
              CALL WIGALERT(1,HELP,STRING,' ')
              GOTO 100
           ENDIF

           MIN1 = 3000 / IPREDF(I)
           IF (MIN1.GT.MIN_LENGTH) MIN_LENGTH = MIN1

1001     CONTINUE


      GOTO 1120

1050  WRITE (STRING, 1051) I
1051  FORMAT('Predominant frequency is not an integer in row: ', I3)
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100


C
C   NOW CHECK THE END TIMES FOR ALL FILTERS
C

1120  DO 1121 I = 1, NFILT_RICK

           IF (I.EQ.1) THEN
             CALL WIGQCCDI(CDLGID, SYN_RICKER_TIME_A, IDUM, STRING)
           ELSEIF (I.EQ.2) THEN
             CALL WIGQCCDI(CDLGID, SYN_RICKER_TIME_B, IDUM, STRING)
           ELSE
             CALL WIGQCCDI(CDLGID, SYN_RICKER_TIME_C, IDUM, STRING)
           ENDIF

           READ(STRING,*,ERR = 1130) ITIME_RICK(I)

           IF ( ITIME_RICK(I).GT.IETIME) ITIME_RICK(I) = IETIME

           IF ( (I.GT.1.AND.ITIME_RICK(I).LE.ITIME_RICK(I - 1)).OR.
     X          ITIME_RICK(I).LE.0) THEN
                 STRING = 'End Times must be > 0 and Increasing'
                 CALL WIGALERT(1,HELP,STRING,' ')
                 GOTO 100
           ENDIF

1121     CONTINUE

         GOTO 1320

1130     STRING = 'End Time is not an integer.'
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100




C
C  CHECK FILTER LENGTH (IN MSEC)
C

1320  CALL WIGQCCDI(CDLGID, SYN_RICKER_LENGTH, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 1350
      READ(STRING,*,ERR = 1350) LENGTH_RICK


      IF(LENGTH_RICK.LT.MIN_LENGTH) THEN
        STRING = 'Filter Length must be at least = 3000/pred. freq.'
        CALL WIGALERT(1,HELP,STRING,' ')
        GOTO 100
      ENDIF

      IF (LENGTH_RICK.GT.MAX_LENGTH) THEN
            WRITE (STRING, 1348) MAX_LENGTH
1348  FORMAT ('Length is out of range. Maximum Length is: ', I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 1420

1350  STRING = 'Length is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100



C
C  CHECK TAPER LENGTH (IN MSEC)
C

1420  CALL WIGQCCDI(CDLGID, SYN_RICKER_LENGTH, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 1450
      READ (STRING,*,ERR = 1450) ITAPER_RICK

      IF (ITAPER_RICK.LT.MIN_TAPER.OR.ITAPER_RICK.GT.MAX_TAPER) THEN
            WRITE (STRING, 1448) MIN_TAPER, MAX_TAPER
1448        FORMAT ('Taper Length is out of range. Range is: ', I3,
     x        ' To: ', I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 9999

1450  STRING = 'Taper Length is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100






9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END



