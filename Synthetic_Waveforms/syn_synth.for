C  DEC/CMS REPLACEMENT HISTORY, Element SYN_SYNTH.FOR
C  *4    13-OCT-1989 15:48:29 GORDON "(SPR 5017) Don't abort on negative velocity, handle divide-by-zero"
C  *3    19-SEP-1989 10:17:45 GORDON "(PURNA) GULF MODS UNDER SPR 100"
C  *2    11-AUG-1989 07:45:41 GORDON "(SPR 105) change name & def of BYTE_POINTER to INTEGER*4 (for GULF)"
C  *1    10-AUG-1989 18:52:52 VINCE "Fortran code after UNIX mods"
C  DEC/CMS REPLACEMENT HISTORY, Element SYN_SYNTH.FOR
      INTEGER*4 FUNCTION SYN_SYNTH(BYTE_POINTER)
C**********************************************************************
C
C    ROUTINE:    SYN_SYNTH
C
C    FUNCTION:   MAIN ENTRY POINT FOR SYNTHETICS PROGRAM FROM THE
C                APPLICATION MANAGER. NOTE THAT BYTE POINTER
C                IS NOT USED (DECLARE AS REAL * 8). THIS PROGRAM
C                INTEGRATES LOGS AND CHECKS CALCULATES SYNTHETIC
C                SEISMOGRAMS.
C
C    NOTES:
C
C     THIS PROGRAM IS HARD CODED WITH A DEPTH SAMPLING RATE OF 2 FEET.
C     THIS IS SUFFICIENT FOR SYNTHETIC SEISMIC SECTIONS SINCE IT TAKES
C     10 FEET (5 SAMPLES) TO REDUCE 10000 FT/SC DATA TO 1 SAMP. IN TIME.
C
C     CKTIME  - CKECK SHOT SURVEY TIME ARRAY
C     CKDEPT  - CHECK SHOT SURVEY DEPTH ARRAY
C     MULANS  - CHOICE TO RUN MULTIPLES
C     ANS     - MISCELLANEOUS YES/NO ANSWER VARIABLE
C     IDATUM  - CHOICE TO DATUM CORRECT
C
C**********************************************************************

      INTEGER*4 BYTE_POINTER

      INCLUDE 'esi_syn.i'
      INCLUDE 'esi_qs.i'
      INCLUDE 'esi_syn_io.i'
      INCLUDE 'esi_we_wells.i'
      INCLUDE 'esi_am.i'
      INCLUDE 'sf_defs.i'
C
C
      REAL UNIT_CONV
      REAL          CKTIME(500),CKDEPT(500),VEL2*8
      CHARACTER*254 STRING,HELP,LOCAT*60,CHAR13*1
      CHARACTER*128 STR1, STR2
      CHARACTER*108 SYNPRINT
      CHARACTER*80  PUT_COMMENT
      CHARACTER*14  DATE_TAG
      CHARACTER*4   IDATUM
C
C WELL LOG DATA BASE VARIABLES
C
      CHARACTER  WELNM*(SIZEOF_WNAME),OPER*(SIZEOF_OPER)
      CHARACTER  STAT*(SIZEOF_STATE), COUNT*(SIZEOF_COUNTY)
      CHARACTER  TWELL*(SIZEOF_UWI) 
      CHARACTER  TSHPD*2,RANGD*2,TVWELL*20,DEFAULT
      INTEGER    ITSH,IRANG
      INTEGER    EL_KB_FEET, EL_KB_USER, DATUM_FEET, DATUM_USER
C
C CURVES - ARRAY CONTAINS THE NAMES OF THE CURVES ONE HAS INTEGRATED
C
      CHARACTER*10 CURVES(7)
      PARAMETER (MAX_TRACES = 100)
      CHARACTER*64 TRACE_NAMES(MAX_TRACES)
      PARAMETER (MAX_RES = 10)
      CHARACTER*64 RES_NAMES(MAX_RES)
      CHARACTER*32 LTDM_SOURCE,LTDM_TRACE,LTDM_SERVICE
      INTEGER LTDM_VERSION
C
C  SET UP SOME MAXIMUM VALUES
C
      PARAMETER   (MAX_DEPTH_SAMPS = 12000)

C
C UOM
C
      CHARACTER*19 DEPTH_UOM,SONIC_UOM,DENSITY_UOM
     X  ,OTHER_UOM,TIME_UOM,MOD_UOM
C
C SQL STRING
C
      CHARACTER*256 SQL
C
C CONN  - ARRAY CONTAINING TRACE
C FA    - ARRAY CONTAINING FILTER COEFFICIENTS
C VA    - ARRAY CONTAINING REFLECTION COEFFICIENTS
C
      DIMENSION  CONN(2500), VA(5000)
      INTEGER    LCUTFR(3), LPASSFR(3), HPASSFR(3), HCUTFR(3)
      INTEGER    LROFF(3), LFREQ(3), HROFF(3), HFREQ(3)
      INTEGER    ITIME_ORMS(3), ITIME_BUTT(3), ITIME_RICK(3)

      COMMON/FILTPARAM/ IFTYPE, IDISP, IPHASE, ISAMP, IETIME

      COMMON/FILTORMS/  LCUTFR, LPASSFR, HPASSFR, HCUTFR,
     X                  ITIME_ORMS, NFILT_ORMS, IBTYPE,
     X                  ITAPER_ORMS, LENGTH_ORMS

      COMMON/FILTBUTT / LROFF, LFREQ, HFREQ, HROFF,
     X                  ITIME_BUTT, NFILT_BUTT, ITAPER_BUTT,
     X                  LENGTH_BUTT

      COMMON/FILTRICK / IPREDF(3), ITIME_RICK, NFILT_RICK,
     X                  ITAPER_RICK, LENGTH_RICK



      COMMON/TVFXTA/  VA, CONN

      DATA   VA/5000*0.0/, CONN/2500*0.0/
      DATA   HELP/'SYNTHETICS'/
      DATA   CURVES/7*' '/
      DATA   DEPTH_UOM/'FEET'/,SONIC_UOM/'USEC/FT'/,DENSITY_UOM
     X  /'G/CC'/,OTHER_UOM/' '/,TIME_UOM/'SECONDS'/,MOD_UOM/' '/
      DATA   TWELL /'L03W0373'/
      DATA   TVWELL/'NO WELL'/,DEFAULT/' '/


C
C RESCHO - NAMES OF UP TO THREE RESISTIVITY CURVES ONE CAN CHOOSE
C IRESPO - POSITION IN POINTER ARRAY OF 3 RES CURVES
C
C
C ICURCHO - ARRAY CONTAINING MISC CURVE CHOICES
C
C VEL   - VELOCITY ARRAY
C DEN   - DENSITY ARRAY
C DEPTH - CALCULATED TIME / DEPTH ARRAY FROM INTEGRATION
C AL1, AL2, AL3, AL4, AL5 - 5 OPTIONAL CURVES WHICH CAN BE INTEGRATED AND
C DISPLAYED IN TIME.
C
      COMMON /VELDEN/ VEL(MAX_DEPTH_SAMPS), DEN(MAX_DEPTH_SAMPS),
     X                DEPTH(2500)
      COMMON /LOGS12/ AL1(MAX_DEPTH_SAMPS), AL2(MAX_DEPTH_SAMPS)
      COMMON /LOGS34/ AL3(MAX_DEPTH_SAMPS), AL4(MAX_DEPTH_SAMPS)
      COMMON /LOGS5 / AL5(MAX_DEPTH_SAMPS)
C
C PORN AND PORD ARE USED TO CALCULATE DENSITY FROM POROSITY
C
      DIMENSION PORN(12000),PORD(12000)
      COMMON/VELPOR/PORN,PORD
C
C TEMP ALRT COM
C
      PARAMETER (FT_PER_M = 3.28028)
      PARAMETER (XM_PER_FT = 0.3048)
      DATA  DEPTH/2500*0.0/


C
C INITIALIZE ALL BUFFERS TO ZERO
C
100   CALL SYN_INIT_FILT_BUFFS

      DO 34569 JK = 1,2500
	 DEPTH(JK)=0.
	 CONN(JK)=0.
	 VA(JK)=0.
34569 VA(JK+2500)=0.

C
C IF ALL ELSE FAILS, THERE WILL BE A NULL VALUE.
C
      VNULL = -999.25
C
C KEEP THE BUGGERS OUTTA HERE IF THEY DO NOT HAVE A GRAPHICS TERMIAL
C
       CALL QSG_INQI(IQS_GRAPHIC_TERM,ITERM)
C RCH
       ITERM = 1
C
C ASSUME SUCCESS
C
       SYN_SYNTH=0
C
      IF (ITERM.EQ.0) THEN
	 STR1=
     X   'A graphics workstation is required to run this application.'
	 STR2='Please move to another workstation.  Thanks.'
	 CALL WIGALERT(1, HELP, STR1, STR2)
	 GOTO 9998
      ENDIF
C
C
C  DEFINE DEFAULT PARAMETERS IN SYNTHETICS COMMON BLOCK
C
      CALL AMG_DECLARE('SYNTHETICS')

      CALL SYNINIT
      CALL SYNGETRSRC( MENU_SYNTH1, MENU_INTC, MENU_GENERAL,
     X       MENU_ALTDEN, MENU_ACOUS, MENU_VELANOTHER, MENU_RUNIT,
     X       MENU_QUIT, MENU_SYNTH2, MENU2_COSINE, MENU2_RICKER,
     X       MENU2_RUNIT, MENU2_QUIT)


C
C  SET UP MESSAGE DIALOG
C

      CALL SYN_MAIN_DIALOG

      UNIT_CONV = 1.
      SAMPLE_RATE = 2.0
      ITERM=1
      NCKSHT=0
      TINC=.002
      IDSMP=2
      ILOG1=0
      ILOG2=0
      ILOG3=0
      ILOG4=0
      ILOG5=0
C
C  SET UP INITIAL DIALOG TO GET UOM'S, SAVE CURVE FLAGS, ETC.)
C

2301  CALL SYN_INIT_DIALOG( IFEET, ISAVE, TWELL, ICANCEL)

      IF (ICANCEL.EQ.1) THEN
	 SYN_SYNTH = 0
	 GOTO 9998
      ENDIF

C
C SEE IF WE CAN GET THE WELL HEADER
C

      WRITE(STR1, 2321) TWELL
2321  FORMAT('Retrieving well data for uwi = ', A21)
      CALL AMG_MESSAGE(AM_DIALOG, STR1)

      CALL SYN_GETWELL(TWELL,WELNM,OPER ,STAT,COUNT,
     X      EL_KB_FEET, ITSH ,TSHPD ,IRANG ,RANGD ,ISEC,ICANCEL)

      IF(ICANCEL.NE.0)THEN
	 STRING = 'Unable to retrieve well data. Select a new well.'
	 CALL WIGALERT(1,HELP,STRING,' ')
	 GOTO 2301
      ENDIF

C
C TELL THEM ABOUT THE WELL
C
      STRING = 'Current UWI: '//TWELL
      CALL SYN_STATUS_MESSAGE( STRING)

      CALL GETLOC(LOCAT,COUNT,STAT,ITSH,TSHPD,IRANG,RANGD,ISEC)
      CHAR13=CHAR(13)
      STRING  = 'Processing Log Data For:'//CHAR13//TWELL//CHAR13
     X         // WELNM(1:ISTRLEN(WELNM))//CHAR13//LOCAT
      CALL AMG_MESSAGE(AM_DIALOG, STRING)

C
C IF K.B. NOT AVAILABLE, ENTER DIALOG BOX FOR GET ESTIMATED ONE
C
C
C IF E.K.B. NOT AVAILABLE, GIVE USER AN OPTION TO ENTER AN ESTIMATED
C E.K.B.  WITHOUT E.K.B. DATUM CORE DONE.
C
      IOPEN=0
      ICANCEL=0
      IF(EL_KB_FEET .EQ. -999) THEN
	CALL SYNKELLY_DIALOG_GL(KELLY_RERUN,ICANCEL,COMMON_POINTER)
	KELLY_RERUN=1
	IF(ICANCEL.EQ.1)GOTO 9999
	IF(KELLY_ESTIMATED.EQ.1)  EL_KB_FEET=KELLY_ELEVATION
      ENDIF
      IVELF=0
      IF(EL_KB_FEET .NE. -999)THEN
	    CALL SYN_GET_CHECKSHOTS_GF(TWELL,IGOT,ICTIME,
     X     ICKDAT,NCKSHT,CKTIME,CKDEPT,VE,UNIT_CONV)
	   IF(IGOT.EQ.0)IVELF=1
C
C       NOW WE KNOW WHAT THE UNITS ARE   CONVERT EVERYTHING COHERENTLY
C
	EL_KB_USER = EL_KB_FEET
	EL_KB_FEET = EL_KB_FEET * UNIT_CONV
	IF (IFEET.EQ.1) THEN
	    EL_KB_USER = EL_KB_USER * UNIT_CONV
	ELSE
	    EL_KB_USER = EL_KB_USER * ( XM_PER_FT * UNIT_CONV )
	ENDIF
      ENDIF
C
C GET SONIC LOG
C
      IVEL = 1
C
C ICUR COUNTS CURVES AVAILABLE TO BE DISPLAYED
C
      ICUR= 1
      CURVES(ICUR) = 'VELOCITY'
      NCHOSE = 0
      SQL = 'TRACE_TYPE LIKE ''DT%'''
     X     // ' AND DEPTH_TYPE = ''D'' ORDER BY TRACE_TYPE,'
     X     // 'VERSION DESC'
      IFONE = 0
      CALL LGG_LTDM_SEL_WELL(TWELL,SQL,1,
     X        'Select a sonic to use in generating synthetic.',IFONE,
     X        TRACE_NAMES,NCHOSE,ICANCEL)
      IF(ICANCEL.EQ.1)GOTO 9999
      IGOT=1
      IF(NCHOSE.EQ.1)THEN
	  CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,TRACE_NAMES(1),'D',
     X                      0.0,0.0,SAMPLE_RATE,DEPTH_UOM,SONIC_UOM,
     X                      START,NPTS,VNULL,VEL,IGOT)
	  IF(IGOT.EQ.0)THEN
	      ISTV=START+.002
	      IENV=ISTV+ (NPTS-1) * 2.0 + .002
	  ENDIF
      ENDIF
C
C FAUST = 1 MEANS FAUST ON
C
      FAUST=0
C
C IF VELOCITY GET RETURN CODE IS GOOD, SKIP FAUST SECTION
C
      IF(IGOT.EQ.0) GOTO 7025
C
C IF NO RES, FAUST IMPOSSIBLE
C
C
C SEE IF ANY DEEP CURVES AVAILABLE TO DO FAUST. SAVE POSITION AND NAME
C OF CURVE FOR USER TO CHOOSE IF MORE THAN ONE. SHOULD ONLY BE ONE.
C
C
      SQL = '(TRACE_TYPE LIKE ''ILD%'''
     X    // ' OR TRACE_TYPE LIKE ''LLD%'') AND DEPTH_TYPE = ''D'''
     X    // ' ORDER BY TRACE_TYPE, VERSION DESC'

      CALL LGG_LTDM_INQ_WELL_TRACE(TWELL, SQL, MAX_RES, RES_NAMES,
     X                               NRES, ISTAT)
      IF(NRES.EQ.0) GOTO 6700

C
C NO SONIC AVAILABLE, GIVE USER A CHOICE TO RUN FAUST
C

      CALL SYNFAUST_DIALOG_GL(FAUST_RERUN,ICANCEL,COMMON_POINTER)
      IF(ICANCEL.EQ.1)GOTO 9999
      FAUST_RERUN=1
C
C GET CHOICE OF RES CURVE TO USE FOR FAUST DIALOG BOX
C
C DISPLAY WHAT IS AVAILABLE AND GET CHOICE
C
      IF(FAUST.EQ.0)GOTO 6700
      IFONE = 0
      CALL LGG_LTDM_SEL_WELL(TWELL,SQL,1,
     X 'Select a resitivity curve to use in Faust conversion.',IFONE,
     X  RES_NAMES,NRES,ICANCEL)
      IF(ICANCEL.EQ.1)GOTO 9999
C
C GET RESISTIVITY CURVE PICKED
C
      CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,RES_NAMES(1),'D',
     X     0.0,0.0,SAMPLE_RATE,DEPTH_UOM,OTHER_UOM,
     X     START,NPTS,VNULL,VEL,IGOT)
      ISTV=START+.002
      IENV=ISTV+ (NPTS-1) * 2.0 + .002
C
C ADJUST SO SUBSCRIPTS = DEPTH / 2.0
C
C
      CALL FIXCUR(VEL,ISTV,IENV,VNULL)
C
C
C
C
C CALCULATE VELOCITY FROM RESISTIVITY
C
      DO 7050 JK = ISTV/2,IENV/2
	  IF(VEL(JK).EQ.0.00.AND.JK.GT.1)VEL(JK)=VEL(JK-1)
	  VEL(JK)= (FAUST_CONSTANT*(JK*2.0*VEL(JK))**.16666666)
7050  CONTINUE
      GOTO 7025
C
C
C NO VEL DATA, GET A STRAIGHT LINE VEL DIALOG BOX
C
C NO SONIC OR RESISTIVITY AVAILABLE
C

6700  CALL SYNSTRAIGHT_DIALOG_GL(STRAIGHT_RERUN,ICANCEL,COMMON_POINTER)
      STRAIGHT_RERUN=1
      IF(ICANCEL.EQ.1)GOTO 9999
      IF(STRAIGHT_USE.EQ.0)THEN
	  ICANCEL=1
	  GOTO 9999
      ENDIF
      VEL(1)=STRAIGHT_VEL
      ISTV=2
      IENV=2
      IVEL=0
C
C IENV IS ENDING DEPTH OF VELOCITY
C MAXDPT = MAX DEPTH OF ALL CURVES SO FAR
C
7025  MAXDPT=IENV
C
C IF NOT A FAUST ADJUST TO SUBSCRIPT = DEPTH /2 (ALREADY DONE IF FAUST)
C AND MISCRO SECONDS TO VELOCITY.
C ALSO DO NOT THIS IF A STRAIGHT LINE FUNCTION.
C
      IF(FAUST.EQ.0.AND.IVEL.EQ.1) THEN
      CALL FIXCUR(VEL,ISTV,IENV,VNULL)
	   DO 7030 JK = 1 , IENV/2
C
C       CHECK THE VELOCITY FOR ABNORMAL NEGATIVE VALUES
C
	   IF ( VEL(JK) .LT. 0. ) THEN
	      STRING='A negative velocity value was found,
     X                Substituting 0 for negative value.'
	      CALL WIGALERT(0,HELP,STRING,' ')
	      VEL(JK) = 0.
	   ENDIF
7030	   IF ( VEL(JK) .GT. 0. ) VEL(JK) = 1 000 000. / VEL(JK)
      ENDIF



C
C AVERAGE FIRST 50 FEET FOR VELOCITY CONSTANT DETERMINATION
C
      VELOC=VEL(1)
      IF(IVEL.EQ.1)THEN
      VEL2=0.0
	   DO 7031 JK = ISTV/2,ISTV/2+24
7031       VEL2=VEL2+VEL(JK)
      VEL2=VEL2/25.
C      IF ( IFFET .EQ. 0 )  VEL2 = VEL2 * XM_PER_FT
      ENDIF
C
C
C DIALOG BOX ***************************************************
C DENSITY CURVE SELECTION DIALOG BOX HERE
C
C GET DENSITY CURVE, IF AVAILABLE
C
      IDEN=0
      NCHOSE = 0
      SQL = 'TRACE_TYPE LIKE ''RHOB%'''
     X // ' AND DEPTH_TYPE = ''D'' ORDER BY TRACE_TYPE, VERSION DESC'
      IFONE = 0
      CALL LGG_LTDM_SEL_WELL(TWELL,SQL,1,
     X 'Select a density curve to use in generating synthetic.',IFONE,
     X TRACE_NAMES,NCHOSE,ICANCEL)
      IF(ICANCEL.EQ.1)GOTO 9999
      IGOT=1
      IF(NCHOSE.EQ.1)THEN
	  CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,TRACE_NAMES(1),'D',
     X    0.0,0.0,SAMPLE_RATE,DEPTH_UOM,DENSITY_UOM,
     X    START,NPTS,DENULL,DEN,IGOT)
	  ISTDEN=START+.002
	  IENDEN=ISTDEN+ (NPTS-1) * 2.0 + .002
      ENDIF
      IF(IGOT.EQ.0)THEN
C
C WE HAVE DENSITY, SO BUMP CURVE COUNT AND SET FLAGS, ADJUST SUBSCRIPTS
C TO DEPTH/2 AND COMPARE MAX DEPTH OF ALL CURVES
C
	  ICUR=ICUR+1
	  IDEN=1
	  CURVES(ICUR)='DENSITY'
	  CALL FIXCUR(DEN,ISTDEN,IENDEN,DENULL)
	  IF(IENDEN.GT.MAXDPT)MAXDPT=IENDEN
      ENDIF
C
C
C
C CHECK FOR NEU POR AND DEN POR FOR - APPROXIMATE  DENSITY ALGORITHM #2
C
C
C SEE IF AVAILABLE
C
      I12=0
      I13=0
      SQL = 'TRACE_TYPE LIKE ''DPHI%'''
     X // ' AND DEPTH_TYPE = ''D'' ORDER BY TRACE_TYPE, VERSION DESC'
      CALL LGG_LTDM_INQ_WELL_TRACE(TWELL,SQL,1,TRACE_NAMES,
     X     I13,ICANCEL)
      SQL = 'TRACE_TYPE LIKE ''NPHI%'''
     X // ' AND DEPTH_TYPE = ''D'' ORDER BY TRACE_TYPE, VERSION DESC'
      CALL LGG_LTDM_INQ_WELL_TRACE(TWELL,SQL,1,TRACE_NAMES,
     X     I12,ICANCEL)
      IAVAIL=0
      IF(I12.NE.0.AND.I13.NE.0)IAVAIL=1



C
C  GET MAIN MENU SELECTION AND BRANCH
C

1000  CALL AMG_MESSAGE( AM_DIALOG, ' ')
      CALL SYN_MAIN_MENU( IVEL, IDEN, IVELF, EL_KB_FEET,
     X                    MENU_PICK, ICANCEL)

      NVCUR=ICUR

      IF(MENU_PICK.EQ.MENU_INTC) THEN
	  GOTO 1100
      ELSEIF(MENU_PICK.EQ.MENU_GENERAL) THEN
	  GOTO 1200
      ELSEIF(MENU_PICK.EQ.MENU_ALTDEN) THEN
	  GOTO 1300
      ELSEIF(MENU_PICK.EQ.MENU_ACOUS) THEN
	  GOTO 1400
      ELSEIF(MENU_PICK.EQ.MENU_VELANOTHER) THEN
	  GOTO 1500
      ELSEIF(MENU_PICK.EQ.MENU_RUNIT) THEN
	  GOTO 2000
      ELSE
	  ICANCEL=1
	  GOTO 9999
      ENDIF


C
C MAKE ONE TO CHOOSE CURVES TO INTEGRATE,  SEE SUBROUTINE GETCTOI
C
C CHECK FOR AND UP TO FIVE CURVES TO INTEGRATE
C
1100  SQL =
     X  'DEPTH_TYPE = ''D'' ORDER BY TRACE_TYPE, VERSION DESC'
      IFONE = 1
      CALL LGG_LTDM_SEL_WELL(TWELL,SQL,5,
     X 'Select up to 5 curves to convert to time.',IFONE,
     X TRACE_NAMES,ICTOI,ICANCEL)
      IF(ICANCEL.EQ.1) GOTO 1000
      IF(ICTOI.EQ.0) GOTO 1000
      ICUR=NVCUR

      STRING = 'Retrieving log curves to convert to time.'
      CALL AMG_MESSAGE(AM_DIALOG, STRING)

      CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,TRACE_NAMES(1),'D',
     X              0.0,0.0,SAMPLE_RATE,DEPTH_UOM,OTHER_UOM,
     X              START,NPTS,ANULL1,AL1,IGOT)
      IF(IGOT.EQ.0)THEN
	  IST=START+.002
	  IENL1=IST + (NPTS-1) * 2.0 +.002
	  ICUR=ICUR+1
	  LTDM_TRACE = TRACE_NAMES(1)
	  CALL LGG_LTDM_PARSER(TRACE_NAMES(1),LTDM_SOURCE,LTDM_TRACE,
     X                       LTDM_SERVICE,LTDM_VERSION,KSTAT)
	  CURVES(ICUR)= LTDM_TRACE
	  ILOG1=1
	  CALL FIXCUR(AL1,IST,IENL1,ANULL1)
	  IF(IENL1.GT.MAXDPT)MAXDPT=IENL1
      ENDIF
C
C CHECK FOR AND GET SECOND CURVE TO INTEGRATE
C
      IF(ICTOI.EQ.1) GOTO 1000
      CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,TRACE_NAMES(2),'D',
     X 0.0,0.0,SAMPLE_RATE,DEPTH_UOM,OTHER_UOM,
     X START,NPTS,ANULL2,AL2,IGOT)
C
      IF(IGOT.EQ.0)THEN
	  IST=START+.002
	  IENL2=IST + (NPTS-1) * 2.0 +.002
	  ICUR=ICUR+1
	  LTDM_TRACE = TRACE_NAMES(2)
	  CALL LGG_LTDM_PARSER(TRACE_NAMES(2),LTDM_SOURCE,LTDM_TRACE,
     X                       LTDM_SERVICE,LTDM_VERSION,KSTAT)
	  CURVES(ICUR)= LTDM_TRACE
	  ILOG2=1
	  CALL FIXCUR(AL2,IST,IENL2,ANULL2)
	  IF(IENL2.GT.MAXDPT)MAXDPT=IENL2
      ENDIF
C
C CHECK FOR AND GET THIRD CURVE TO INTEGRATE
C
      IF(ICTOI.EQ.2) GOTO 1000
      CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,TRACE_NAMES(3),'D',
     X 0.0,0.0,SAMPLE_RATE,DEPTH_UOM,OTHER_UOM,START,NPTS,
     X ANULL3,AL3,IGOT)
      IF(IGOT.EQ.0)THEN
	  IST=START+.002
	  IENL3=IST + (NPTS-1) * 2.0 +.002
	  ICUR=ICUR+1
	  LTDM_TRACE = TRACE_NAMES(3)
	  CALL LGG_LTDM_PARSER(TRACE_NAMES(3),LTDM_SOURCE,LTDM_TRACE,
     X                       LTDM_SERVICE,LTDM_VERSION,KSTAT)
	  CURVES(ICUR)= LTDM_TRACE
	  ILOG3=1
	  CALL FIXCUR(AL3,IST,IENL3,ANULL3)
	  IF(IENL3.GT.MAXDPT)MAXDPT=IENL3
      ENDIF
C
C CHECK FOR AND GET FOURTH CURVE TO INTEGRATE
C
      IF(ICTOI.EQ.3) GOTO 1000
      CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,TRACE_NAMES(4),'D',
     X 0.0,0.0,SAMPLE_RATE,DEPTH_UOM,OTHER_UOM,START,NPTS,
     X ANULL4,AL4,IGOT)
      IF(IGOT.EQ.0)THEN
	  IST=START+.002
	  IENL4=IST + (NPTS-1) * 2.0 +.002
	  ICUR=ICUR+1
	  LTDM_TRACE=TRACE_NAMES(4)
	  CALL LGG_LTDM_PARSER(TRACE_NAMES(4),LTDM_SOURCE,LTDM_TRACE,
     X                       LTDM_SERVICE,LTDM_VERSION,KSTAT)
	  CURVES(ICUR)= LTDM_TRACE
	  ILOG4=1
	  CALL FIXCUR(AL4,IST,IENL4,ANULL4)
	  IF(IENL4.GT.MAXDPT)MAXDPT=IENL4
      ENDIF
C
C CHECK FOR AND GET FIFTH CURVE TO INTEGRATE
C
      IF(ICTOI.EQ.4) GOTO 1000
      CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,TRACE_NAMES(5),'D',
     X 0.0,0.0,SAMPLE_RATE,DEPTH_UOM,OTHER_UOM,START,NPTS,
     X ANULL5,AL5,IGOT)
      IF(IGOT.EQ.0)THEN
	  IST=START+.002
	  IENL5=IST + (NPTS-1) * 2.0 +.002
	  ICUR=ICUR+1
	  LTDM_TRACE = TRACE_NAMES(5)
	  CALL LGG_LTDM_PARSER(TRACE_NAMES(5),LTDM_SOURCE,LTDM_TRACE,
     X                       LTDM_SERVICE,LTDM_VERSION,KSTAT)
	  CURVES(ICUR)= LTDM_TRACE
	  ILOG5=1
	  CALL FIXCUR(AL5,IST,IENL5,ANULL5)
	  IF(IENL5.GT.MAXDPT)MAXDPT=IENL5
      ENDIF
      GOTO 1000
C
C GENERAL TIME
C
C
1200  CALL SYNGENERAL_DIALOG_GL(GENERAL_RERUN,ICANCEL,VEL2,MAXDPT,
     X                          IFEET,COMMON_POINTER)
      GENERAL_RERUN=1
      GOTO 1000

C
C ALTERNATE DENSITY SOURCE
C
1300   CALL SYNALTDEN_DIALOG_GL(ALTDEN_RERUN,ICANCEL,IAVAIL,
     X                          COMMON_POINTER)
      ALTDEN_RERUN=1
      GOTO 1000

C
C CHECK FOR USER WISHING TO RUN ACOUSTIC IMPEDENCE LOGS
C
1400  CALL SYNACOUS_DIALOG_GL(ACOUS_RERUN,ICANCEL,COMMON_POINTER)
      ACOUS_RERUN=1
      IF ( (ACOUS_MIN_FREQ .LT. 8) .OR.
     X          (ACOUS_MIN_FREQ .GT. ACOUS_MAX_FREQ)
     X     .OR. (ACOUS_MAX_FREQ .GT. 60) ) THEN
	STRING= ' Min and/or max frequency definition problem...
     X     VALID RANGE IS 8 TO 60 HZ      '
	CALL WIGALERT(1,HELP,STRING,' ')
	GOTO 1400
      ENDIF
      GOTO 1000

C
C USE VEL FROM ANOTHER WELL, IE CHECKSHOT
C
1500  VELANOTHER_USE=0
      NCKSHT = 0
      STRING = 'Enter UWI of other well for velocity survey.'
      TVWELL=' '
      CALL WIGRQST(STRING,DEFAULT,HELP,16,TVWELL, ISTATUS)
      IF(ISTATUS.EQ.1)THEN
	   VELANOTHER_USE=0
	   GOTO 1000
      ENDIF
C
C GET CHECK SHOT DATA
C
      CALL SYN_GET_CHECKSHOTS_GF(TVWELL,IGOT,ICTIME,
     X     ICKDAT,NCKSHT,CKTIME,CKDEPT,VE,UNIT_CONV)
C
C EVERYTHING OK?
C
      IF(IGOT.NE.0)THEN
	   STRING = 'No checkshot survey found for UWI - '//
     X           TVWELL
	   CALL WIGALERT(1,HELP,STRING,' ')
	   VELANOTHER_USE = 0
	   GOTO 1000
      ENDIF
      VELANOTHER_USE = 1
      GOTO 1000



C
C  BEGINNING OF INTEGRATION PROCESS
C
2000  IF(IVEL.EQ.1)THEN
	  VELOC=GENERAL_VELOC
C
C CALCULATE SURFACE TO START OF LOG VELOCITY FUNCTION
C
	  VINC=(VEL2-VELOC)/(ISTV/2.0)
	  DO 7032 JK = 1 , (ISTV/2-1)
7032      VEL(JK)=VELOC+JK*VINC
      ENDIF
C
C ALTERNATE DENSITY SOURCES?
C
C
C CHECK DENSITY FROM VELOCITY ALGORITHM CHOICE
C
      IF(ALTDEN_CALC_DEN_VEL.EQ.1)THEN
C
C CALCULATE DENSITY AND SET FLAGS AND CURVE COUNT AND SAVED DEPTHS
C
	  IDEN=1
	  IENDEN=IENV
	  ICUR = ICUR + 1
	  CURVES(ICUR) = 'DENSITY'
	  DO 7090 JK = 1 , IENV/2
7090      DEN(JK)= VEL(JK) ** 0.25 * .23
      ENDIF
C
C CHECK DENSITY FROM FDC-CNL
C
      IF(ALTDEN_CALC_DEN_FDCCNL.EQ.1)THEN
C
C GET NEUTRON POROSITY AND ADJUST SUBSCRIPTS
C
      IFONE = 0
      SQL = 'TRACE_TYPE LIKE ''NPHI%'''
     X // ' AND DEPTH_TYPE = ''D'' ORDER BY TRACE_TYPE, VERSION DESC'
      CALL LGG_LTDM_SEL_WELL(TWELL,SQL,1,
     X 'Select NPHI to use to generate RHOB.',IFONE,
     X TRACE_NAMES,ICTOI,ICANCEL)
      IF(ICANCEL.EQ.1)GOTO 9999
C
C READ NPHI CURVE
C
      CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,TRACE_NAMES(1),'D',
     X 0.0,0.0,SAMPLE_RATE,DEPTH_UOM,OTHER_UOM,START,NPTS,
     X PORNUL,PORN,IGOT)
      IST=START+.002
      IEN1=IST + (NPTS-1) * 2.0 +.002
      CALL FIXCUR(PORN,IST,IEN1,PORNUL)
C
C GET DENSITY POROSITY AND ADJUST SUBSCRIPTS
C
      IFONE = 0
      SQL = 'TRACE_TYPE LIKE ''DPHI%'''
     X // ' AND DEPTH_TYPE = ''D'' ORDER BY TRACE_TYPE, VERSION DESC'
      CALL LGG_LTDM_SEL_WELL(TWELL,SQL,1,
     X 'Select DPHI to use to generate RHOB.',IFONE,
     X TRACE_NAMES,ICTOI,ICANCEL)
      IF(ICANCEL.EQ.1)GOTO 9999
C
C READ DPHI CURVE
C
      CALL LGG_LTDM_GET_TRACE_RESAMP(TWELL,TRACE_NAMES(1),'D',
     X 0.0,0.0,SAMPLE_RATE,DEPTH_UOM,OTHER_UOM,START,NPTS,
     X PORDNL,PORD,IGOT)
      IST=START+.002
      IEN2=IST + (NPTS-1) * 2.0 +.002
      CALL FIXCUR(PORD,IST,IEN2,PORDNL)
C
C CALCULATE MINIMUM OF TWO MAX DEPTHS AND SET MAX DEPTH OF DENSITY TO THAT
C
	IENDEN = MIN0(IEN1,IEN2)
	IF(IENDEN.GT.MAXDPT)MAXDPT=IENDEN
C
C GET REQUIRED INPUT PARAMETERS
C
	IDEN=1
	ICUR=ICUR+1
	CURVES(ICUR)='DENSITY'
C
C BACK OUT DENSITY FROM CALCULATED POROSITY
	DMA=ALTDEN_MATRIX
	DF=ALTDEN_FLUID
	DENULL=PORDNL
C
	DO 20 JK = 1,IENDEN/2
20      DEN(JK)=(SQRT((PORN(JK)**2+PORD(JK)**2)/2.0 )*(DMA-DF))*(-1.0)
     X +DMA
      ENDIF


C
C DATUM TIME!
C
      STRING='Performing Integration Stage.'
      CALL AMG_MESSAGE(AM_DIALOG, STRING)
      IDATUM='N'
      IF(EL_KB_FEET.NE.-999)THEN
	DATUM_FEET = EL_KB_FEET
	DATUM_USER = EL_KB_USER
	IDATUM='Y'
      ENDIF
C
C VELOCITY SURVEY TIME!
C
      IF(VELANOTHER_USE.EQ.1.OR.IVELF.EQ.1)THEN
	IF(EL_KB_FEET.NE.ICKDAT)THEN
	    DATUM_FEET=ICKDAT
	    DATUM_USER = DATUM_FEET
	    IF ( IFEET.EQ.0) THEN
		DATUM_USER = DATUM_USER * XM_PER_FT
		IF ( UNIT_CONV  .NE. 1.)  DATUM_USER= DATUM_USER+1
	    ENDIF
	   WRITE(STRING,431)DATUM_USER
431   FORMAT('Seismic DATUM set to survey elevation of ',I5)
	    CALL WIGALERT(0,HELP,STRING,' ')
	    IDATUM='Y'
	ENDIF
C
C       ADD ORIGIN FOR CHECKSHOTS SURVEY
C       AND CHECK FOR INCREASING TIME WITH DEPTH
C
	NCKSHT=NCKSHT+1
	DO 432 JK = NCKSHT,2,-1
	    CKDEPT(JK)=CKDEPT(JK-1)
432         CKTIME(JK)=CKTIME(JK-1)/ICTIME
	CKDEPT(1)=0.
	CKTIME(1)=0.
	DO 433 JK = 2,NCKSHT
	IF ( CKDEPT(JK) .LE. CKDEPT(JK-1) ) THEN
		STRING='Checkshot depths not stricly increasing ....
     X        ,        Please, check your checkshot data
     X        ,        in WELL_CHECKSHT_SRVY ORACLE table.....
     X        ,   Proceeding without using these checkshot data...'
	      CALL WIGALERT(0,HELP,STRING,' ')
	    IVELF = 0
	    NCKSHT = 0
	ENDIF
	IF ( CKTIME(JK) .LE. CKTIME(JK-1) ) THEN
		STRING='Checkshot times not increasing with depths.........
     X        ,        Please, check your checkshot data
     X        ,        in WELL_CHECKSHT_SRVY ORACLE TABLE.....
     X        ,   Proceeding without using these checkshot data...'
	      CALL WIGALERT(0,HELP,STRING,' ')
	    IVELF = 0
	    NCKSHT = 0
	ENDIF
433     CONTINUE
      ENDIF
C
C MAKE ALL CURVES END AT MAX DEPTH OF ALL CURVES, FILL ENDS WITH LAST
C VALUE
C
      NSAMP=MAXDPT/2
      DO 2505 I = IENV/2+1,NSAMP
2505  VEL(I)=VEL(IENV/2)
      IF(IDEN.EQ.1)THEN
      DO 251 I = IENDEN/2+1,NSAMP
251   DEN(I)=DEN(IENDEN/2)
      ENDIF
      IF(ILOG1.EQ.1)THEN
      DO 252 I = IENL1/2+1,NSAMP
252   AL1(I)=AL1(IENL1/2)
      ENDIF
      IF(ILOG2.EQ.1)THEN
      DO 253 I = IENL2/2+1,NSAMP
253   AL2(I)=AL2(IENL2/2)
      ENDIF
      IF(ILOG3.EQ.1)THEN
      DO 254 I = IENL3/2+1,NSAMP
254   AL3(I)=AL3(IENL3/2)
      ENDIF
      IF(ILOG4.EQ.1)THEN
      DO 255 I = IENL4/2+1,NSAMP
255   AL4(I)=AL4(IENL4/2)
      ENDIF
      IF(ILOG5.EQ.1)THEN
      DO 256 I = IENL5/2+1,NSAMP
256   AL5(I)=AL5(IENL5/2)
      ENDIF
C
C IMSHIF IS NUMBER OF MILS IN DATUM SHIFT
C
      IMSHIF=0
C
C CORRECT LOGS FOR DATUM SHIFT
C
      IF(IDATUM.EQ.'N')GOTO 316
      NSMAE =(EL_KB_FEET - DATUM_FEET)/2
C
C IF MULTIPLES, CALCULATE TIME SHIFT OF DATUM SHIFT AND REFL COEF SERIES
C FOR STRIPPED OFF DATA TO BE USED IN MULTIPLE CALCULATIONS
C
C      IF(GENERAL_MULTI.EQ.1)CALL SYNMTSHIF(NSMAE,IMSHIF,NCKSHT,CKDEPT,
C     X CKTIME,IDEN,IDSMP)
C
      NSMAE = -NSMAE
C
C SHIFT TO DATUM
C
      CALL ARRAY_SHIFT ( VEL, NSMAE, NSAMP, MAX_DEPTH_SAMPS, VEL(1),
     X                    JJ, JJJ)
      CALL ARRAY_SHIFT ( DEN, NSMAE, NSAMP, MAX_DEPTH_SAMPS, DEN(1),
     X                    JJ, JJJ)
      IF ( ILOG1 .EQ. 0 ) GOTO 315
      CALL ARRAY_SHIFT ( AL1, NSMAE, NSAMP, MAX_DEPTH_SAMPS, AL1(1),
     X                    JJ, JJJ)
      IF ( ILOG2 .EQ. 0 ) GOTO 315
      CALL ARRAY_SHIFT ( AL2, NSMAE, NSAMP, MAX_DEPTH_SAMPS, AL2(1),
     X                    JJ, JJJ)
      IF ( ILOG3 .EQ. 0 ) GOTO 315
      CALL ARRAY_SHIFT ( AL3, NSMAE, NSAMP, MAX_DEPTH_SAMPS, AL3(1),
     X                    JJ, JJJ)
      IF ( ILOG4 .EQ. 0 ) GOTO 315
      CALL ARRAY_SHIFT ( AL4, NSMAE, NSAMP, MAX_DEPTH_SAMPS, AL4(1),
     X                    JJ, JJJ)
      IF ( ILOG5 .EQ. 0 ) GOTO 315
      CALL ARRAY_SHIFT ( AL5, NSMAE, NSAMP, MAX_DEPTH_SAMPS, AL5(1),
     X                    JJ, JJJ)
315   CONTINUE
      NSAMP = JJ
C
C
C INTEGRATE FROM DEPTH TO TIME
C
316   CALL SYNINTEG(NSAMP,NCKSHT,CKDEPT,CKTIME,IDEN,ILOG1,ILOG2,ILOG3,
     X  ILOG4,ILOG5,IDSMP,J,50)
      NSAMP=J
C
C       IF DATUM CORRECT DEPTH VALUE TO BE LOG_DEPTH
C
      IF (EL_KB_FEET .NE. -999  .AND.
     X          EL_KB_FEET .NE. DATUM_FEET) THEN
	ICORRECTION = EL_KB_FEET - DATUM_FEET
	DO 1515 I= 1, NSAMP
1515    DEPTH(I) = DEPTH(I) + ICORRECTION
      ENDIF
C
C OUTPUT CURVES TO DISK PLOT FILE, WRITE OUT AN EXTRA FIFTY SAMPLES TO IMPROVE
C PLOT APPEARANCE
C
      J=MIN0(50+NSAMP,2500)
C
C WRITE TO DISK SYNTHETIC FILE INITIAL DATA
C
      NCRVES=1+IDEN+ILOG1+ILOG2+ILOG3+ILOG4+ILOG5
C
C CALL ROUTINE TO GET UNUSED FILE UNIT
C
      CALL SYNOPFIL(I13,TWELL)
      WRITE(I13)TWELL,WELNM,OPER,STAT,COUNT,ITSH,TSHPD
     X ,IRANG,RANGD,ISEC
      WRITE(I13)NCRVES
      WRITE(I13)TINC
      WRITE(I13)ACOUS
      IF(IVEL.EQ.0)GENERAL_NFILT=0
      WRITE(I13)GENERAL_NFILT
      WRITE(I13)EL_KB_USER, DATUM_USER
      WRITE(I13)GENERAL_MULTI
      WRITE(I13)GENERAL_MULTI_COEF
      IF(GENERAL_AGC.EQ.0)GENERAL_AGC_LENGTH=0
      WRITE(I13)GENERAL_AGC_LENGTH
      IF(IDEN.EQ.1.AND.CURVES(2).NE.'DENSITY')THEN
	 DO 3421 IDEN_MOVE=NCRVES,3,-1
3421     CURVES(IDEN_MOVE)=CURVES(IDEN_MOVE-1)
	 CURVES(2)='DENSITY'
      ENDIF
      WRITE(I13) J,CURVES
C
C BUILD PUT COMMENT
C
      CALL HOG_DATE_TAG(DATE_TAG)
      PUT_COMMENT=DATE_TAG
C
C DEPTH AND VELOCITY ARE ALWAYS WRITTEN OUT
C
      IF(IFEET.EQ.0)THEN
	  DO 9089 JFEET = 1,J
9089      DEPTH(JFEET) = DEPTH(JFEET) / FT_PER_M
	  MOD_UOM = 'METERS'
      ELSE
	  MOD_UOM = 'FEET'
      ENDIF
C
      WRITE(I13)(DEPTH(I),I=1,J)
      IF(ISAVE.EQ.1)
     X CALL LGG_LTDM_ADD_TRACE(TWELL,'DEPTH',TINC,TINC,J,
     X 'T',COMMON_POINTER,LENGTH_OF_SYN_COM,PUT_COMMENT,
     X TIME_UOM, MOD_UOM, VNULL, DEPTH, ISTAT)
C
C
      IF(IFEET.EQ.0)THEN
	  DO 9090 JFEET = 1,J
9090      VEL(JFEET) = VEL(JFEET) / FT_PER_M
	  MOD_UOM='M/S'
      ELSE
	  MOD_UOM = 'F/S'
      ENDIF
      WRITE(I13)(VEL(I),I=1,J)
      IF(ISAVE.EQ.1)
     X CALL LGG_LTDM_ADD_TRACE(TWELL, 'VELOCITY', TINC, TINC, J,
     X 'TIME', COMMON_POINTER, LENGTH_OF_SYN_COM, PUT_COMMENT,
     X TIME_UOM, MOD_UOM, VNULL, VEL, ISTAT)
      ICUR = 1
C
C DENSITY AND OTHER CURVES ARE WRITTEN OUT IF AVAILABLE
C
      IF(IDEN.EQ.0) GO TO 246
      WRITE(I13)(DEN(I),I=1,J)
      ICUR=ICUR+1
      IF(ISAVE.EQ.1)
     X CALL LGG_LTDM_ADD_TRACE(TWELL,'RHOB',TINC,TINC,J,
     X              'T',COMMON_POINTER,LENGTH_OF_SYN_COM,PUT_COMMENT,
     X              TIME_UOM,DENSITY_UOM,DENULL,DEN,ISTAT)
      MOD_UOM=' '
  246 IF(ILOG1.EQ.0) GO TO 247
      WRITE(I13)(AL1(I),I=1,J)
      ICUR=ICUR+1
      IF(ISAVE.EQ.1)
     X CALL LGG_LTDM_ADD_TRACE(TWELL,CURVES(ICUR),TINC,TINC,J,
     X              'T',COMMON_POINTER,LENGTH_OF_SYN_COM,PUT_COMMENT,
     X              TIME_UOM,MOD_UOM,ANULL1,AL1,ISTAT)
  247 IF(ILOG2.EQ.0) GOTO 248
      WRITE(I13)(AL2(I),I=1,J)
      ICUR=ICUR+1
      IF(ISAVE.EQ.1)
     X  CALL LGG_LTDM_ADD_TRACE(TWELL,CURVES(ICUR),TINC,TINC,J,
     X              'T',COMMON_POINTER,LENGTH_OF_SYN_COM,PUT_COMMENT,
     X              TIME_UOM,MOD_UOM,ANULL2,AL2,ISTAT)

  248 IF(ILOG3.EQ.0) GOTO 249
      WRITE(I13)(AL3(I),I=1,J)
      ICUR=ICUR+1
      IF(ISAVE.EQ.1)
     X CALL LGG_LTDM_ADD_TRACE(TWELL,CURVES(ICUR),TINC,TINC,J,
     X              'T',COMMON_POINTER,LENGTH_OF_SYN_COM,PUT_COMMENT,
     X              TIME_UOM,MOD_UOM,ANULL3,AL3,ISTAT)

  249 IF(ILOG4.EQ.0) GOTO 250
      WRITE(I13)(AL4(I),I=1,J)
      ICUR=ICUR+1
      IF(ISAVE.EQ.1)
     X CALL LGG_LTDM_ADD_TRACE(TWELL,CURVES(ICUR),TINC,TINC,J,
     X              'T',COMMON_POINTER,LENGTH_OF_SYN_COM,PUT_COMMENT,
     X              TIME_UOM,MOD_UOM,ANULL4,AL4,ISTAT)

  250 IF(ILOG5.EQ.0) GOTO 244
      WRITE(I13)(AL5(I),I=1,J)
      ICUR=ICUR+1
      IF(ISAVE.EQ.1)
     X   CALL LGG_LTDM_ADD_TRACE(TWELL,CURVES(ICUR),TINC,TINC,J,
     X              'T',COMMON_POINTER,LENGTH_OF_SYN_COM,PUT_COMMENT,
     X              TIME_UOM,MOD_UOM,ANULL5,AL5,ISTAT)

C
C COMPUTE REFLECTION COEFFICIENTS
C

244   CALL SYNVACALC(NSAMP,VA,1)


C
C WRITE REFL. COEF. SERIES TO DISK
C
      IEND = 101+J-1
      WRITE(I13)(VA(II), II = 1, IEND)

C
C
C INTEGRATED CURVES ONLY, WHY BOTHER WITH WAVELET
C IF NO SONIC OR FAUST THAN ASK WHY BOTHER
C
      IF (IVEL.EQ.0) THEN
	  STRING='Straight line velocity used. No traces generated.'
	  CALL WIGALERT(0,HELP,STRING,' ')
	  CLOSE(I13)
	  STRING=' '
	  CALL AMG_MESSAGE(AM_DIALOG, STRING)
	  GOTO 8888
      ENDIF

C
C STORE VA IN BACKUP BUFFERS, SO WE CAN RELOAD VA AFTER EACH SYNTHETIC
C GROUP. WE USE AL1 AND AL2 NOW BECAUSE THEY ARE NO LONGER NEEDED
C

	DO 2344 JK = 1 , J
	  AL2(JK)=VA(JK)
2344    AL1(JK)=VA(JK)

C
C CALL ROUTINE TO GENERATE MULTIPLES IF REQUESTED
C

      IF (GENERAL_MULTI.EQ.1) THEN
C
C       USE TO CALL SYNMULTIP   BUT NOT ANYMORE
C
C         CALL SYNMULTIP(J,AL1(1),GENERAL_MULTI_ORDER,IMSHIF)
C
C       NOW USING GOUPILLAUD ALGORITHM
C
	 CALL GOUPILLAUD(VA,AL1,J,GENERAL_MULTI_COEF,IMSHIF)
      ENDIF

      IF (GENERAL_AGC_LENGTH.NE.0)
     X     CALL AGC(J, AL1(1), GENERAL_AGC_LENGTH)
C
C CALL A.G.C. IF THIS OPTION IS IN EFFECT
C
      IF (GENERAL_AGC_LENGTH.NE.0)
     X     CALL AGC(J, VA(1), GENERAL_AGC_LENGTH)


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  HERE WE GENERATE FILTERED ACOUSTIC IMPEDANCE LOGS (IF REQUESTED)
C   WE USE A BANDPASS FILTER WITH USER PASS FREQUENCIES BUT WITH 7
C   DIFFERENT PHASE LAGS: 0,30,60,90,120,150,180
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      IF (ACOUS.EQ.0) GOTO 243
C
      STRING = 'Generating Filtered Acoustic Impedance Logs'
      CALL AMG_MESSAGE(AM_DIALOG, STRING)
C
C FILL AL3 WITH ACOUSTIC IMPEDENCE VALUES. THIS IS OK SINCE AL3 IS FINISHED.
C
      DO 40 I=1, NSAMP
40    AL3(I)=VEL(I)*DEN(I)

      DO 42 I = 1,50
42    AL3(I+NSAMP)=AL3(NSAMP)
	N_SAMP=MIN (NSAMP+50, 2500)
C
C GET FILTER FOR 0,30,60,90,120,150,180 DEGREE PHASE LAG
C

      FAMIN=ACOUS_MIN_FREQ
      FAMAX=ACOUS_MAX_FREQ
      WRITE(I13)FAMIN,FAMAX

	IFREQ2=ACOUS_MIN_FREQ
	IFREQ3=ACOUS_MAX_FREQ
	IFREQ1=IFREQ2/2
	IFREQ4=2*IFREQ3
	FLENGH=MIN( (IFREQ2-IFREQ1), (IFREQ4-IFREQ3) )
	LENGH_FIL=4000./FLENGH
	LENGH_FIL=(((LENGH_FIL-1)/100)+1)*100

C
C       COMPUTE THE ORMSBY WAVELET
C
	CALL SF_ORMSBY (LENGH_FIL,2,IFREQ1,IFREQ2,IFREQ3,IFREQ4,
     X  ORMSBY_BPASS, AL5, 1, IERR)
	NUM_SAMPLES=1+LENGH_FIL/2
C
C       SHIFT BEFORE CORRELATION...WITH CONSTANT PRECURSORS
C
	NUM_2=NUM_SAMPLES/2
	CALL ARRAY_SHIFT ( AL3, NUM_2, N_SAMP, 2500., AL3(1),
     X                N_SAMP,II)
C
C       BIG LOOP FOR THE DIFFERENT PHASES...
C
      DO 43 I=1,7
C
C       ROTATE THE WAVELET
C
	PHASE_ROTATION=30.
	IF ( I.NE.1) THEN
	    CALL SF_ROTATE_WAVELET(AL5,2,NUM_SAMPLES,PHASE_ROTATION)
	ENDIF
	DO 44 II=1,NUM_SAMPLES
44      AL4(II)= AL5(II)
	CALL SF_FLIP_BUFF(AL4, NUM_SAMPLES)
	CALL CORR(AL4, AL3, CONN, NUM_SAMPLES,
     X  N_SAMP,IDUM)
	DO 23421 JXP=NSAMP,J
23421   CONN(JXP)=CONN(NSAMP)
	WRITE(I13)(CONN(K),K=1,J)
   43 CONTINUE

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C CALCULATE SYNTHETIC TRACES
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

243   ITIMES=1
      IF (GENERAL_MULTI.EQ.1) ITIMES=2
C
C DEFAULT TIME1 = ENDING TIME OF REFLECTION COEFFS
C
      IETIME = 2 * J
      ITIME_ORMS(1) = IETIME
      ITIME_BUTT(1) = IETIME
      ITIME_RICK(1) = IETIME

C
C LOOP ON NUMBER OF NUMBER OF SYNTHETIC GROUPS (FILTER SERIES) TO GENERATE
C WE HAVE A SECOND LOOP (ITIMES = 2) IF MULTIPLES ARE BEING GENERATED
C

      DO 70707 IKILT = 1, GENERAL_NFILT

	DO 70707 INDEX = 1 , ITIMES

C
C IF MULTIPLES AND SECOND PASS, STORE MULTIPLE VA'S IN VA, ELSE REFILL
C VA WITH ORIGINALS, SINCE HAS BEEN CORRUPTED BY SHIFTING, ETC.
C
	   IF (INDEX.EQ.2) THEN
	      DO 70708 JK = 1 , J
70708         VA(JK) = AL1(JK)
	   ELSEIF (IKILT.GT.1) THEN
	      DO 70709 JK = 1 , J
70709         VA(JK)=AL2(JK)
	   ENDIF

C
C CALL ROUTINE TO SELECT FILTER, GENERATE FILTER AND CONVOLVE WITH
C REFLECTION COEFFS.
C

      CALL SYNTVFILT( J, INDEX, IKILT, ICANCEL)

      IF(ICANCEL.EQ.1)THEN
	  CLOSE(I13)
	  GOTO 9999
      ENDIF

      WRITE(I13) (CONN(I),I=1,J)
      PUT_COMMENT(18:80)=' '

      IF (WAVELET_TYPE.EQ.0) THEN
	  PUT_COMMENT(20:25) = 'COSINE'
	  WRITE(PUT_COMMENT(27:80),7150) COSINE_MIN_FREQ1,
     X    COSINE_MAX_FREQ1,COSINE_PHASE
7150  FORMAT(I2,'-',I3,'-',F4.0)

      ELSE
	  PUT_COMMENT(20:25)='RICKER'
	  WRITE(PUT_COMMENT(27:80),7151)RICKER_TYPE,RICKER_FREQ1
7151      FORMAT('TYPE ',I1,' FREQ ',I3)
      ENDIF

      IF(ISAVE.EQ.1)
     X   CALL LGG_LTDM_ADD_TRACE(TWELL,'SYNT',TINC,TINC,J,
     X         'T',COMMON_POINTER,LENGTH_OF_SYN_COM,PUT_COMMENT,
     X         TIME_UOM,MOD_UOM,VNULL,CONN,ISTAT)


70707 CONTINUE


C
C END OF JOB
C

C
C CLOSE SYNTHETIC FILE
C
      CALL AMG_RELEASE_RESOURCE(MENUID2)
      CLOSE(I13)
8888  SYNPRINT=' '
      IF(GENERAL_TD_PRINT.EQ.0) GOTO 9999

C
C IF REQUESTED, GENERATE AN INFO FILE (TIME,DEPTH,VELOCITY,DENSITY)
C  VALUES FOR THE SYNTHETIC. THEN SEND THIS FILE TO THE PRINTER AND
C  DELETE THE TEMPORARY FILE.
C

      CALL HOGFNT(IUNIT)
      SYNPRINT = SYNFILE
      II = ISTRLEN(SYNFILE)
      SYNPRINT(II+1:II+4)='.LIS'
      OPEN(IUNIT,FILE=SYNPRINT,STATUS='NEW',FORM='FORMATTED')
      WRITE(IUNIT,6701) WELNM
      IF(EL_KB_FEET.NE.-999) WRITE(IUNIT,67013)DATUM_USER
6701  FORMAT('1',/' Well = ',A40)
67013  FORMAT(/' Datum = ',I5)

      WRITE(IUNIT,6702)
6702  FORMAT(//T2,'Time',T11,'Depth',T21,'Velocity',T31,'Density')

      WRITE(IUNIT,6703)
6703  FORMAT(T2,'----',T11,'-----',T21,'--------',T31,'------')

      DO 6800 JK = 1 , NSAMP
	TIME1 = JK / 500.0
	WRITE(IUNIT,6704) TIME1, DEPTH(JK), VEL(JK), DEN(JK)
6704    FORMAT(F6.3,T11,F6.0,T21,F8.2,T31,F7.3)
6800  CONTINUE
      CLOSE(IUNIT)
C      CALL HOG_PRINT_F(SYNPRINT,1)
      CALL DELFIL(SYNPRINT,IERR)

C
C  SHUTDOWN SYNTHETICS
C

9999  IF(ICANCEL.EQ.1)THEN
	  CALL DELFIL(SYNFILE,IERR)
	  IF(SYNPRINT.NE.' ') CALL DELFIL(SYNPRINT,IERR)
	  GOTO 9998
      ENDIF
      CALL SYNPLOT(SYNFILE,IFEET)


9998  CALL AMG_MESSAGE(AM_DIALOG, ' ')
      CALL SYN_STATUS_MESSAGE(' ')
      CALL AMG_QUIT()
      RETURN
      END

      SUBROUTINE SYN_MAIN_MENU( IVEL, IDEN, IVELF, JEKB,
     X                          MENU_PICK, ICANCEL)
C****************************MAIN MENU********************************
C
C    ROUTINE:    SYN_MAIN_MENU
C
C    FUNCTION:   BRING UP AND GET SELECTION FROM MAIN MENU
C
C     CHOICES:
C
C     1.  SELECT OTHER CURVES TO INTEGRATE
C     2.  SYNTHETIC OPTIONS DEFINITION
C     3.  DEFINE ALTERNATE DENSITY SOURCES
C     4.  FILTERED ACOUSTIC IMPEDANCE LOGS
C     5.  VELOCITY SURVEY OF ANOTHER WELL (CHECKSHOTS)
C     6.  PERFORM INTEGRATION
C     7.  QUIT SYNTHETICS
C
C*********************************************************************

      INCLUDE 'syn.ri'
      INCLUDE 'esi_am.i'

C
C  DEFINE AND OPEN THE MENU
C

      CALL SYNMENU_GL(SYNTH1, MENUID)
C
C  ENABLE THE MENU ITEMS
C

      CALL WIGENMNI(MENUID,MENU_INTC,1)
      CALL WIGENMNI(MENUID,MENU_RUNIT,1)
      CALL WIGENMNI(MENUID,MENU_GENERAL,IVEL)
      CALL WIGENMNI(MENUID,MENU_ACOUS,IVEL)
      CALL WIGENMNI(MENUID,MENU_QUIT,1)

      ION=0
      IF(IVEL.EQ.1.AND.IDEN.EQ.0) ION=1
      CALL WIGENMNI(MENUID, MENU_ALTDEN,ION)

      ION=0
      IF(IVEL.EQ.1.AND.IVELF.EQ.0.AND.JEKB.NE.-999) ION=1
      CALL WIGENMNI(MENUID,MENU_VELANOTHER,ION)

      CALL WIGVISMN(MENUID,1)

      CALL AMG_MESSAGE(AM_DIALOG, 'Pick an item from the menus.')

1000  CALL WIGRQEVT(0, ICLASS, MN, MENU_PICK)

      IF(MN.NE.MENUID) GOTO 1000

      CALL AMG_RELEASE_RESOURCE(MENUID)

      RETURN
      END



                                                                                                                        
