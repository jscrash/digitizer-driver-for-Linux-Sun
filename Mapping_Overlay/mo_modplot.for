C  DEC/CMS REPLACEMENT HISTORY, Element MO_MODPLOT.FOR
C  *11    1-MAR-1990 17:18:57 GILLESPIE "(SPR 1) Remove unused variables"
C  *10   18-DEC-1989 10:46:51 GILLESPIE "(SPR 5077) Use WMG_GPL"
C  *9     7-DEC-1989 11:43:17 GORDON "(SPR 0) Call mo_reset_text, not mog_reset_text (it's Fortran!)"
C  *8     6-NOV-1989 16:48:45 GILLESPIE "(SPR 30) Get 'glue' entry points straightened out"
C  *7     6-NOV-1989 14:00:17 GILLESPIE "(SPR 30) Learn to type"
C  *6     6-NOV-1989 10:32:58 GILLESPIE "(SPR 30) Change mo*resource to amg_resource"
C  *5     6-NOV-1989 09:04:40 PURNA "(SPR 30) fix mo_ calls to mog_"
C  *4     3-NOV-1989 12:01:59 GILLESPIE "(SPR 30) Change entry points for new n-List nomenclature"
C  *3    17-OCT-1989 08:55:00 GORDON "(SPR 4999) Update color selection method"
C  *2    19-SEP-1989 10:13:45 GORDON "(PURNA) GULF MODS UNDER SPR 100"
C  *1    10-AUG-1989 18:48:51 VINCE "Fortran code after UNIX mods"
C  DEC/CMS REPLACEMENT HISTORY, Element MO_MODPLOT.FOR
C******************************************************************************
C
C                Copyright Exploration Systems, Inc. 1989
C		   Unpublished -- All rights reserved
C
C THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc AND MAY
C CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
C DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
C MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF
C
C			Exploration Systems, Inc.
C			579 Market Street
C			San Francisco, CA  USA 94105
C			(415) 974-1600
C
C (The above notice does not constitute an admission of publication or
C unrestricted dissemination of the work)
C
C******************************************************************************
C

      SUBROUTINE MO_PLOT(MODELFILE,MO_NAME,NRMAX)
C *****************************************************************************
C
C   ROUTINE:     MO_PLOT
C
C   FUNCTION:    THIS IS THE DRIVER ROUTINE FOR THE MODEL TRACE PLOTTING. THE
C                MODEL TRACES ARE FIRST PLOTTED TO THE SCREEN THEN THE USER
C                IS QUERIED ABOUT A BATCH PLOT.
C
C *****************************************************************************

      CHARACTER*(*) MODELFILE,MO_NAME
C
      CHARACTER*80 TITLE1,TITLE2,COMMENT
      REAL*4 SCALE,PLTSPD,TRSP
      INTEGER POLARITY,ICANCEL
      CHARACTER*1 DISP
C
C DEFINE PLOT
C
      TITLE1=MO_NAME
      CALL MODPLOT_DIALOG(TITLE1,TITLE2,COMMENT,SCALE,PLTSPD,
     X                    POLARITY, TRSP, DISP, ICANCEL)
      IF(ICANCEL.EQ.1)THEN
         CLOSE(IUNIT)
         RETURN
      ENDIF
      IFBATCH = 0
C
C  PLOT THE MODEL TRACES ON THE SCREEN
C

      CALL MO_PLOTTER(MODELFILE,MO_NAME,TITLE1,TITLE2,
     X                   COMMENT, SCALE, PLTSPD, POLARITY,
     X                   TRSP, DISP, IFBATCH, NRMAX)
C
C  CHECK IF BATCH PLOT IS REQUIRED
C
      CALL MO_PLOT_BATCH(MODELFILE,MO_NAME,TITLE1,TITLE2,
     X                      COMMENT, SCALE, PLTSPD, POLARITY,
     X                      TRSP, DISP, IFBATCH, NRMAX)

      RETURN
      END







      SUBROUTINE MO_PLOTTER(MODELFILE,MO_NAME,TITLE1,TITLE2,
     X                       COMMENT, SCALE, PLTSPD, POLARITY,
     X                       TRSP, DISP, IBATCH, NRMAX)
C
C ***********************************************************************
C
C  ROUTINE:     MO_PLOTTER
C
C  FUNCTION:    THIS ROUTINE PLOTS THE SYNTHETIC MODEL TRACES, IE THE 
C               WELL TIE TRACES CONVOLVED WITH A WAVELET SELECTED BY THE
C               USER.
C
C               SEGMENTS CREATED
C               ----------------
C               1.   TITLES
C               2.   LEFT DEPTH SCALE
C               3.   HORIZONTAL TIMING LINES WITH SCALE
C               4.   FILTER DESIGN LABEL
C               5.   TRACES
C               6.   RIGHT DEPTH SCALE
C               7.   LAYERS (IN TIME) OVERLAYED ON MODEL
C        
C ***********************************************************************

      INCLUDE 'sun_gks77.i'

      INCLUDE 'esi_wm.i'
      INCLUDE 'mo_modcom.i'
      INCLUDE 'esi_am.i'
      INCLUDE 'sf_defs.i'

C
      CHARACTER MODELFILE*(*),MO_NAME*(*)
C
C GKS STRINGS AND GPL BUFFERS
C
      CHARACTER*255 WSTRING,WSTRING2,JNUMB*128
C
C  CURVE ARRAYS
C
      DIMENSION VALUES(5000),TRACE(5000)
C
C VEL IS IN MODEL COMMON, SEE MODCOM.INS.F77
C
      EQUIVALENCE (VALUES(1),TRACE(1),VEL(1))
      INTEGER     LCUT, LPASS, HPASS, HCUT, POLARITY
      CHARACTER*1 DISP
	
C
C WORKSTATION WINDOW ARRAYS FOR BATCH PLOTTING
C
      REAL RWINDO(4), CWINDO(4), RVIEWP(4), CVIEWP(4)
      INTEGER ERRIND, TUS, WKID
      INTEGER HIGHLIGHT, NORMAL, BACKGROUND
C
C  PLOT TITLES AND METAFILE NAME
C
      CHARACTER*80 TITLE1,TITLE2,COMMENT,NAME
      EQUIVALENCE(NAME,INAME)
      DATA WKID/1/

      CALL LUG_TEXT_TO_INDEX( 'COLOR', HIGHLIGHT, 'HIGHLIGHT' )
      CALL LUG_TEXT_TO_INDEX( 'COLOR', NORMAL, 'NORMAL' )
      CALL LUG_TEXT_TO_INDEX( 'COLOR', BACKGROUND, 'BACKGROUND' )
C
C  OPEN THE MODEL FILE CONTAINING THE CONVOLVED TRACES
C
      CALL HOGFNT(IUNIT)
      OPEN(IUNIT,FILE=MODELFILE,STATUS='OLD',FORM='UNFORMATTED')
C
C  READ THE HEADER INFO, FILTER INFORMATION, ETC.
C
      READ(IUNIT) ITYPE, LENGTH, IPHASE, IPREDF
      READ(IUNIT) LCUT, LPASS, HPASS, HCUT

      READ(IUNIT) ICUR
      READ(IUNIT) DELTAT
      READ(IUNIT) NTIMES
      READ(IUNIT) NLAYERS
      READ(IUNIT) NPTSL


      READ(IUNIT) (DEPTH(I),I=1,NPTSL)
      READ(IUNIT) (VALUES(I),I=1,NPTSL)
      READ(IUNIT) (VALUES(I),I=1,NPTSL)
CCC
C
C CALCULATE THE X,Y LIMITS FOR THE TRANSFORMATION 
C 
C THE Y SIZE IS = 4.5 + (NO. SAMPLES * SAMPLE RATE) * VERTICAL PLOT SCALE
C
C THE X SIZE IS = 5.5 + NO. TRACES * TRACE SPACING (TR. PER INCH)
C
C THE TOP OF THE TRACE PLOT (0 MSEC) IS AT YLEN - 3.6 
C
CCC
      TMAX = NRMAX * DELTAT
      TMAX = TMAX / .1
      I    = TMAX
      TMAX = (I+1) * .1
C
C CURVES ARE 1.7 INCHES APART
C
      TRSPAC = 1/TRSP
      XLEN = 5.5 + NTIMES * TRSPAC
C
C SIZE OF PLOT HAS 2.5 INCHES TO LEFT OF START OF HORI LINE
C
      YLEN = 4.5 + TMAX * PLTSPD

C
C OPEN A WINDOW ( IF BATCH SET BACKGROUND COLOR = -1 IE CLEAR)
C
      CALL WMG_INQ_WKWN(XNDC1,XNDC2,YNDC1,YNDC2)
      IF (IBATCH.EQ.0) THEN
        CALL WMG_SET_CURRENT_SCREEN( 2)
        IBKGRD = BACKGROUND
      ELSE 
C
C IF BATCH GET WORKSTATION TRANSFORMATION
C
        IBKGRD = -1
        IWTYPE = 0
        CALL GQWKT( WKID, ERRIND, TUS, RWINDO, CWINDO, RVIEWP, CVIEWP)
        XNDC1 = 0.                                                             
C
C MOD BY JJC 11/11/88 TO INCLUDE THE DEVICE RATIO, IN CASE THE DEVICE
C       IS NOT SQUARE.
C
        XNDC2 = XNDC2 * (XLEN/CVIEWP(2) )
        YNDC1 = 0.
        YNDC2 = YNDC2 * (YLEN/CVIEWP(4) )
      ENDIF

      CALL WMGWALLOCATE(IW1,XNDC1,XNDC2,YNDC1,YNDC2,IBKGRD)

      WSTRING2='MO_PLOT'
      WSTRING = 'MODEL ' // MO_NAME

      CALL WMGOSET(IW1,WM_CLASS_WINDOW,WSTRING2,WSTRING)
      CALL WMGTALLOCATE(ITNR,0.,1.,0.,1.,0.,XLEN,0.,YLEN)
      CALL MO_RESET_TEXT
      CALL GSLWSC(1.0)
      CALL GSPLCI(NORMAL)
C
C DRAW BORDER AND TEXT (TITLES)
C
      IF(IBATCH.EQ.0)THEN
          WSTRING='Drawing border and titles.'
          CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
      CALL WMGSALLOCATE(ITEXTSEGMENT)
      WSTRING='MODEL TITLES'
      CALL WMGOSET(ITEXTSEGMENT,WM_CLASS_SEGMENT,WSTRING2,
     X WSTRING)
      ZERO=0.
      XBUF(1)=ZERO
      YBUF(1)=ZERO
      XBUF(2)=XLEN
      YBUF(2)=ZERO
      XBUF(3)=XLEN
      YBUF(3)=YLEN
      XBUF(4)=ZERO
      YBUF(4)=YLEN
      XBUF(5)=ZERO
      YBUF(5)=ZERO
      CALL WMG_GPL(5,XBUF,YBUF)
      CALL GSCHH(.125)
      X=.5
      CALL GSTXCI(NORMAL)
      CALL GTX(X,YLEN-.7,'EXPLORATION SYSTEMS, INC.')
      X=1.5
      CALL GSCHH(.1)
      CALL GTX(X,YLEN-1.0,'SEISMIC MODELING PACKAGE')
      CALL GTX(X,YLEN-1.3,TITLE1)
      CALL GTX(X,YLEN-1.6,TITLE2)
  333 FORMAT(I8)
  335 FORMAT(F8.2)
      WSTRING = 'COMMENTS: '//COMMENT
      CALL GTX(X,YLEN-1.9,WSTRING)
      WSTRING='DEPTH SCALES APPLY TO FIRST AND LAST TRACES.'
      CALL GSCHH(0.07)
      CALL GTX(X,YLEN-2.2,WSTRING)
      CALL WMGSCLOSE(ITEXTSEGMENT)
C
C
C PLOT DEPTH SCALE ON LEFT
C
      CALL GSCHXP(6./7.)
      CALL GSCHSP(.3)
      CALL GSCHH(.1)
      IF(IBATCH.EQ.0)THEN
          WSTRING='Drawing left depth scale.'
          CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
      CALL WMGSALLOCATE(ILDEPTHSEGMENT)
      WSTRING = 'LEFT DEPTH SCALE'
      CALL WMGOSET(ILDEPTHSEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
      CALL  GSTXCI(NORMAL)
      CALL GSPLCI(NORMAL)
      CALL GTX(.8,YLEN-3.1,'DEPTH')
      IF (DEPTH(1) .LE. 0.) THEN
      	  FPN=0
      	  APN=0
      ELSE
	IPN= ( DEPTH(1) - 1) / 100
	APN = 100 * ( IPN + 1 )
	IPN = ( APN -1 ) /1000
	FPN = 1000 * ( IPN +1 )
      ENDIF
      Y = YLEN - 3.6
      X=.8
      YINC = PLTSPD * DELTAT
      CALL GSCHH(.1)
      DO 450 JJ = 1,NPTSL
      IF(DEPTH(JJ) .LT. APN)GOTO 450
      IF(APN .EQ. FPN) THEN
             JJJFPN=FPN
             WRITE(JNUMB,'(I5)') JJJFPN
             CALL GTX(X,Y,JNUMB)
             XBUF(1)=1.5
             XBUF(2)=1.7
             YBUF(1)=Y
             YBUF(2)=Y
             CALL WMG_GPL(2,XBUF,YBUF)
             FPN=FPN+1000
      ELSE
             XBUF(1)=1.5
             YBUF(1)=Y
             XBUF(2)=1.6
             YBUF(2)=Y
             CALL WMG_GPL(2,XBUF,YBUF)
      ENDIF
      APN=APN+100.
450   Y=Y-YINC
      CALL WMGSCLOSE(ILDEPTHSEGMENT)
C
C PLOT HORIZONTAL LINES WITH TIME SCALE
C
      IF(IBATCH.EQ.0)THEN
          WSTRING='Drawing timing lines.'
          CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
C
      CALL WMGSALLOCATE(ITIMESEGMENT)
      WSTRING='TIMING LINES'
      CALL WMGOSET(ITIMESEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
      CALL GSPLCI(HIGHLIGHT)
      CALL GSTXCI(HIGHLIGHT)
      CALL GTX(1.9,YLEN-3.1,'TIME')
      YINC = PLTSPD / 10.
      Y = YLEN - 3.6 + YINC
      IEND = TMAX  * 10.001 + 1
      XLEX = XLEN - 2.5

      DO 460 JJ = 1 , IEND
        FPN = (JJ-1) / 10.
        Y = Y - YINC
        ISIDE = (-1) ** JJ
        IF (ISIDE .LT.0) THEN
            WRITE(JNUMB,'(F5.3)') FPN
            X=1.9
            CALL GTX(X,Y,JNUMB)
            XBUF(1)=2.5
            XBUF(2)=XLEX
            YBUF(1)=Y
            YBUF(2)=Y
            CALL WMG_GPL(2,XBUF,YBUF)
            WRITE(JNUMB,'(F5.3)') FPN
            CALL GTX(XLEX+.2,Y,JNUMB)
        ELSE
            WRITE(JNUMB,'(F5.3)') FPN
            CALL GTX(XLEX+.2,Y,JNUMB)
            XBUF(1)=XLEX
            XBUF(2)=2.5
            YBUF(1)=Y
            YBUF(2)=Y
            CALL WMG_GPL(2,XBUF,YBUF)
            WRITE(JNUMB,'(F5.3)') FPN
            X=1.9
            CALL GTX(X,Y,JNUMB)
        ENDIF
460   CONTINUE
      XLENN=XLEN-2.3
      CALL WMGSCLOSE(ITIMESEGMENT)


C
C  ALLOCATE A GROUP FOR THE FILTER DESIGN LABEL, THE POLARITY LABEL, AND THE
C  TRACES (EACH TRACE HAS ITS OWN SEGMENT)
C
      XX = 2.25

      WSTRING = 'FILTER DESIGN LABEL AND TRACES'

      CALL WMGGALLOCATE(ITRACEGROUP)
      CALL WMGOSET(ITRACEGROUP,WM_CLASS_GROUP,WSTRING2,WSTRING)
      IF(IBATCH.EQ.0)THEN
          WSTRING='Drawing filter design label.'
          CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
C

      CALL WMGSALLOCATE(ITRACETEXTSEGMENT)
      WSTRING='FILTER DESIGN LABEL'
      CALL WMGOSET(ITRACETEXTSEGMENT,WM_CLASS_SEGMENT,
     X  WSTRING2,WSTRING)
      CALL GSTXCI(NORMAL)
      Y = YLEN - 2.6
      DD = XX + 1.0
      CALL GSCHH(.07)
      CALL GTX(DD,Y, '                FILTER DESIGN')
      Y = Y - .057
      CALL GTX(DD,Y-.03,'---------------------------------------------')

      IF (ITYPE.EQ.COSINE_WAV) THEN
          WRITE(WSTRING, 8501) LCUT, HCUT
8501      FORMAT('COSINE ',I3,' HZ ',I4,' HZ ')

      ELSEIF (ITYPE.EQ.RICKER_WAV) THEN
          WRITE (WSTRING, 8502) IPREDF
8502      FORMAT('RICKER,  PREDOM. FREQ(HZ) = ',I4)

      ELSEIF (ITYPE.EQ.ORMSBY_WAV) THEN
          WRITE (WSTRING, 8503) LCUT, LPASS, HPASS, HCUT
8503      FORMAT('ORMSBY, DESIGN FREQ.(HZ) = ',I3,',',I3,',',I4,',',I4)

      ELSEIF (ITYPE.EQ.BUTTERWORTH_WAV) THEN
          WRITE (WSTRING, 8504) LPASS, HPASS
8504      FORMAT('BUTTWRTH, LOW PASS = ',I4,',  HIGH PASS = ', I4)

      ELSE
          WSTRING = 'USER DEFINED'
      ENDIF

      Y = Y - .20
      CALL GTX(DD,Y,WSTRING)


      WRITE (WSTRING, 8506) LENGTH, IPHASE
8506  FORMAT('LENGTH (MSEC) = ', I4, '      PHASE (DEG) = ', I4)

      Y = Y - .2
      CALL GTX(DD, Y, WSTRING)
      CALL WMGSCLOSE(ITRACETEXTSEGMENT)

C
C  NOW PLOT THE ACTUAL TRACES, (NORMAL OR REVERSE POLARITY)
C
      IF(IBATCH.EQ.0)THEN
          WSTRING='Drawing seismic traces.'
          CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
      CALL WMGSALLOCATE(ITRACENSEGMENT)
      IF(POLARITY.EQ.1)THEN
          WSTRING='NORMAL'
      ELSE
          WSTRING='REVERSE'
      ENDIF
      CALL WMGOSET(ITRACENSEGMENT,WM_CLASS_SEGMENT,WSTRING2,
     X  WSTRING)
C
      CALL GSCHXP(1.)
      CALL GSCHSP(.3)
      SYMBX= XX + .5 +(TRSPAC*(NTIMES-1)) / 2.
      CALL GSTXAL(GACENT,GAVNOR)
      CALL GTX(SYMBX,YLEN-3.55,WSTRING)
      CALL WMGSCLOSE(ITRACENSEGMENT)

      CALL GSTXAL(GAHNOR,GAVNOR)
      TRX = XX + .5 - TRSPAC

C
C PLOT TRACES
C
      NEG_COLOR=-1
      IF(DISP.EQ.'W') THEN
          IPOS_COLOR=-1
      ELSE
          IPOS_COLOR=1
      ENDIF
C
C DEFINE WIGGLE COLOR AND SCALES
C
      CALL MOG_SDDFWIG(DBLE(0.0),DBLE(SCALE),NEG_COLOR,IPOS_COLOR)
      Y=YLEN-3.6
      TRACE(1)=0.0
      YINC = DELTAT *PLTSPD
C
C LOOP ON TRACES
C
 
      DO 3032 JJ=1,NTIMES
        WRITE(WSTRING,8700)JJ,NTIMES
8700    FORMAT('Drawing trace ',I5,' of ',I5,'.')
        CALL STRN2B(WSTRING)
        IF(IBATCH.EQ.0) THEN
           CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
           CALL WMGSALLOCATE(ITRACENSEGMENT)
        ENDIF
        WRITE(WSTRING,8704)JJ
8704    FORMAT('TRACE #',I5)
        CALL STRN2B(WSTRING)
        CALL WMGOSET(ITRACENSEGMENT,WM_CLASS_SEGMENT,WSTRING2,
     X                WSTRING)
        X=TRX+JJ*TRSPAC
        READ(IUNIT)NPTSL
        READ(IUNIT)(TRACE(I),I=2,NPTSL+1)
        IF(NPTSL.LT.NRMAX) THEN
            DO 410 JK = NPTSL+2,NRMAX+1
410         TRACE(JK)=0.0
        ENDIF
        IF(POLARITY.EQ. -1) THEN
           DO 510 JK = 1 , NRMAX
510        TRACE(JK)=-TRACE(JK)
        ENDIF
        CALL  MOG_SDWIGGL(NRMAX+1,TRACE,DBLE(-YINC),DBLE(X),DBLE(Y))
        CALL WMGSCLOSE(ITRACENSEGMENT)
3032  CONTINUE

      CALL WMGGCLOSE(ITRACEGROUP)



C
C DEPTH SCALE ON RIGHT
C
      CALL GSCHXP(6./7.)
      CALL GSCHSP(.3)
      IF(IBATCH.EQ.0) THEN
          WSTRING='Drawing right depth scale.'
          CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
      CALL WMGSALLOCATE(IRDEPTHSEGMENT)
      WSTRING='RIGHT DEPTH SCALE'
      CALL WMGOSET(IRDEPTHSEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
      CALL GSTXCI(NORMAL)
      CALL GSPLCI(NORMAL)
      CALL GSCHH(.1)
      CALL GTX(XLEN-1.1,YLEN-3.1,'DEPTH')
C
C READ DEPTH SCALE FOR LAST TRACE
C
      READ(IUNIT)(DEPTH(I),I=1,NPTSL)
      IF (DEPTH(1) .LE. 0.) THEN
      	  FPN=0
      	  APN=0
      ELSE
	IPN= ( DEPTH(1) - 1) / 100
	APN = 100 * ( IPN + 1 )
	IPN = ( APN -1 ) /1000
	FPN = 1000 * ( IPN +1 )
      ENDIF
      CALL GSTXCI(NORMAL)
      IMAXD=0
      Y=YLEN - 3.6
      X=XLEN-1.1
      YINC = PLTSPD * DELTAT

      DO 488 JJ = 1,NPTSL
      IF(DEPTH(JJ) .LT. APN)GOTO 488
      IF(APN .EQ. FPN) THEN
          JJJFPN = FPN
          WRITE(JNUMB,333) JJJFPN
          CALL STRLJ(JNUMB)
          CALL GTX(X,Y,JNUMB)
          XBUF(1)=X-.2
          YBUF(1)=Y
          XBUF(2)=X-.4
          YBUF(2)=Y
          CALL WMG_GPL(2,XBUF,YBUF)
          FPN=FPN+1000
          IMAXD=IMAXD+1
      ELSE
          XBUF(1)=X-.3
          YBUF(1)=Y
          XBUF(2)=X-.4
          YBUF(2)=Y
          CALL WMG_GPL(2,XBUF,YBUF)
      ENDIF
      APN=APN+100.
488   Y=Y-YINC
      CALL WMGSCLOSE(IRDEPTHSEGMENT)

C
C   PLOT THE MODEL LAYERS (IN TIME) ON THE TRACES
C

      READ (IUNIT) (YOUT(I), I = 1, NLAYERS*NTIMES) 

      CALL WMGSALLOCATE(LAYERSEGMENT)
      WSTRING = 'MODEL LAYERS'
      CALL WMGOSET(LAYERSEGMENT, WM_CLASS_SEGMENT, WSTRING2, WSTRING)
C
C LOOP ON LAYERS
C

      DO 610 ILAY = 1, NLAYERS

         DO 600 ITRC = 1, NTIMES

           INDEX = (ILAY - 1) * NTIMES + ITRC

           XBUF(ITRC) = TRX + ITRC * TRSPAC
           YBUF(ITRC) = YLEN - 3.6 - YOUT(INDEX) * PLTSPD

600      CONTINUE
         CALL WMG_GPL(NTIMES,XBUF,YBUF)

610   CONTINUE

      CALL WMGSCLOSE(LAYERSEGMENT)


C
C CLOSE WINDOW
C
688   CALL WMGWCLOSE(IW1)
      IF(IBATCH.EQ.0) THEN
          WSTRING = ' '
          CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
C
      CLOSE(IUNIT)
      CALL WMG_UPDATE()
      RETURN
      END



      SUBROUTINE MODPLOT_DIALOG(TITLE1,TITLE2,COMMENT,SCALE,PLTSPD,
     X                          POLARITY, TRSP, DISP, ICANCEL)
C***********************************************************************
C
C      MODPLOT DIALOG
C
C      TITLE1       = FIRST TITLE
C      TITLE2       = SECOND TITLE
C      COMMENT      = COMMENT
C      SCALE        = AMPLITUDE SCALER
C      PLTSPD       = IN/SEC           )  THESE VALUES CAN BE SPECIFIED
C      TRSP         = NUM. TRACES/INCH )  METRIC, IF SO ARE CONVERTED.
C      IFMETRIC     = = 1 IF SCALES ARE SPECIFIED IN CM/SEC , NTR/CM
C      POLARITY     = POLARITY SCALAR (-1 OR + 1)
C      DISP         = VARIABLE AREA OR WIGGLE
C      ICANCEL      = WAS CANCEL HIT
C
C***********************************************************************

      INCLUDE 'mo_model.ri'
      INCLUDE 'mo_modcom.i'
      INCLUDE 'mo_struct.i'
      INCLUDE 'esi_am.i'
C
      CHARACTER*255  STRING,HELP
      CHARACTER*10 RES_FILE
      INTEGER        CDLGID,CDITEM,CDVALUE,ID
      CHARACTER *(*) TITLE1,TITLE2,COMMENT,DISP
      INTEGER        POLARITY
      DATA HELP/'MO_MODPLOT'/
      DATA RES_FILE/'MO_MODEL'/

      POLARITY = 1
      DISP = 'V'
      COMMENT = ' '
      SCALE = 1.0

      PLTSPD = 5.0
      TRSP = 6.0

      ICANCEL = 0
C
C SET UP DEFAULTS AND OPEN DIALOG
C
      CALL AMG_DEFINE_RESOURCE(AM_DIALOG, RES_FILE,MODPLOT,0,ID,0)

      CALL MO_CLEANUP_STRING (MO_UOM)
      IF (MO_UOM.EQ.'METRES'.OR.MO_UOM.EQ.'METERS') THEN
        IFMETRIC = 1
        CALL WIGSCDV(ID,MODPLOT_METRIC,1)
      ELSE
        IFMETRIC = 0
        CALL WIGSCDV(ID,MODPLOT_ENGLISH,1)
      ENDIF

      CALL WIGSCDV(ID,MODPLOT_VARIABLE,1)
      CALL WIGSCDV(ID,MODPLOT_NORMAL,1)
      STRING=TITLE1
      CALL WIGSCDT(ID,MODPLOT_TITLE1,STRING)
      STRING=' '
      CALL WIGSCDT(ID,MODPLOT_TITLE2,STRING)
      STRING=' '

      CALL WIGSCDT(ID,MODPLOT_COMMENT,STRING)
      WRITE(STRING,'(F3.1)') SCALE
      CALL WIGSCDT(ID,MODPLOT_SCALE,STRING)
      WRITE(STRING,'(F3.1)') TRSP
      CALL WIGSCDT(ID,MODPLOT_TPI,STRING)
      WRITE(STRING,'(F4.2)') PLTSPD
      CALL WIGSCDT(ID,MODPLOT_PLOTSPD,STRING)

      CALL WIGOPCD(ID)
      CDLGID=ID


100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)
C
      IF(CDITEM.EQ.MODPLOT_OK)GOTO 999
      IF(CDITEM.EQ.MODPLOT_CANCEL) THEN
          ICANCEL=1
          GOTO 9999
      ENDIF
      IF(CDITEM.EQ.MODPLOT_VARIABLE)THEN
            DISP='V'
            GOTO 100
      ENDIF
      IF(CDITEM.EQ.MODPLOT_WIGGLE) THEN
            DISP='W'
            GOTO 100
      ENDIF
      IF(CDITEM.EQ.MODPLOT_NORMAL) THEN
            POLARITY = 1
            GOTO 100
      ENDIF
      IF(CDITEM.EQ.MODPLOT_REVERSE) THEN
            POLARITY = -1
            GOTO 100
      ENDIF
      IF(CDITEM.EQ.MODPLOT_ENGLISH) THEN
            IFMETRIC = 0
            GOTO 100
      ENDIF
      IF(CDITEM.EQ.MODPLOT_METRIC) THEN
            IFMETRIC = 1
            GOTO 100
      ENDIF
999   CALL WIGQCCDI(CDLGID,MODPLOT_TPI,IDUM,STRING)
      NERR=0
      IF(STRING.EQ.' ')GOTO 1010
      READ(STRING,*,ERR=1010)TRSP
      IF(TRSP.LT.1.OR.TRSP.GT.24) THEN
            NERR=NERR+1
      STRING = 'Traces per inch-cm is out of range. Valid range 1-24.'
            CALL WIGALERT(1,HELP,STRING,' ')
      ENDIF
      IF (IFMETRIC.EQ.1) TRSP = TRSP * 2.54


      GOTO 1040
1010  NERR=NERR+1
      STRING = 'Traces per inch-cm is not numeric.'
      CALL WIGALERT(1,HELP,STRING,' ')
1040  CALL WIGQCCDI(CDLGID,MODPLOT_SCALE,IDUM,STRING)
      IF(STRING.EQ.' ')GOTO 1050
      READ(STRING,*,ERR=1050)SCALE
      IF(SCALE.LT.0.0.OR.SCALE.GT.10.0) THEN
      STRING ='Amplitude scalar is out of range. Valid range is 0-10.'
         NERR=NERR+1
         CALL  WIGALERT(1,HELP,STRING,' ')
      ENDIF
      GOTO 1060

1050  NERR=NERR+1
      STRING = 'Amplitude scalar is not numeric.'
      CALL WIGALERT(1,HELP,STRING,' ')
1060  CALL WIGQCCDI(CDLGID,MODPLOT_COMMENT,IDUM,STRING)
      II=LEN(COMMENT)
      COMMENT=STRING(1:II)
      CALL STRLJ(COMMENT)
      CALL WIGQCCDI(CDLGID,MODPLOT_TITLE1,IDUM,STRING)
      II=LEN(TITLE1)
      TITLE1=STRING(1:II)
      CALL STRLJ(TITLE1)
      CALL WIGQCCDI(CDLGID,MODPLOT_TITLE2,IDUM,STRING)
      II=LEN(TITLE2)
      TITLE2=STRING(1:II)
      CALL STRLJ(TITLE2)
      CALL WIGQCCDI(CDLGID,MODPLOT_PLOTSPD,IDUM,STRING)
      IF(STRING.EQ.' ')GOTO 1070
      READ(STRING,*,ERR=1070)PLTSPD
      IF(PLTSPD.LT.0.5 .OR. PLTSPD. GT. 50.) THEN
       STRING = 'Inches-cm / second out of range. Valid range is .5-5O.'
       NERR=NERR+1
       CALL WIGALERT(1,HELP,STRING,' ')
      ENDIF
      IF (IFMETRIC.EQ.1) PLTSPD = PLTSPD / 2.54
      GOTO 1080

1070  STRING = 'Inches-cm / second is not numeric.'
      NERR=NERR+1
      CALL WIGALERT(1,HELP,STRING,' ')
1080  IF(NERR.NE.0)GOTO 100
9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END




      SUBROUTINE MO_PLOT_BATCH(MODELFILE,MO_NAME,TITLE1,TITLE2,
     X                            COMMENT, SCALE, PLTSPD, POLARITY,
     X                            TRSP, DISP, IFBATCH, NRMAX)
C ***********************************************************************
C
C     ROUTINE:    MO_PLOT_BATCH
C
C     FUNCTION:   THIS ROUTINE PERFORMS BATCH PLOTTING BY 1) CREATING A 
C                 COPY OF THE MODEL TRACE FILE  2) WRITE THE PLOT PARAME
C                 -TERS TO A FILE FOR LATER ACCESS  3) SPAWN THE JOB TO
C                 EXECUTE THE COMMAND FILE WHICH CALLS THE PLOT ROUTINE
C                 ( WHICH WILL WRITE OUT THE PLOT DATA TO A NEUTRAL GKS
C                 FILE, SUBMIT THE NEUTRAL FILE, AD NAUSEUM)
C ***********************************************************************

      INCLUDE 'esi_qs.i'

      CHARACTER*(*) MODELFILE,MO_NAME,TITLE1,TITLE2,COMMENT,DISP
      CHARACTER*15  DATE_TAG
      CHARACTER*255 WIYESNO1,WIYESNO2
      CHARACTER*255 STRING,COMMAND_ARGS
      CHARACTER*240 NEUTRAL_FILE, COMMAND_FILE, PARAM_FILE
      CHARACTER*32  F_ACCOUNT, F_PASSWORD, F_DATABASE, PROJECT
      CHARACTER*98  ORASTRING, PDRIVER, PQUEUE, PSTATUS
      CHARACTER*32  XMAXSTR,YMAXSTR
      REAL SCALE,PLTSPD,TRSP, PXSIZE, PYSIZE
      INTEGER*4 PNPENS, PF_STATUS
      INTEGER POLARITY, IFBATCH, SPAWN_TYPE, USER
C
C SET UP THE VARIOUS FILENAME STRINGS
C
      
      PF_STATUS = SUCCESS
      PXSIZE = 0.0
      PYSIZE = 0.0
      PNPENS = 0

      CALL HOG_GET_UNIQUE_FILENAME( STRING )
      CALL TFSTRCAT( STRING, '.NPF', STRING )
      CALL HOG_ADD_PATH( 'ESI$PLOTS', STRING, LEN(STRING), 
     +                   NEUTRAL_FILE )

      CALL HOG_GET_UNIQUE_FILENAME( STRING )
      CALL TFSTRCAT( STRING, '.PRM', STRING )
      CALL HOG_ADD_PATH( 'ESI$SCRATCH', STRING, LEN(STRING),
     +			 PARAM_FILE )
      CALL HOG_TRANSLATE_FILENAME( PARAM_FILE, PARAM_FILE )

      CALL HOG_ADD_PATH( 'ESI$BIN', 'MO_TRC_PLT_COM', 
     +                   LEN(COMMAND_FILE), COMMAND_FILE )

C
C SEE IF BATCH PLOT SHOULD BE LAUNCHED
C

      WIYESNO1='Would you like to plot the MODEL TRACES PLOT?'
      WIYESNO2=' '
      CALL WIGYESNO(WIYESNO1,WIYESNO2,IFYES,IERR)
      IF(IFYES.EQ.0)RETURN
C
C GET DATE TIME
C
      CALL HOG_DATE_TAG(DATE_TAG)


      STRING = 'Spawning job to create Neutral Plot File: '//
     * NEUTRAL_FILE
      CALL AMG_MESSAGE( AM_DIALOG, STRING (1:ISTRLEN(STRING)))
C

C 01/04/89 GS - This is no longer necessary
C MAKE A COPY OF MODEL TRACE FILE SO INTERACTIVE JOB CAN CONTINUE
C
C
C      STRING = 'COPY '//MODELFILE//' '//NEW_TRACEFILE 
C      CALL HOG_SYSCOM( STRING)
C      
C
C WRITE OUT PLOT PARAMTERS TO A DATA FILE FOR LATER ACCESS BY BATCH JOB
C

      CALL HOGFNT( IUNIT)

      OPEN ( IUNIT, FILE = PARAM_FILE, STATUS = 'NEW', RECL = 150)

      WRITE( IUNIT,10) MODELFILE
   10 FORMAT (A)

      WRITE( IUNIT,10) MO_NAME
      WRITE( IUNIT,10) TITLE1
      WRITE( IUNIT,10) TITLE2
      WRITE( IUNIT,10) COMMENT
      WRITE( IUNIT,10) DISP

      WRITE( IUNIT,20) SCALE, PLTSPD, TRSP
   20 FORMAT ( 3F20.4) 

      WRITE( IUNIT,30) POLARITY, IFBATCH, NRMAX
   30 FORMAT ( 3I10)
      CLOSE (IUNIT)
C
C INQUIRE ACCOUNT, PROJECT, DATABASE, ETC.
C
      CALL QSG_INQC(IQS_PROJECT_NAME, PROJECT, L1)
      CALL QSG_INQC(IQS_FINDER_ACCOUNT, F_ACCOUNT, L1)
      CALL QSG_INQC(IQS_FINDER_PASSWORD, F_PASSWORD, L1)
      CALL QSG_INQC(IQS_DATABASE, F_DATABASE, L1)

      PF_STATUS = 0
      CALL PFGL_GET_PLOTTER(PDRIVER,PQUEUE,PSTATUS,PNPENS,
     1                            PXSIZE,PYSIZE,PF_STATUS)

      IF (PF_STATUS .NE. 0) THEN
            STRING = 'Plot Cancelled...'
            CALL AMG_MESSAGE(AM_DIALOG, STRING (1:ISTRLEN(STRING)))
            RETURN
      ENDIF
C
C CREATE THE ORACLE LOGIN PART OF THE SPAWN STRING( NO SPACES BETW. PARAMS)
C
      CALL TFSTRCAT( F_ACCOUNT, '/', STRING)
      CALL TFSTRCAT( STRING, F_PASSWORD, ORASTRING)
      CALL TFSTRCAT( ORASTRING, '@', STRING)
      CALL TFSTRCAT( STRING, F_DATABASE, ORASTRING)
C
C 01/04/89 GS - Use HOG_SPAWN instead of HOG_SYSCOM for portability.
C SET UP THE COMMAND ARGUMENT STRING FOR THE HO_SPAWN COMMAND 
C DO STRING CONCATS SINCE BLANKS AT END OF FIRST STRING ARE REMOVED
C WHEN THE STRINGS ARE ADDED TOGETHER (WE WANT ONLY 1 BLANK BETWEEN PARAMS)
C
      WRITE (UNIT=XMAXSTR, FMT='(F9.3)') PXSIZE
      WRITE (UNIT=YMAXSTR, FMT='(F9.3)') PYSIZE 
C      
C 01/03/89 GS - inserted param_file as 2nd argument
C
      CALL TFSTRCAT( '"'//ORASTRING, '",'//PARAM_FILE, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//NEUTRAL_FILE, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//PROJECT, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//PDRIVER, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//PQUEUE, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//XMAXSTR, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//YMAXSTR, COMMAND_ARGS )
C
C SPAWN THE BATCH JOB 
C
      CALL WIGQFRONT(IFRONT)
      SPAWN_TYPE = 1
      CALL HOG_SPAWN (SPAWN_TYPE, COMMAND_FILE, COMMAND_ARGS, USER)
      CALL WIGOPCD(IFRONT)

      RETURN
      END
C END-CODE
