C  DEC/CMS REPLACEMENT HISTORY, Element MO_FLT_DLG.FOR
C  *5     6-NOV-1989 09:59:31 GILLESPIE "(SPR 30) Change mog*resource to amg*resource"
C  *4     6-NOV-1989 09:04:31 PURNA "(SPR 30) fix mo_ calls to mog_"
C  *3     3-NOV-1989 12:01:33 GILLESPIE "(SPR 30) Change entry points for new n-List nomenclature"
C  *2    19-SEP-1989 10:13:07 GORDON "(PURNA) GULF MODS UNDER SPR 100"
C  *1    10-AUG-1989 18:48:25 VINCE "Fortran code after UNIX mods"
C  DEC/CMS REPLACEMENT HISTORY, Element MO_FLT_DLG.FOR
C******************************************************************************
C
C                Copyright Finder Graphics Systems, Inc. 1989
C		   Unpublished -- All rights reserved
C
C THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Finder Graphics Systems, Inc AND MAY
C CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
C DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
C MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF
C
C			Finder Graphics Systems, Inc.
C			201 Tamal Vista Blvd
C			Corte Madera, California 94925
C			(415) 927-0100
C
C (The above notice does not constitute an admission of publication or
C unrestricted dissemination of the work)
C
C******************************************************************************
C
      SUBROUTINE MO_TRACE_DIALOG(WAVELET_TYPE,NOISE,USE_NOISE,
     X                              IDISP, IPHASE, ICANCEL)
C ***********************************************************************
C
C    ROUTINE:   MO_TRACE_DIALOG
C
C    FUNCTION:  TO ALLOW THE USER TO SELECT A FILTER WAVELET TO CONVOLVE
C               WITH THE COMPUTED MODEL TRACES TO CREATE A SYNTHETIC 
C               SECTION.
C
C    WAVELETS:  ORMSBY(BANDPASS) 
C               RICKER2 (NEW RICKER WAVELET FROM CGG ROUTINE)
C               BUTTERWORTH
C               HALF-CYCLE COSINE (OLD BANDPASS WAVELET - CURRENTLY
C                                  COMMENTED OUT)
C               USER DEFINED
C
C    PARAMETERS:
C               ICANCEL = WAS CANCEL HIT
C               IPHASE  = PHASE ROTATION ANGLE IN DEGREES
C               IDISP   = = 1 IF DISPLAY SPECTRUM ELSE = 0
C               
C    VARIABLES: WAVELET_STATE = 
C
C
C ***********************************************************************


      INCLUDE 'mo_model.ri'
      INCLUDE 'mo_modcom.i'
      INCLUDE 'sf_defs.i'
      INCLUDE 'esi_am.i'

C
      CHARACTER*255 STRING,HELP
      CHARACTER*10 RES_FILE
      INTEGER       CDLGID,CDITEM,CDVALUE,ID,WAVELET_TYPE,USE_NOISE
      REAL          NOISE
      REAL          ONOISE
      INTEGER       NOISE_STATE,WAVELET_STATE
      INTEGER       PHASE

      SAVE          NOISE_STATE, WAVELET_STATE, ONOISE, PHASE

      DATA          HELP/'MO_TRACES'/
      DATA	    RES_FILE/'MO_MODEL'/
      DATA          ONOISE/10.0/
      DATA          NOISE_STATE/0/,WAVELET_STATE/ORMSBY_WAV/
      DATA          PHASE/0/

      ICANCEL      = 0
      ITEMP_NSTATE = NOISE_STATE
      ITEMP_WSTATE = WAVELET_STATE
      TNOISE       = ONOISE
      IDISP        = 1
      IPHASE       = PHASE

C
C DEFINE DIALOG BOX
C
      CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,MODELT,0,ID,0)
C
C      FILL IT UP
C
      WRITE(STRING,'(F6.2)')TNOISE
      CALL STRLJ(STRING)
      CALL WIGSCDT(ID, MODELT_NOISE, STRING)

      WRITE(STRING,'(I4)') PHASE
      CALL STRLJ(STRING)
      CALL WIGSCDT(ID, MODELT_PHASE, STRING)

      CALL WIGSCDV(ID, MODELT_DISPLAY, 1)


C
C  SET UP THE DEFAULT WAVELET 
C

      IF (WAVELET_STATE.EQ.RICKER_WAV) THEN
          CALL WIGSCDV(ID, MODELT_RICKER, 1)

      ELSEIF (WAVELET_STATE.EQ.BUTTERWORTH_WAV) THEN
          CALL WIGSCDV(ID, MODELT_BUTTER, 1)

      ELSEIF (WAVELET_STATE.EQ.ORMSBY_WAV) THEN
          CALL WIGSCDV(ID, MODELT_ORMSBY, 1)

      ELSE
          CALL WIGSCDV(ID, MODELT_USERDEF, 1)
      ENDIF


      CALL WIGSCDV(ID,MODELT_USENOISE,NOISE_STATE)
      CALL WIGOPCD(ID)
100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)



C
      IF(CDITEM.EQ.MODELT_OK)GOTO 999
      IF(CDITEM.EQ.MODELT_CANCEL) THEN
          ICANCEL=1
          GOTO 9999
      ENDIF


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C HALF CYCLE COSINE (BANDPASS) WAVELET
C
C      IF(CDITEM.EQ.MODELT_COSINE)THEN
C          ITEMP_WSTATE = COSINE_WAV
C          GOTO 100
C      ENDIF
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C RICKER WAVELET
C
C      IF(CDITEM.EQ.MODELT_RICKER)THEN
C          ITEMP_WSTATE = 1
C          GOTO 100
C      ENDIF
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C
C RICKER WAVELET (NEW CGG VERSION)
C

      IF(CDITEM.EQ.MODELT_RICKER)THEN
          ITEMP_WSTATE = RICKER_WAV
          GOTO 100
      ENDIF


C
C BUTTERWORTH WAVELET
C
      IF(CDITEM.EQ.MODELT_BUTTER) THEN
          ITEMP_WSTATE = BUTTERWORTH_WAV
          GOTO 100
      ENDIF

C
C ORMSBY BANDPASS WAVELET
C
      IF(CDITEM.EQ.MODELT_ORMSBY) THEN
          ITEMP_WSTATE = ORMSBY_WAV
          GOTO 100
      ENDIF


C
C USER DEFINED WAVELET
C
      IF(CDITEM.EQ.MODELT_USERDEF) THEN
          ITEMP_WSTATE = USER_DEFINED_WAV
          GOTO 100
      ENDIF


C
C USE NOISE
C
      IF(CDITEM.EQ.MODELT_USENOISE)THEN
          IF(ITEMP_NSTATE.EQ.0)THEN
             ITEMP_NSTATE=1
          ELSE
             ITEMP_NSTATE=0
          ENDIF
          GOTO 100
      ENDIF

C
C  DISPLAY THE WAVELET AND SPECTRUM
C
      IF(CDITEM.EQ.MODELT_DISPLAY) THEN
          IF(IDISP.EQ.0)THEN
             IDISP = 1
          ELSE
             IDISP = 0
          ENDIF
          GOTO 100
      ENDIF



999   IF(ITEMP_NSTATE .EQ.1) THEN
          CALL WIGQCCDI(CDLGID,MODELT_NOISE,IDUM,STRING)
          IF(STRING.EQ.' ')THEN
          CALL WIGALERT(1,HELP,'The signal to noise ratio is blank.',
     X 'Please enter a numeric value or turn off use noise check box.')
          GOTO 100
          ENDIF
          READ(STRING,*,ERR=1010)TNOISE
          IF(TNOISE.LT.0.0.OR.TNOISE.GT.100.0)THEN
            CALL WIGALERT(1,HELP,
     X      'The signal to noise ratio is out of range.',
     X      'Valid range is 0.0 to 100.0')
            GOTO 100
          ENDIF
          GOTO 2000

1010      CALL WIGALERT(1,HELP,
     X       'The signal to noise ratio is not numeric.',
     X       'Please enter a numeric value.')
          GOTO 100
C
      ENDIF

2000  NOISE=TNOISE

C
C  CHECK PHASE ROTATION
C
      CALL WIGQCCDI(CDLGID, MODELT_PHASE, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 2050
      READ(STRING,*,ERR = 2050) IPHASE

      IF (IPHASE.LT.-360.OR.IPHASE.GT.360)THEN
            STRING='Phase is out of range. Valid range is -360 TO +360.'
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 3020

2050  STRING = 'Phase is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')



C
C  SET STATE VARIABLES
C

3020  WAVELET_STATE = ITEMP_WSTATE
      NOISE_STATE   = ITEMP_NSTATE
      WAVELET_TYPE  = WAVELET_STATE
      USE_NOISE     = NOISE_STATE
      ONOISE        = TNOISE
      PHASE         = IPHASE


9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END











      SUBROUTINE MO_ORMSBY_DIALOG( LCUTFR, LPASSFR, HCUTFR, HPASSFR,
     X                             ISAMP, LENGTH, IBTYPE, ICANCEL)
C***********************************************************************
C
C  ROUTINE:   MO_ORMSBY_DIALOG
C
C  FUNCTION:  GET AND CHECK THE FILTER PARAMETERS FOR AN ORMSBY 
C             BANDPASS FILTER
C
C  VARIABLES: 
C             LCUTFR    = LOW CUT FREQUENCY (100% ATTENUATION)
C             LPASSFR   = LOW PASS FREQUENCY (100% AMPLITUDE)
C             HPASSFR   = HIGH PASS FREQUENCY (100% AMPLITUDE)
C             HCUTFR    = HIGH CUT FREQUENCY (100% ATTENUATION)
C             ISAMP     = WAVELET SAMPLE RATE
C             LENGTH    = WAVELET LENGTH IN MSEC
C             IBTYPE    = FILTER TYPE: =   BANDPASS
C                                      OR  LOWPASS
C                                      OR  HIGHPASS
C              
C             ICANCEL   = 0 IF NOT CANCEL HIT, 1 IF CANCEL IS HIT
C
C***********************************************************************

      INCLUDE 'mo_model.ri'
      INCLUDE 'sf_defs.i'
      INCLUDE 'esi_am.i'
C
      CHARACTER*255 STRING,HELP
      CHARACTER*10 RES_FILE
      INTEGER       CDLGID,CDITEM,CDVALUE
      INTEGER       LCUTFR, LPASSFR, HPASSFR, HCUTFR
      INTEGER       ILCUTFR,ILPASSFR,IHPASSFR,IHCUTFR
      INTEGER       IHBTYPE, ILENGTH

      SAVE          ILCUTFR, ILPASSFR, IHPASSFR, IHCUTFR, IHBTYPE
      SAVE          ILENGTH

      DATA          HELP/'MO_ORMSBY'/
      DATA	    RES_FILE/'MO_MODEL'/
      DATA          ILCUTFR/5/,ILPASSFR/15/,IHPASSFR/55/,IHCUTFR/70/
      DATA          IHBTYPE/ORMSBY_BPASS/, ILENGTH/400/

C
C  DEFINE MAX ALLOWABLE FREQUENCY (NYQUIST) ACCORDING TO SAMP. RATE
C  AND LENGTH LIMITS
C

      NYQFR = 1000 / ( 2 * ISAMP)
      MIN_LENGTH   = 40
      MAX_LENGTH   = 500

C
C  SET SAVE VARIABLES SO WILL HAVE SAME PARAMETERS ON DIALOG REENTRY
C

      LCUTFR  = ILCUTFR
      LPASSFR = ILPASSFR
      HPASSFR = IHPASSFR
      HCUTFR  = IHCUTFR
      IBTYPE  = IHBTYPE
      LENGTH  = ILENGTH

C
C  OPEN THE DIALOG
C
      CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,MO_ORMSBY,0,ID,0)
      CALL WIGOPCD(ID)

C
C  DEFAULT FILTER TYPE 
C
      IF (IBTYPE.EQ.ORMSBY_LPASS) THEN
         CALL WIGSCDV(ID, MO_ORMSBY_LOWPASS, 1)
      ELSE IF (IBTYPE.EQ.ORMSBY_HPASS) THEN
         CALL WIGSCDV(ID, MO_ORMSBY_HIGHPASS, 1)
      ELSE 
         CALL WIGSCDV(ID, MO_ORMSBY_BANDPASS, 1)
      ENDIF

C
C  SET UP DEFAULT BANDPASS FREQUENCIES FROM SAVED VALUES
C

      WRITE(STRING,'(I5)') LCUTFR
      CALL WIGSCDT(ID, MO_ORMSBY_LCUT, STRING)
      WRITE(STRING,'(I5)') LPASSFR
      CALL WIGSCDT(ID, MO_ORMSBY_LPASS, STRING)
      WRITE(STRING,'(I5)') HPASSFR
      CALL WIGSCDT(ID, MO_ORMSBY_HPASS, STRING)
      WRITE(STRING,'(I5)') HCUTFR
      CALL WIGSCDT(ID, MO_ORMSBY_HCUT, STRING)
      WRITE(STRING,'(I5)') LENGTH
      CALL WIGSCDT(ID, MO_ORMSBY_LENGTH, STRING)

      ICANCEL=0

100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)

C
C  SET FILTER TYPE IF HAS CHANGED
C

      IF (CDITEM.EQ.MO_ORMSBY_BANDPASS)  IBTYPE = ORMSBY_BPASS
      IF (CDITEM.EQ.MO_ORMSBY_LOWPASS)   IBTYPE = ORMSBY_LPASS
      IF (CDITEM.EQ.MO_ORMSBY_HIGHPASS)  IBTYPE = ORMSBY_HPASS


      IF (CDITEM.EQ.MO_ORMSBY_OK) GOTO 999
      IF (CDITEM.EQ.MO_ORMSBY_CANCEL) THEN
            ICANCEL=1
            GOTO 9999
      ENDIF

      GOTO 100

C
C   CHECK THE LOW CUT FREQUENCY (IF BANDPASS OR HIGHPASS)
C

999   IF (IBTYPE.EQ.ORMSBY_BPASS.OR.IBTYPE.EQ.ORMSBY_HPASS) THEN

         CALL WIGQCCDI(CDLGID, MO_ORMSBY_LCUT, IDUM, STRING)
         IF(STRING.EQ.' ') GOTO 1010
         READ(STRING,*,ERR=1010) LCUTFR

         MAX_FREQ = 100
         MIN_FREQ = 0

         IF ( LCUTFR.LT.MIN_FREQ.OR.LCUTFR.GT.MAX_FREQ) THEN
            STRING = 'Low Cut Frequency is out of Range'
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
         ENDIF
         GOTO 1020

1010     STRING = ' Low Cut Frequency is not an integer'
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100

      ENDIF


C
C   CHECK THE LOW PASS FREQUENCY (IF BANDPASS OR HIGHPASS)
C


1020  IF (IBTYPE.EQ.ORMSBY_BPASS.OR.IBTYPE.EQ.ORMSBY_HPASS) THEN

         CALL WIGQCCDI(CDLGID, MO_ORMSBY_LPASS, IDUM, STRING)
         IF(STRING.EQ.' ') GOTO 1030
         READ(STRING,*,ERR = 1030) LPASSFR

         MAX_FREQ = 100
         MIN_FREQ = LCUTFR + 2

         IF( LPASSFR.LT.MIN_FREQ.OR.LPASSFR.GT.MAX_FREQ) THEN
            STRING = 'Low Pass Frequency is out of Range'
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
         ENDIF
         GOTO 1120

1030     STRING = 'Low Pass Frequency is not an integer.'
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100

      ENDIF      


C
C   CHECK HIGH PASS FREQUENCY (IF BANDPASS OR LOWPASS FILTER)
C

1120  IF (IBTYPE.EQ.ORMSBY_BPASS.OR.IBTYPE.EQ.ORMSBY_LPASS) THEN

        CALL WIGQCCDI(CDLGID, MO_ORMSBY_HPASS, IDUM, STRING)
        IF(STRING.EQ.' ') GOTO 1130
        READ(STRING,*, ERR = 1130) HPASSFR

        IF (IBTYPE.EQ.ORMSBY_BPASS) THEN
           MAX_FREQ = NYQFR - 10
           MIN_FREQ = LPASSFR + 1
        ELSE IF (IBTYPE.EQ.ORMSBY_LPASS) THEN
           MAX_FREQ = NYQFR - 10
           MIN_FREQ = 0
        ENDIF

        IF( HPASSFR.LT.MIN_FREQ.OR.HPASSFR.GT.MAX_FREQ) THEN
           STRING = 'High Pass frequency is out of Range'
           CALL WIGALERT(1,HELP,STRING,' ')
           GOTO 100
        ENDIF

        GOTO 1140

1130    STRING = 'High Pass frequency is not an integer.'
        CALL WIGALERT(1,HELP,STRING,' ')
        GOTO 100

      ENDIF


C
C   CHECK THE HIGH CUT FREQUENCY (IF BANDPASS OR LOWPASS FILTER)
C

1140  IF (IBTYPE.EQ.ORMSBY_BPASS.OR.IBTYPE.EQ.ORMSBY_LPASS) THEN
 
         CALL WIGQCCDI(CDLGID, MO_ORMSBY_HCUT, IDUM, STRING)
         IF(STRING.EQ.' ')GOTO 1230
         READ(STRING,*,ERR = 1230) HCUTFR

         MAX_FREQ = NYQFR
         MIN_FREQ = HPASSFR + 1

         IF ( HCUTFR.LT.MIN_FREQ.OR.HCUTFR.GT.MAX_FREQ) THEN
               STRING='High Cut frequency out of Range'
               CALL WIGALERT(1,HELP,STRING,' ')
               GOTO 100
         ENDIF

         GOTO 1320

1230     STRING = 'High Cut frequency is not an integer.'
         CALL WIGALERT(1,HELP,STRING,' ')
         GOTO 100

      ENDIF


C
C  CHECK FILTER LENGTH (IN MSEC)
C

1320  CALL WIGQCCDI(CDLGID, MO_ORMSBY_LENGTH, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 1350
      READ(STRING,*,ERR = 1350) LENGTH
      IF (LENGTH.LT.MIN_LENGTH.OR.LENGTH.GT.MAX_LENGTH)THEN
            NERR=NERR+1
            WRITE (STRING, 1348) MIN_LENGTH, MAX_LENGTH
1348  FORMAT ('Length is out of range. Valid range is ', I3,
     X         ' - ',I3)
            CALL WIGALERT(1,HELP,STRING,' ')
      ENDIF
      GOTO 1500

1350  STRING = 'Length is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100


C
C  NOW CHECK THAT THE ROLLOFFS ARE NOT TOO STEEP FOR THE REQUESTED 
C    FILTER LENGTH
C

1500  IF (IBTYPE.EQ.ORMSBY_BPASS) THEN
        DFMIN = AMIN0( LPASSFR - LCUTFR, HCUTFR - HPASSFR)
      ELSE IF (IBTYPE.EQ.ORMSBY_HPASS) THEN
        DFMIN = LPASSFR - LCUTFR 
      ELSE
        DFMIN = HCUTFR - HPASSFR
      ENDIF
      MIN_LENGTH = 3000 / DFMIN

      IF (LENGTH.LT.MIN_LENGTH) THEN

            WRITE (STRING, 7048) MIN_LENGTH
7048  FORMAT ('Rolloff is too steep. Min length for this filter = ',
     X         I3, '  -Increase length or change filter design')

        CALL WIGALERT(1,HELP,STRING,' ')
        GOTO 100
      ENDIF



C
C  RESET SAVE VALUES SO WILL BE SAME WHEN REENTERING THE PROGRAM
C
      ILCUTFR  = LCUTFR
      ILPASSFR = LPASSFR
      IHPASSFR = HPASSFR
      IHCUTFR  = HCUTFR
      IHBTYPE  = IBTYPE
      ILENGTH  = LENGTH
   
9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END










      SUBROUTINE MO_BUTTWRTH_DIALOG( LPASSFR, LROFF, HPASSFR, HROFF,
     X                               LENGTH, ISAMP, ICANCEL)
C***********************************************************************
C
C  ROUTINE:   MO_BUTTWRTH_DIALOG
C
C  FUNCTION:  GET AND CHECK THE FILTER PARAMETERS FOR A BUTTERWORTH 
C             BANDPASS FILTER
C
C  VARIABLES: 
C             LPASSFR   = LOW PASS FREQUENCY (100% AMPLITUDE)
C             LROFF     = ROLLOFF SLOPE IN DB/OCTAVE ON THE HIGH SIDE
C             HPASSFR   = HIGH PASS FREQUENCY (100% AMPLITUDE)
C             HROFF     = ROLLOFF SLOPE IN DB/OCTAVE ON THE HIGH SIDE
C             LENGTH    = LENGTH OF THE WAVELET IN MSEC
C             ISAMP     = WAVELET SAMPLE RATE
C             ICANCEL   = 0 IF NOT CANCEL HIT, 1 IF CANCEL IS HIT
C
C***********************************************************************

      INCLUDE 'mo_model.ri'
      INCLUDE 'esi_am.i'
C
      CHARACTER*255 STRING,HELP
      CHARACTER*10 RES_FILE
      INTEGER       CDLGID,CDITEM,CDVALUE
      INTEGER       LPASSFR, LROFF, HPASSFR, HROFF
      INTEGER       ILPASSFR,ILROFF,IHPASSFR,IHROFF
      INTEGER       ILENGTH

      SAVE          ILPASSFR, ILROFF, IHPASSFR, IHROFF, ILENGTH

      DATA          HELP/'MO_ORMSBY'/
      DATA	    RES_FILE/'MO_MODEL'/
      DATA          ILPASSFR/15/,ILROFF/18/,IHPASSFR/60/,IHROFF/36/
      DATA          ILENGTH/400/

C
C  SET SAVE VARIABLES SO WILL HAVE SAME PARAMETERS ON DIALOG REENTRY
C

      LPASSFR = ILPASSFR
      LROFF   = ILROFF
      HPASSFR = IHPASSFR
      HROFF   = IHROFF      
      LENGTH  = ILENGTH

C
C  DEFINE MAX ALLOWABLE FREQUENCY (NYQUIST) ACCORDING TO SAMP. RATE
C   AND THE MAXIMUM ROLLOFF ALLOWED (IN DB/OCTAVE), MAX. LENGTH
C
      MAXFR = 1000 / ( 2 * ISAMP)

      MINROFF = 6
      MAXROFF = 90
      MIN_LENGTH   = 40
      MAX_LENGTH   = 500

C
C  OPEN THE DIALOG BOX
C

      CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,MO_BUTTERWORTH,
     X 0,ID,0)
      CALL WIGOPCD(ID)

C
C  SET UP DEFAULT BANDPASS FREQUENCIES AND ROLLOFFS
C

      WRITE(STRING,'(I5)') LPASSFR
      CALL WIGSCDT(ID, MO_BUTTWRTH_LPASS, STRING)

      WRITE(STRING,'(I5)') LROFF
      CALL WIGSCDT(ID, MO_BUTTWRTH_LROFF, STRING)

      WRITE(STRING,'(I5)') HPASSFR
      CALL WIGSCDT(ID, MO_BUTTWRTH_HPASS, STRING)

      WRITE(STRING,'(I5)') HROFF
      CALL WIGSCDT(ID, MO_BUTTWRTH_HROFF, STRING)

      WRITE(STRING,'(I5)') LENGTH
      CALL WIGSCDT(ID, MO_BUTTWRTH_LENGTH, STRING)

      ICANCEL=0


100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)

      IF (CDITEM.EQ.MO_BUTTWRTH_OK)GOTO 999
      IF (CDITEM.EQ.MO_BUTTWRTH_CANCEL) THEN
            ICANCEL=1
            GOTO 9999
      ENDIF

      GOTO 100

C
C  NOW CHECK THE FREQUENCIES AND ROLLOFFS ENTERED BY THE ABUSER
C  LOW PASS FIRST
C

999   CALL WIGQCCDI(CDLGID, MO_BUTTWRTH_LPASS, IDUM, STRING)
      IF(STRING.EQ.' ') GOTO 1010
      READ(STRING,*,ERR=1010) LPASSFR
      IF ( LPASSFR.LT.1.OR.LPASSFR.GT.MAXFR) THEN
            STRING = ' Invalid Low Pass frequency.'
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 1020

1010  STRING = ' Low Pass frequency is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100

C
C  CHECK THE LOW PASS ROLLOFF
C

1020  CALL WIGQCCDI(CDLGID, MO_BUTTWRTH_LROFF, IDUM, STRING)
      IF(STRING.EQ.' ') GOTO 1030
      READ(STRING,*,ERR = 1030) LROFF
      IF( LROFF.LT.MINROFF.OR.LROFF.GT.MAXROFF) THEN
            WRITE (STRING,1022) MINROFF, MAXROFF
1022        FORMAT( 'Invalid Rolloff, Range = ',I3, ', ',I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 1040

1030  STRING = 'Low Side Rolloff is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100

C
C  CHECK THE HIGH PASS FREQUENCY
C

1040  CALL WIGQCCDI(CDLGID, MO_BUTTWRTH_HPASS, IDUM, STRING)
      IF(STRING.EQ.' ') GOTO 1130
      READ(STRING,*, ERR = 1130) HPASSFR

      IF ( HPASSFR.GT.MAXFR) THEN
            WRITE (STRING,1042)  MAXFR
1042        FORMAT( 'High Pass Freq. out of range - Maximum= ',I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF

      IF ( HPASSFR.LT.LPASSFR) THEN
            STRING='High Pass Freq. must be greater than Low Pass Freq.'
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 1180

1130  STRING = 'High Pass frequency is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100

C
C  CHECK THE HIGH PASS ROLLOFF
C

1180  CALL WIGQCCDI(CDLGID, MO_BUTTWRTH_HROFF, IDUM, STRING)
      IF(STRING.EQ.' ')GOTO 1230
      READ(STRING,*,ERR = 1230) HROFF
      IF( HROFF.LT.MINROFF.OR.HROFF.GT.MAXROFF) THEN
            WRITE (STRING,1182) MINROFF, MAXROFF
1182        FORMAT( 'Invalid Rolloff, Range = ',I3, ', ',I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 1320

1230  STRING = 'High Side Rolloff is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100

C
C  CHECK FILTER LENGTH (IN MSEC)
C

1320  CALL WIGQCCDI(CDLGID, MO_BUTTWRTH_LENGTH, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 1350
      READ(STRING,*,ERR = 1350) LENGTH
      IF (LENGTH.LT.MIN_LENGTH.OR.LENGTH.GT.MAX_LENGTH) THEN
            WRITE (STRING, 1348) MIN_LENGTH, MAX_LENGTH
1348  FORMAT ('Length is out of range. Valid range is ', I3,
     X         ' - ',I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 5000

1350  STRING = 'Length is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100


C
C  RESET SAVE VALUES TO NEW ONES
C

5000  ILCUTFR  = LCUTFR
      ILROFF   = LROFF
      IHPASSFR = HPASSFR
      IHROFF   = HROFF
      ILENGTH  = LENGTH
C
C  IF MAXIMUM ROLLOFF GT 45 THEN GIVE THE USER A WARNING
C

      MAXROFF = AMAX0( LROFF, HROFF)
      IF (MAXROFF.GT.45) THEN
        STRING = 'For high rolloff values the Filter length may be too s
     Xhort - check the Frequency Spectrum'
        CALL WIGALERT(1,HELP,STRING,' ')
      ENDIF         
   
9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END










      SUBROUTINE MO_RICKER_DIALOG2( PREDF, LENGTH, ISAMP, ICANCEL)
C***********************************************************************
C
C    ROUTINE:  MO_RICKER_DIALOG2
C
C    FUNCTION: RICKER FILTER PARAMETERS DIALOG BOX  ( NEW CGG DEFINITION)
C
C
C    PREDF   =  PREDOMINANT FREQUENCY (INVERSE OF PSEUDO PERIOD)
C    ISAMP   =  SAMPLE RATE OF WAVELET
C    LENGTH  =  LENGTH OF WAVELET(SHOULD BE AT LEAST 2 * PSEUDO PERIOD)
C    ICANCEL =  0 IF NOT CANCEL HIT, 1 IF CANCEL IS HIT
C
C***********************************************************************

      INCLUDE 'mo_model.ri'
      INCLUDE 'esi_am.i'

      CHARACTER*255  STRING,HELP
      CHARACTER*10 RES_FILE
      INTEGER        CDLGID,CDITEM,CDVALUE
      INTEGER        PREDF
      INTEGER        ILENGTH, IPREDF

      SAVE           ILENGTH, IPREDF

      DATA           HELP/'MO_RICKER'/
      DATA	    RES_FILE/'MO_MODEL'/
      DATA           ILENGTH/100/, IPREDF/30/

C
C  SET DEFAULTS FROM SAVE VARIABLES
C
      PREDF  = IPREDF 
      LENGTH = ILENGTH

C
C  DEFINE MAXIMUM ALLOWABLE PREDOMINANT FREQUENCY AND LENGTH
C

      MINFR = 8/ISAMP
      MAXFR = 60
      MAX_LENGTH = 500
C
C  OPEN THE DIALOG BOX
C

      CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,MO_RICKER2,0,ID,0)
      CALL WIGOPCD(ID)

      WRITE(STRING,'(I5)') PREDF
      CALL WIGSCDT(ID, MO_RICKER2_PREDF,STRING)

      WRITE(STRING,'(I5)') LENGTH
      CALL WIGSCDT(ID, MO_RICKER2_LENGTH,STRING)

      ICANCEL=0


100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)

      IF(CDITEM.EQ.MO_RICKER2_OK)GOTO 999
      IF(CDITEM.EQ.MO_RICKER2_CANCEL)THEN
            ICANCEL=1
            GOTO 9999
      ENDIF
      GOTO 100


999   CALL WIGQCCDI(CDLGID, MO_RICKER2_PREDF, IDUM, STRING)
      IF(STRING.EQ.' ')GOTO 1050
      READ(STRING,*,ERR=1050) PREDF

      IF(PREDF.LT.MINFR.OR.PREDF.GT.MAXFR) THEN
            WRITE(STRING,43) MINFR,MAXFR
43    FORMAT('Freq is out of range. Valid range is',I3,' -',I4)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF

      GOTO 1320

1050  STRING = 'Predominant frequency is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100

C
C  CHECK FILTER LENGTH (IN MSEC)
C

1320  CALL WIGQCCDI(CDLGID, MO_RICKER2_LENGTH, IDUM, STRING)
      IF (STRING.EQ.' ') GOTO 1350
      READ(STRING,*,ERR = 1350) LENGTH

      MIN_LENGTH = 3000 / PREDF

      IF(LENGTH.LT.MIN_LENGTH) THEN
        STRING = 'Filter Length must be at least = 3000/pred. freq.'
        CALL WIGALERT(1,HELP,STRING,' ')
        GOTO 100
      ENDIF

      IF (LENGTH.GT.MAX_LENGTH) THEN
            WRITE (STRING, 1348) MAX_LENGTH
1348  FORMAT ('Length is out of range. Maximum Length is: ', I3)
            CALL WIGALERT(1,HELP,STRING,' ')
            GOTO 100
      ENDIF
      GOTO 5000

1350  STRING = 'Length is not an integer.'
      CALL WIGALERT(1,HELP,STRING,' ')
      GOTO 100


C
C  RESET SAVE PARAMETERS AND GET OOUT
C

5000  ILENGTH = LENGTH
      IPREDF  = PREDF


9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END










      SUBROUTINE  MO_USER_DEF_DIALOG( WAVELET, LENGTH, ISAMP,
     X                                ICANCEL)
C***********************************************************************
C
C    ROUTINE:   MO_USER_DEF_DIALOG
C
C    FUNCTION:  DIALOG BOX FOR USER DEFINED WAVELET.  THE USER MANUALLY
C               ENTERS INTEGER VALUES FOR A FILTER WAVELET, SEPARATED
C               BY COMMAS.  THE RESULTING STRING IS PARSED, CHECKED, 
C               AND THE VALUES STORED IN THE WAVELET BUFFER.
C
C    WAVELET     =  WAVELET BUFFER
C    LENGTH      =  LENGTH OF WAVELET IN MSEC
C    ISAMP       =  SAMPLE RATE OF WAVELET
C    NUM_SAMPLES =  NUMBER OF VALUES IN WAVELET BUFFER
C    ICANCEL     =  0 IF NOT CANCEL HIT, 1 IF CANCEL IS HIT
C
C***********************************************************************

      INCLUDE 'mo_model.ri'
      INCLUDE 'esi_am.i'

      DIMENSION      WAVELET(1)
      CHARACTER*501  STRING
      CHARACTER*10 RES_FILE
      CHARACTER*201  STRING2, HELP
      INTEGER        CDLGID,CDITEM,CDVALUE

      SAVE           STRING

      DATA          STRING/' '/
      DATA          HELP/'MO_USERDEF'/
      DATA	    RES_FILE/'MO_MODEL'/
C
C  OPEN THE DIALOG BOX
C

      CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,MO_USER_DEF,0,ID,0)
      CALL WIGOPCD(ID)

      CALL WIGSCDT(ID, MO_USER_DEF_DATA, STRING)

      ICANCEL=0


100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)

      IF (CDITEM.EQ.MO_USER_DEF_OK) GOTO 999
      IF (CDITEM.EQ.MO_USER_DEF_CANCEL) THEN
            ICANCEL=1
            GOTO 9999
      ENDIF
      GOTO 100



C
C  OKAY PRESSED, PARSE THE STRING AND CHECK VALUES
C

999   CALL WIGQCCDI(CDLGID, MO_USER_DEF_DATA, IDUM, STRING)

      CALL SF_PARSE_STRING( STRING, WAVELET, NUM_SAMPLES, IERR)

      IF (IERR.EQ.-1) THEN
         STRING2 = 'Illegal character in string - only digits, blanks, o
     Xr commas are allowed'
         CALL WIGALERT(1, HELP, STRING2,' ')
         GOTO 100
      ENDIF         

      IF (IERR.EQ.-2) THEN
         STRING2 = 'Wavelet values have a maximum size of 8 digits'
         CALL WIGALERT(1, HELP, STRING2,' ')
         GOTO 100
      ENDIF         

      IF (NUM_SAMPLES.LT.3) THEN
         STRING2 = 'A minimum of 3 samples is required for a Wavelet'
         CALL WIGALERT(1, HELP, STRING2,' ')
         GOTO 100
      ENDIF         

C
C  NORMALIZE THE WAVELET AND COMPUTE THE LENGTH
C
      CALL SF_NORM( WAVELET, NUM_SAMPLES)     

      LENGTH = (NUM_SAMPLES - 1) * ISAMP


9999  CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END
