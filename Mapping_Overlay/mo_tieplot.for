C  DEC/CMS REPLACEMENT HISTORY, Element MO_TIEPLOT.FOR
C  *7     1-MAR-1990 17:19:18 GILLESPIE "(SPR 1) Remove unused variables"
C  *6    18-DEC-1989 10:47:00 GILLESPIE "(SPR 5077) Use WMG_GPL"
C  *5     6-NOV-1989 16:49:11 GILLESPIE "(SPR 30) Get 'glue' entry points straightened out"
C  *4     3-NOV-1989 12:02:20 GILLESPIE "(SPR 30) Change entry points for new n-List nomenclature"
C  *3    17-OCT-1989 08:55:31 GORDON "(SPR 4999) Update color selection method"
C  *2    19-SEP-1989 10:14:18 GORDON "(PURNA) GULF MODS UNDER SPR 100"
C  *1    10-AUG-1989 18:49:19 VINCE "Fortran code after UNIX mods"
C  DEC/CMS REPLACEMENT HISTORY, Element MO_TIEPLOT.FOR
C******************************************************************************
C
C                Copyright Exploration Systems, Inc. 1989
C		   Unpublished -- All rights reserved
C
C THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc AND MAY
C CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
C DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
C MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF
C
C			Exploration Systems, Inc.
C			579 Market Street
C			San Francisco, CA  USA 94105
C			(415) 974-1600
C
C (The above notice does not constitute an admission of publication or
C unrestricted dissemination of the work)
C
C******************************************************************************
C

      SUBROUTINE MO_TIEPLOT(MO_TYPE,TIEFILE,MO_NAME,ICANCEL)
C *****************************************************************************
C
C    ROUTINE:     MO_TIEPLOT
C
C    FUNCTION:    THIS ROUTINE IS THE DRIVER FOR THE WELL TIE PLOT.  A DIALOG
C                 IS BROUGHT UP FOR THE USER TO ENTER PLOT PARAMETERS, THEN
C                 THE TIEPLOT IS DRAWN ON THE SCREEN.  THE USER IS THEN ASKED
C                 IF A BATCH PLOT IS REQUIRED, IF SO A BATCH PLOT IS LAUNCHED
C
C *****************************************************************************

      INCLUDE 'mo_modcom.i'
      INCLUDE 'esi_we_wells.i'

      CHARACTER*(SIZEOF_UWI) WELLS(MAX_WELLS)
      INTEGER                IOR(MAX_WELLS)
      CHARACTER*80           TITLE
      CHARACTER*(*)          MO_TYPE,TIEFILE,MO_NAME
      REAL                   SAMP_RATE

      SAMP_RATE = 2.0
      IFSEGS = 1
C
C USER INPUT STUFF
C
      TITLE=MO_NAME
      CALL MO_TIEPLOT_DIALOG(TITLE, XS1, XS2, DEPTH_SCALE,
     X       IFPLOT_METRIC, IFDATA_METRIC, IDECIM, IPLOT2, ICANCEL)
      IF(ICANCEL.EQ.1)THEN
	    ICANCEL = 0
	    RETURN
      ENDIF
C
C  OPEN FILE AND READ HEADER AND CORRELATION ARRAY
C
      CALL HOGFNT(IUNIT)
      OPEN(IUNIT,FILE=TIEFILE,STATUS='OLD',IOSTAT=ISTAT,
     X   FORM='UNFORMATTED')
      IF(ISTAT.NE.0)RETURN
      READ(IUNIT)NLOGS
      READ(IUNIT)(WELLS(I),I=1,NLOGS),IDATUM,IMAX,NTRCES,NLAY,IFDEN,
     X   NVELPTS,(IOR(I),I=1,NLOGS)
      CLOSE(IUNIT)
C
C SET IF BATCH FLAG TO FALSE
C
      IFBATCH=0
C
C IF PLOTTING TO SCREEN, SEE IF TOO MANY ROWS FOR SEGMENTS
C

	NNPTS = (IMAX/SAMP_RATE * NTRCES * (IFDEN+1)) / IDECIM
	IF(NNPTS.GT. 50000)THEN
	      IFSEGS = 0
	      CALL WIGALERT(1,'HELP',
     X'Segments will not be created because of the size of the model.',
     X'Window manager functions (Zoom, Pan etc.) will not be possible.')
	ELSE
	      IFSEGS = 1
	ENDIF
C
C DRAW TIEPLOT ON SCREEN
C

      CALL MO_TIEPLOTTER(MO_TYPE,TIEFILE,TITLE,IFBATCH,
     X         IFSEGS, XS1, XS2, DEPTH_SCALE,
     X         IFPLOT_METRIC, IFDATA_METRIC, IDECIM, IPLOT2)

C
C SEE IF WANT TO LAUNCH BATCH PLOTTING JOB
C
C 12/20/88 GS added IFSEGS argument to call: it's needed
      CALL MO_TIEPLOT_BATCH(MO_TYPE, TIEFILE, TITLE, IFSEGS,
     X                   XS1, XS2, DEPTH_SCALE,
     X                   IFPLOT_METRIC, IFDATA_METRIC, IDECIM, IPLOT2)
      RETURN
      END




C
      SUBROUTINE MO_TIEPLOTTER(MO_TYPE,TIEFILE,MO_NAME,IFBATCH,
     X                     IFSEGS, XS1, XS2, DEPTH_SCALE,
     X                     IFPLOT_METRIC, IFDATA_METRIC, IDEC, IPLOT2)
C ****************************************************************************
C
C     ROUTINE:    MO_TIEPLOTTER
C
C     FUNCTION:   THIS ROUTINE DRAWS THE WELL TIE PLOT IN DEPTH.  THE CREATED
C                 LOG(S) FOR EACH TRACE ARE DRAWN.  IF THE MODEL TYPE IS EMP-
C                 IRICAL, BOTH A SONIC AND DENSITY LOG ARE DRAWN ELSE ONLY THE
C                 SONICS ARE DRAWN. THE MODEL LAYERS ARE OVERLAYED ON TOP OF
C                 THE LOGS. NOTE THAT THE PLOT DISTANCES ARE IN INCHES SO
C                 IF A METRIC PLOT IS REQUIRED A CONVERSION FACTOR IS USED.
C
C
C     PARAMETERS: (INPUT)
C
C                 MO_TYPE      -WELL TIE OR EMPIRICAL
C                 TIEFILE         -FORTRAN FILE OF THE MODEL SONIC (AND
C                                  DENSITY IF PRESENT) TRACES
C                 MO_NAME      -GUESS WHAT?
C                 IFBATCH         -FLAG TO INDICATE IF PLOTTING IN BATCH,
C                                   = 1 IF SO, ELSE = 0
C                 IFSEGS          -IF USING GKS SEGMENTS IS = 1 ELSE = 0
C                 XS1,XS2         -LEFT, RIGHT LOG SCALE PLOT LIMITS
C                                   (MICROSEC/FT OR MICROSEC/MT)
C                 DEPTH_SCALE     -FEET PER INCH (IF PLOT IS METRIC THIS IS
C                                   A VALUE CONVERTED FROM M/CM)
C                 IFPLOT_METRIC   - = 1 IF PLOTTING DEPTH SCALE IN METERS/CM
C                 IFDATA_METRIC   - = 1 IF DATA IS METRIC (IN DEPTH)
C                 IDEC            -LOG PLOT DECIMATION FACTOR
C                 IPLOT2          - = 0 IF PLOTTING SONIC ONLY
C                                   = 1 IF PLOTTING SONIC + DENSITY
C                                   = 2 IF PLOTTING SONIC + AC. IMP.
C
C                 (LOCAL)
C
C                 IMAX            -TOTAL DEPTH FROM TOP TO BOTTOM OF MODEL
C                                     (FEET OR METERS)
C
C ****************************************************************************
      CHARACTER*(*) TIEFILE,MO_NAME,MO_TYPE
        INCLUDE 'sun_gks77.i'
	INCLUDE 'mo_modcom.i'
	INCLUDE 'esi_am.i'
	INCLUDE 'esi_wm.i'
	INCLUDE 'esi_we_wells.i'
C
C GET WELL STUFF
C
      REAL         XS1, XS2, DEPTH_SCALE
      CHARACTER    WELLNM*(SIZEOF_WNAME),OPER*(SIZEOF_OPER)
      CHARACTER    STATE*(SIZEOF_STATE),COUNTY*(SIZEOF_COUNTY)
      CHARACTER    RANGD*2,TSHPD*2,OLOC*60
      CHARACTER*(SIZEOF_UWI)    WELLS(MAX_WELLS)
      CHARACTER    TWELL*15


      INTEGER HIGHLIGHT, NORMAL, BACKGROUND
      INTEGER      IOR(MAX_WELLS)
C
      CHARACTER*80 TITLE

C
C GKS STUFF
C
      CHARACTER*255 WSTRING2,WSTRING,NAME
      EQUIVALENCE(INAME,NAME)
      REAL    RWINDO(4),CWINDO(4),RVIEWP(4),CVIEWP(4)
      INTEGER ERRIND,TUS,WKID
      DATA WKID/1/
C
C  METAFILE STUFF
C
C
C **** COMMENT OUT METAFILE STUFF, LEAVE IN FOR FUTURE CONVERSION BACK
C
C     INTEGER SEGMENTS(1000)
C     REAL SIZES(6)
C
C MODEL ARRAY INCLUDE
C
      REAL MO_GETDEP
C
      TITLE = MO_NAME
      NAME = 'TIEPLOT'
C
      CALL LUG_TEXT_TO_INDEX( 'COLOR', HIGHLIGHT, 'HIGHLIGHT' )
      CALL LUG_TEXT_TO_INDEX( 'COLOR', NORMAL, 'NORMAL' )
      CALL LUG_TEXT_TO_INDEX( 'COLOR', BACKGROUND, 'BACKGROUND' )
C
C DEFAULT THE DEPTH SAMPLE RATE = 2.0, AND IF BATCH SET THE
C   LOG DECIMATION FACTOR = 1
C
      SAMPRATE = 2.0
      IDECIM = IDEC
      IF (IFBATCH.EQ.1) IDECIM = 1
C
C  OPEN FILE AND READ HEADER AND CORRELATION ARRAY
C
      CALL HOGFNT(IUNIT)
      OPEN(IUNIT,FILE=TIEFILE,STATUS='OLD',IOSTAT=ISTAT,
     X   FORM='UNFORMATTED')
      IF(ISTAT.NE.0)RETURN
      READ(IUNIT)NLOGS
      READ(IUNIT)(WELLS(I),I=1,NLOGS),IDATUM,IMAX,NTRCES,NLAY,IFDEN,
     X   NVELPTS,(IOR(I),I=1,NLOGS)
      NODES = NTRCES*NLAY
      READ(IUNIT)(YOUT(I),I=1,NODES)
      IF(MO_TYPE.EQ.'EMP')THEN
	    READ(IUNIT)(XVEL(I),I=1,NVELPTS)
	    READ(IUNIT)(YVEL(I),I=1,NVELPTS)
	    READ(IUNIT)(HVEL(I),I=1,NVELPTS)
	    READ(IUNIT)(HDEN(I),I=1,NVELPTS)
	    READ(IUNIT)(VVEL(I),I=1,NVELPTS)
	    READ(IUNIT)(VDEN(I),I=1,NVELPTS)
      ENDIF


      NPTS = IMAX/SAMPRATE
      IMAX = IMAX+50

C
C CALCULATE SIZE OF DRAWING (ALL VALUES ARE IN INCHES)
C
C  THE LEFT EDGE OF THE DRAWING IS AT X = -1.75, THE RIGHT EDGE = XLEN+5.25
C  THE BOTTOM EDGE STARTS AT Y = -1.00 AND THE TOP = YLEN+4.00
C  EACH WELL PLOT IS 1.5 INCHES WIDE
C
      X=0.
      XLEN=NTRCES*1.5
      YLEN=IMAX / DEPTH_SCALE
      IF (IFDATA_METRIC.EQ.1) YLEN = IMAX * 3.28083 / DEPTH_SCALE
      XTOT=XLEN+5.25
      YTOT=YLEN+4.

C
C OPEN A WINDOW
C
      CALL WMG_INQ_WKWN(XNDC1,XNDC2,YNDC1,YNDC2)
      IF(IFBATCH.EQ.0)THEN
	  CALL WMG_SET_CURRENT_SCREEN( 2)
      ELSE
	  IWTYPE=0
	  CALL GQWKT(WKID,ERRIND,TUS,RWINDO,CWINDO,RVIEWP,CVIEWP)
	  XNDC1 = 0.
C
C MOD BY JJC 11/11/88, INCLUDE THE DEVICE RATIO IN CASE THE DEVICE IS NOT
C         SQUARE.
C
	  XNDC2 = XNDC2 * (XTOT/CVIEWP(2) )
	  YNDC1=0.
	  YNDC2 = YNDC2 * (YTOT/CVIEWP(4)  )
      ENDIF

      CALL WMGWALLOCATE(IW1,XNDC1,XNDC2,YNDC1,YNDC2,BACKGROUND)

      WSTRING2='MO_TIEPLOT'
      IF(MO_TYPE.EQ.'TIE')THEN
	  WSTRING = 'WELL TIE TIEPLOT '//MO_NAME
      ELSE
	  WSTRING = 'EMPIRICAL TIEPLOT '//MO_NAME
      ENDIF
      CALL WMGOSET(IW1,WM_CLASS_WINDOW,WSTRING2,WSTRING)
      CALL WMGTALLOCATE(ITNR,0.,1.,0.,1.,-1.75,XLEN+5.25,-1.,YLEN+3.)
C
C **** COMMENT OUT METAFILE STUFF, LEAVE IN FOR FUTURE CONVERSION BACK
C
C     SIZES(1)=XNDC1
C     SIZES(2)=XNDC2
C     SIZES(3)=YNDC1
C     SIZES(4)=YNDC2
C     SIZES(5)=XLEN+7
C     SIZES(6)=YLEN+4
C
C RESET TEXT
C
      CALL MO_RESET_TEXT
      CALL GSTXFP(SIMPLX,GSTRKP)
C
C DRAW BORDER
C
      IF(IFBATCH.EQ.0)THEN
	  WSTRING = 'Drawing border and titles.'
	  CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
      IF(IFSEGS.EQ.1)THEN
	  CALL WMGSALLOCATE(ISEGMENT)
	  WSTRING='BORDER AND TITLES'
	  CALL WMGOSET(ISEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
C
C **** COMMENT OUT METAFILE STUFF, LEAVE IN FOR FUTURE CONVERSION BACK
C
C         NUMSEGS = 1
C         SEGMENTS(NUMSEGS)=ISEGMENT
      ENDIF
      XBUF(1)=-1.75
      YBUF(1)=-1.00
      XBUF(2)=-1.75
      YBUF(2)=YLEN+3.0
      XBUF(3)=XLEN+5.25
      YBUF(3)=YLEN+3.0
      XBUF(4)=XLEN+5.25
      YBUF(4)=-1.0
      XBUF(5)=XBUF(1)
      YBUF(5)=YBUF(1)
      CALL GSPLCI(NORMAL)
      CALL WMG_GPL(5,XBUF,YBUF)
      CALL GSCHH(.25)
      Y=YLEN+3.0
      CALL GSTXCI(NORMAL)
      CALL GTX(0.,Y-.5,'EXPLORATION SYSTEMS, INC.')
      CALL GSCHH(.2)
      CALL GTX(0.,Y-.8,'SEISMIC MODELING PACKAGE - SONIC WELL TIE')
      CALL GTX(0.,Y-1.1,TITLE)

C
C LABEL THE SONIC UOMS ON TOP OF DISPLAY
C
      CALL GSCHH(.08)
      CALL GSTXCI(NORMAL)
      IF (IFDATA_METRIC.EQ.1) THEN
	CALL GTX(0.,YLEN + 1.6,'-SONIC (MICROSEC/METER)')
      ELSE
	CALL GTX(0.,YLEN + 1.6,'-SONIC (MICROSEC/FEET)')
      ENDIF
      CALL GSCHH(.08)
      IF (IPLOT2.EQ.1) THEN
	CALL GSTXCI(HIGHLIGHT)
	CALL GTX(0.,YLEN + 1.45,'-DENSITY (GR/CC)')
      ELSEIF (IPLOT2.EQ.2) THEN
	CALL GSTXCI(HIGHLIGHT)
	CALL GTX(0.,YLEN + 1.45,'-ACOUSTIC IMPEDANCE*1000')
      ENDIF

      IF(IFSEGS.EQ.1)THEN
	  CALL WMGSCLOSE(ISEGMENT)
      ENDIF


C
C DRAW DEPTH SCALE
C
      IF(IFBATCH.EQ.0)THEN
	  WSTRING = 'Drawing depth scale.'
	  CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF

      IF(IFSEGS.EQ.1)THEN
	  CALL WMGSALLOCATE(ISEGMENT)
	  WSTRING='DEPTH SCALE'
	  CALL WMGOSET(ISEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
C
C **** COMMENT OUT METAFILE STUFF, LEAVE IN FOR FUTURE CONVERSION BACK
C
C         NUMSEGS = NUMSEGS+1
C         SEGMENTS(NUMSEGS)=ISEGMENT
      ENDIF

C
C GET TOTAL DEPTH INTERVAL AND DATUM IN THE CORRECT UOM
C

      IF (IFDATA_METRIC.EQ.0.AND.IFPLOT_METRIC.EQ.1) THEN
	FPN = IDATUM / 3.28083
	IDEPTH_TOT = IMAX / 3.28083

      ELSEIF (IFDATA_METRIC.EQ.1.AND.IFPLOT_METRIC.EQ.0) THEN
	FPN = IDATUM * 3.28083
	IDEPTH_TOT = IMAX * 3.28083
      ELSE
	FPN = IDATUM
	IDEPTH_TOT = IMAX
      ENDIF

C  GET LOOP INCREMENT

      LOOP = 500
      IF (IDEPTH_TOT.LE.4000) LOOP = 250
      IF (IDEPTH_TOT.LE.1000) LOOP = 100
      IF (IDEPTH_TOT.LE.500)  LOOP = 50

C GET TIMING LINE Y INCREMENT IN INCHES AND THE NUMBER OF LINES

      NTIMES = IDEPTH_TOT / LOOP + 1
      DEPTH_INC = LOOP / DEPTH_SCALE
      IF (IFPLOT_METRIC.EQ.1) DEPTH_INC = LOOP * 3.28083 / DEPTH_SCALE

      CALL GSCHH(0.1)
      CALL GSPLCI(HIGHLIGHT)
      CALL GSTXCI(HIGHLIGHT)

C  LOOP TO DRAW LINES

      DO 100 JK = 1 , NTIMES
	Y = YLEN-(JK-1) * DEPTH_INC
	IF (FPN.GE. 0) THEN
	 JJFPN=FPN+.0001
	ELSE
	 JJFPN=FPN-.0001
	END IF
	WRITE(WSTRING,'(I6)')JJFPN
	CALL STRN2B(WSTRING)
	IF( (-1)**JK .LT.0) THEN
	 CALL GSTXAL(GARITE,GAVNOR)
	 CALL GTX(-.2,Y,WSTRING)
	 XBUF(1)=0.0
	 YBUF(1)=Y
	 XBUF(2)=XLEN
	 YBUF(2)=Y
	 CALL WMG_GPL(2,XBUF,YBUF)
	 CALL GSTXAL(GAHNOR,GAVNOR)
	 CALL GTX(XLEN+.2,Y,WSTRING)
	ELSE
	 CALL GSTXAL(GAHNOR,GAVNOR)
	 CALL GTX(XLEN+.2,Y,WSTRING)
	 XBUF(2)=0.0
	 YBUF(2)=Y
	 XBUF(1)=XLEN
	 YBUF(1)=Y
	 CALL WMG_GPL(2,XBUF,YBUF)
	 CALL GSTXAL(GARITE,GAVNOR)
	 CALL GTX(-.2,Y,WSTRING)
	ENDIF
100   FPN = FPN-LOOP

C
C DRAW BORDER AROUND THE TIE PLOT
C
C      Y = YLEN - IMAX / DEPTH_SCALE
      Y = 0.0
      XBUF(1)=0.0
      YBUF(1)=YLEN
      XBUF(2)=0.0
      YBUF(2)=Y
      XBUF(3)=XLEN
      YBUF(3)=Y
      XBUF(4)=XLEN
      YBUF(4)=YLEN
      CALL WMG_GPL(4,XBUF,YBUF)

C
C LABEL THE DEPTH UOM ON RIGHT SIDE OF PLOT
C
      CALL GSCHH (.10)
      CALL GTX( XLEN + 3.0, YLEN- NTIMES*DEPTH_INC/2.0, 'ELEVATION')
      IF (IFPLOT_METRIC.EQ.1) THEN
	CALL GTX( XLEN + 3.0, YLEN- NTIMES*DEPTH_INC/2- .2, '(MTRS)')
      ELSE
	CALL GTX( XLEN + 3.0, YLEN- NTIMES*DEPTH_INC/2- .2, '(FEET)')
      ENDIF

      IF(IFSEGS.EQ.1)THEN
	  CALL WMGSCLOSE(ISEGMENT)
      ENDIF


C
C DRAW LOGS
C
      CALL GSTXAL(GAHNOR,GAVNOR)
      IF(IFSEGS.EQ.1)THEN
	  CALL WMGGALLOCATE(IGROUP)
	  WSTRING='SONIC LOGS'
	  CALL WMGOSET(IGROUP,WM_CLASS_GROUP,WSTRING2,WSTRING)
	  CALL WMGGCLOSE(IGROUP)
	  IF(IFDEN.EQ.1)THEN
	      CALL WMGGALLOCATE(IDGROUP)
	      WSTRING='DENSITY LOGS'
	      CALL WMGOSET(IDGROUP,WM_CLASS_GROUP,WSTRING2,WSTRING)
	      CALL WMGGCLOSE(IDGROUP)
	  ENDIF
      ENDIF
C
      DO 200 JK = 1 ,NTRCES
      IF(IFBATCH.EQ.0)THEN
	  WRITE(WSTRING,203)JK,NTRCES
203       FORMAT('Drawing sonic ',I5,' of ',I5,'.')
	  CALL STRN2B(WSTRING)
	  CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
      IF(IFSEGS.EQ.1)THEN
	  CALL WMGGOPEN(IGROUP)
	  CALL WMGSALLOCATE(ISEGMENT)
	  WRITE(WSTRING,190)JK
190       FORMAT('SONIC #',I5)
	  CALL STRN2B(WSTRING)
	  CALL WMGOSET(ISEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
C
C **** COMMENT OUT METAFILE STUFF, LEAVE IN FOR FUTURE CONVERSION BACK
C
C             IF(NUMSEGS.LE.1000)THEN
C             NUMSEGS = NUMSEGS+1
C             SEGMENTS(NUMSEGS)=ISEGMENT
C         ENDIF
      ENDIF
C
C READ SONIC,DENSITY LOG TRACE AND PAD END OF VELOCITY LOG WITH EXTRA 25 SAMPLES
C
      READ (IUNIT) (VEL(I),I=1,NPTS)
      IF (IFDEN.EQ.1) READ (IUNIT) (DEN(I),I=1,NPTS)

      DO 234 I = NPTS+1,NPTS+25
234   VEL(I)=VEL(NPTS)

      NTOTAL = NPTS + 25
C
C
C SAVE X POSITIONS OF CORRELATION LINES/
C PUT IN VEL_OR1 SO WE DO NOT HAVE TO MAKE YET ANOTHER ARRAY
C
	DO 432 IM= 1 , NLAY
	   ILC = (JK-1)*NLAY+IM
	   ISUB = MO_GETDEP(JK,IM,NTRCES)+.001
	   IF(ISUB.EQ.IFICT)THEN
		  VEL_OR1(ILC)=FICT
	   ELSE
		  ISUB=ISUB/SAMPRATE + 0.5
		  IF(ISUB.LT.1)ISUB=1
		  IF(ISUB.GT.NTOTAL)ISUB=NTOTAL
	   VEL_OR1(ILC)= (X+1.5) -  ((VEL(ISUB)-XS2)*1.5/(XS1-XS2))
	   ENDIF
432     CONTINUE

      CALL GSTXCI(NORMAL)
      CALL MO_SCLTIC(X,YLEN+.3,1.5,XS1,XS2,
     X .125, .1,'TOP')
      X = X + 1.5
      YINC =YLEN/NTOTAL
      CALL GSPLCI(NORMAL)

C
C STORE LOG COORDINATES IN GPL BUFFERS (DECIMATE IF REQUIRED)
C
      IJ = 1

      DO 151 I = 1 , NTOTAL, IDECIM
	IJ = IJ + 1
	XV = X - (VEL(I) - XS2)* 1.5 / (XS1-XS2)
	IF (I.GT.2.AND.XV.EQ.XBUF(IJ-2)) IJ = IJ -1
	XBUF(IJ) = XV
	YBUF(IJ) = YLEN - (I) * YINC
151   CONTINUE


      XBUF(1)=XBUF(2)
      YBUF(1)=YLEN
      CALL WMG_GPL( IJ, XBUF, YBUF)

      IF(IFDEN.EQ.0)CALL MO_SCLTIC(X-1.5, 0.0,
     X  1.5,XS1,XS2, .125, .1,'BOT')
      IF(IFSEGS.EQ.1)THEN
	  CALL WMGSCLOSE(ISEGMENT)
	  CALL WMGGCLOSE(IGROUP)
      ENDIF

C
C PLOT DENSITY OR ACOUSTIC IMPEDANCE LOG
C
      IF(IFDEN.EQ.0.OR.IPLOT2.EQ.0) GOTO 200
C
      IF(IFBATCH.EQ.0)THEN
	  IF (IPLOT2.EQ.1) THEN
	    WRITE(WSTRING,4203) JK,NTRCES
4203        FORMAT('Drawing density ',I5,' of ',I5,'.')
	    CALL GSPLCI(HIGHLIGHT)
	    CALL GSTXCI(HIGHLIGHT)
	  ELSE
	    WRITE(WSTRING,4204) JK,NTRCES
4204        FORMAT('Drawing Ac. Impedance ',I5,' of ',I5,'.')
	    CALL GSPLCI(HIGHLIGHT)
	    CALL GSTXCI(HIGHLIGHT)
	  ENDIF
	  CALL STRN2B(WSTRING)
	  CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
C
C ALLOCATE SEGMENT
C
      IF(IFSEGS.EQ.1)THEN
	  CALL WMGGOPEN(IDGROUP)
	  CALL WMGSALLOCATE(ISEGMENT)
	  WRITE(WSTRING,4190)JK
4190      FORMAT('DENSITY #',I5)
	  CALL STRN2B(WSTRING)
	  CALL WMGOSET(ISEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
C
C **** COMMENT OUT METAFILE STUFF, LEAVE IN FOR FUTURE CONVERSION BACK
C
C         IF(NUMSEGS.LE.1000)THEN
C             NUMSEGS = NUMSEGS+1
C             SEGMENTS(NUMSEGS)=ISEGMENT
C         ENDIF
      ENDIF


C
C PAD THE DENSITY LOG, BUD
C

      DO 4234 I = NPTS+1,NPTS+25
4234  DEN(I)=DEN(NPTS)

      NTOTAL = NPTS + 25
C
C
      YINC =YLEN/NTOTAL
C      CALL GSPLCI(HIGHLIGHT)

C
C IF PLOTTING AC. IMP., CALCULATE AND STORE BACK IN DENSITY BUFFER
C
      IF (IPLOT2.EQ.2) THEN
	DO 4141 I = 1, NTOTAL
4141    DEN(I) = (1000000.0/VEL(I)) * DEN(I)
      ENDIF
C
C STORE LOG COORDINATES IN GPL BUFFERS (DECIMATE IF REQUIRED)
C
      IF (IPLOT2.EQ.2) THEN
       XVMAX = 1000000.0 * 3.0/XS2
       XVMIN = 1000000.0 * 2.0/XS1
       XVLEN = XVMAX - XVMIN
      ELSE
       XVMIN = 2.0
       XVMAX = 3.0
       XVLEN = 1.0
      ENDIF

      IJ = 1

      DO 4150 I = 1 , NTOTAL, IDECIM
	IJ = IJ + 1
	XV = X + (DEN(I) - XVMAX)*1.5 / XVLEN
	IF (I.GT.2.AND.XV.EQ.XBUF(IJ-2)) IJ = IJ -1
	XBUF(IJ) = XV
	YBUF(IJ) = YLEN - (I)*YINC
4150  CONTINUE

      XBUF(1)=XBUF(2)
      YBUF(1)=YLEN
      CALL WMG_GPL(IJ, XBUF, YBUF)

C      CALL GSTXCI(HIGHLIGHT)
      IF (IPLOT2.EQ.1) THEN
	CALL MO_SCLTIC(X-1.5, 0.0, 1.5, XVMIN, XVMAX,
     X                .125, .1,'BOT')
      ELSE
	CALL MO_SCLTIC(X-1.5, 0.0, 1.5, XVMIN/1000.0,
     X         XVMAX/1000.0, .125, .1, 'BOT')
      ENDIF
      IF(IFSEGS.EQ.1)THEN
	  CALL WMGSCLOSE(ISEGMENT)
	  CALL WMGGCLOSE(IDGROUP)
      ENDIF

200   CONTINUE
      CLOSE(IUNIT)


C
C DRAW LAYER CORRELLATIONS
C
      IF(IFBATCH.EQ.0)THEN
	  WSTRING = 'Drawing correllations.'
	  CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
      IF(IFSEGS.EQ.1)THEN
	  CALL WMGSALLOCATE(ISEGMENT)
	  WSTRING = 'CORRELLATION'
	  CALL WMGOSET(ISEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
C
C **** COMMENT OUT METAFILE STUFF, LEAVE IN FOR FUTURE CONVERSION BACK
C
C         IF(NUMSEGS.LE.1000)THEN
C             NUMSEGS = NUMSEGS+1
C             SEGMENTS(NUMSEGS)=ISEGMENT
C         ENDIF
      ENDIF
      CALL GSPLCI(NORMAL)
       DO 5601 JK = 1 , NLAY
       NGPL=0
       DO 5600 IM = 1 , NTRCES
	 ISUB=JK+(IM-1)*NLAY
	 IF(VEL_OR1(ISUB).EQ.FICT)GOTO 5600
	 NGPL=NGPL+1
	 IDEPTH = MO_GETDEP(IM,JK,NTRCES)+.001
	 IF( (-1) ** IDEPTH .LT. 0)IDEPTH=IDEPTH-1
	 IF (IFDATA_METRIC.EQ.1) THEN
	   YBUF(NGPL) = YLEN - IDEPTH * 3.28083 / DEPTH_SCALE
	 ELSE
	   YBUF(NGPL) = YLEN - IDEPTH/DEPTH_SCALE
	 ENDIF
	 XBUF(NGPL) = VEL_OR1(ISUB)
5600   CONTINUE
       IF(NGPL.EQ.1)THEN
	   XBUF(2)=XBUF(1)+.1
	   YBUF(2)=YBUF(1)
	   XBUF(1)=XBUF(1)-.1
	   NGPL=2
       ENDIF
       IF (NGPL .EQ. 0) GOTO 5601
       CALL WMG_GPL(NGPL,XBUF,YBUF)
5601   CONTINUE
       IF(IFSEGS.EQ.1)THEN
	   CALL WMGSCLOSE(ISEGMENT)
       ENDIF
C
C ANNOTATE WELLS
C
      CALL GSTXCI(NORMAL)
      IF(IFBATCH.EQ.0)THEN
	  WSTRING='Annotating wells.'
	  CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
      IF(IFSEGS.EQ.1)THEN
	  CALL WMGSALLOCATE(ISEGMENT)
	  WSTRING = 'WELL LABELS'
	  CALL WMGOSET(ISEGMENT,WM_CLASS_SEGMENT,WSTRING2,WSTRING)
C
C **** COMMENT OUT METAFILE STUFF, LEAVE IN FOR FUTURE CONVERSION BACK
C
C         IF(NUMSEGS.LE.1000)THEN
C            NUMSEGS = NUMSEGS+1
C            SEGMENTS(NUMSEGS)=ISEGMENT
C         ENDIF
      ENDIF
      CALL GSTXAL(GAHNOR,GAVNOR)
      DO 6500 JK = 1 , NLOGS
      TWELL = WELLS(JK)
      CALL SYN_GETWELL(TWELL,WELLNM,OPER ,STATE,COUNTY,
     X IEKB,ITSH ,TSHPD ,IRANG ,RANGD ,ISEC,ICANCEL)
      IF(ICANCEL.NE.0)GOTO 6500
      X=(IOR(JK)-1)*1.5
      YY=YLEN+.5
      CALL GTX(X,YY+.8,WELLNM)
      CALL GTX(X,YY+.65,OPER)
      CALL MO_GETLOC(OLOC,COUNTY,STATE,ITSH ,TSHPD ,IRANG ,RANGD ,
     XISEC )
      CALL GTX(X,YY+.5,OLOC)
      WRITE(WSTRING,6503)IEKB
6503  FORMAT('E.K.B. = ',I5)
      CALL STRN2B(WSTRING)
      CALL GTX(X,YY+.35,WSTRING)
6500  CONTINUE
      IF(IFSEGS.EQ.1)THEN
	  CALL WMGSCLOSE(ISEGMENT)
      ENDIF
      CALL WMGWCLOSE(IW1)
      IF(IFBATCH.EQ.0)THEN
	  WSTRING=' '
	  CALL AMG_MESSAGE(AM_DIALOG,WSTRING)
      ENDIF
      CALL WMG_UPDATE()
      RETURN
      END

C
C
C =============================================================================
C
      SUBROUTINE MO_SCLTIC(X,Y,DEFL,SCLMIN,SCLMAX,
     X XLINES,XCHARS,WHERE)
     
      INCLUDE 'sun_gks77.i'

      CHARACTER WHERE*3,STRING*64
      INCLUDE 'mo_modcom.i'
C
C TICK SCALES SO ONE CAN BETTER TELL WHAT IT IS
C
      IF(WHERE.EQ.'TOP')THEN
	    XBUF(1)=X
	    YBUF(1)=Y-.3
	    XBUF(2)=X
	    YBUF(2)=Y
	    XBUF(3)=X+DEFL
	    YBUF(3)=Y
	    XBUF(4)=X+DEFL
	    YBUF(4)=Y-.3
	    YADD=0.1
      ELSE
	    XBUF(1)=X
	    YBUF(1)=Y
	    XBUF(2)=X
	    YBUF(2)=Y-.3
	    XBUF(3)=X+DEFL
	    YBUF(3)=Y-.3
	    XBUF(4)=X+DEFL
	    YBUF(4)=Y
	    YADD=-.45
      ENDIF

      CALL GSPLCI(NORMAL)
      CALL WMG_GPL(4,XBUF,YBUF)


C      XX = X+0.5*DEFL
C      CALL GSTXAL(GACENT,GAVNOR)
C      CALL GSCHH(XCHARS)
C      CALL GTX( XX,Y+YADD,CANDIS)

C
C PLOT SCALE TICKS
C
      JJJSCLMIN=SCLMIN
      WRITE(STRING,'(I6)')JJJSCLMIN
      CALL STRN2B(STRING)
      CALL GSTXAL(GAHNOR,GAVNOR)
      CALL GTX(X+.03,Y-.1-XLINES,STRING)
      DO 955 IADD = 1,11
	   YSUB=.05
	   IF(IADD.EQ.1.OR.IADD.EQ.11)YSUB=0.1
	   XADD =(IADD-1)    /10.0 * DEFL
	   XBUF(1)=X+XADD
	   YBUF(1)=Y
	   XBUF(2)=X+XADD
	   YBUF(2)=Y-YSUB
955        CALL WMG_GPL(2,XBUF,YBUF)
      JJJSCLMAX=SCLMAX
      WRITE(STRING,'(I6)')JJJSCLMAX
      CALL STRN2B(STRING)
      CALL GSTXAL(GARITE,GAVNOR)
      CALL GTX(X+DEFL-.08,Y-.1-XLINES,STRING)
      RETURN
      END


C
C =============================================================================
C
      SUBROUTINE MO_GETLOC(OLOC,COUNTY,STATE,ITSHP,TSHPDR,
     X IRANGE,RANGDR,ISECT)

      INCLUDE 'esi_we_wells.i'
C
C BUILD OUTPUT LOCATION STRING
C
      CHARACTER  COUNTY*(SIZEOF_COUNTY), STATE*(SIZEOF_STATE)
      CHARACTER  OLOC*60,TSHPDR*2,RANGDR*2

      CHARACTER*4 FMT(3)
      DATA        FMT/'(I1)','(I2)','(I3)'/
      OLOC=' '
      IF(STATE.EQ.' ')RETURN
      ILEN=ISTRLEN(STATE)
      OLOC(1:ILEN)=STATE(1:ILEN)
      OLOC(ILEN+1:ILEN+2)= ','
      IST=ILEN+3
      IF(COUNTY.EQ.' ')RETURN
      ILEN = ISTRLEN(COUNTY)
      OLOC(IST:IST+ILEN-1)=COUNTY(1:ILEN)
      IF(ITSHP.EQ.-999)RETURN
      OLOC(IST+ILEN:IST+ILEN+1)=', '
      IST=ILEN+IST+2
      OLOC(IST:IST+4)='SEC. '
      IST=IST+5
      ILEN = 1
      IF(ISECT.GT.9)ILEN=2
      IF(ISECT.GT.99)ILEN=3
      WRITE(OLOC(IST:IST+ILEN-1),FMT(ILEN))ISECT
      OLOC(IST+ILEN:IST+ILEN)='-'
      IST=IST+ILEN+1
      ILEN = 1
      IF(ITSHP.GT.9)ILEN=2
      IF(ITSHP.GT.99)ILEN=3
      WRITE(OLOC(IST:IST+ILEN-1),FMT(ILEN))ITSHP
      OLOC(IST+ILEN:IST+ILEN+1)=TSHPDR(1:1)//'-'
      IST=IST+ILEN+2
      ILEN = 1
      IF(IRANGE.GT.9)ILEN=2
      IF(IRANGE.GT.99)ILEN=3
      WRITE(OLOC(IST:IST+ILEN-1),FMT(ILEN))IRANGE
      OLOC(IST+ILEN:IST+ILEN)=RANGDR(1:1)
      RETURN
      END



      SUBROUTINE MO_TIEPLOT_DIALOG(TITLE,LEFT_SCALE,RIGHT_SCALE,
     X                     DEPTH_SCALE, IFPLOT_METRIC, IFDATA_METRIC,
     X                     IDECIM, IPLOT2, ICANCEL)
C *********************************************************************
C
C   ROUTINE:   MO_TIEPLOT
C
C   FUNCTION:  BRING UP DIALOG AND GET TIEPLOT PARAMETERS
C
C  TITLE         = TITLE
C  LEFT_SCALE    = LEFT SONIC SCALE LIMIT
C  RIGHT_SCALE   = RIGHT SONIC SCALE LIMIT
C  DEPTH_SCALE   = DEPTH SCALE VALUE (ENTERED IN FT/IN OR METERS/CM, BUT
C                    MUST BE CONVERTED TO FT/INCH IF IFMETRIC = 1)
C  IFPLOT_METRIC = IS = 0 IF DEPTH SCALE IN FT/IN, = 1 IF IN METERS/CM
C  IFDATA_METRIC = IS = 1 IF THE DATA ITSELF IS IN METRIC UNITS
C  IDECIM        = THE DECIMATION FACTOR FOR PLOTTING (IE PLOT EVERY
C                  Nth ROW) TO REDUCE REQUIRED SEGMENT STORAGE
C  IPLOT2        = IS = 0 IF PLOTTING SONIC ONLY
C                     = 1 IF PLOTTING SONIC AND DENSITY
C                     = 2 IF PLOTTING SONIC AND ACOUSTIC IMPEDANCE
C  ICANCEL       = WAS CANCEL HIT
C
C *********************************************************************

      INCLUDE 'mo_model.ri'
      INCLUDE 'mo_modcom.i'
      INCLUDE 'mo_struct.i'
      INCLUDE 'esi_am.i'

      CHARACTER*255  STRING
      CHARACTER*10 RES_FILE
      CHARACTER *(*) TITLE
      REAL           LEFT_SCALE, RIGHT_SCALE, DEPTH_SCALE
      INTEGER        CDLGID,CDITEM,CDVALUE,ID
      DATA RES_FILE/'MO_MODEL'/

      DEPTH_SCALE = 250.0
      IFPLOT_METRIC = 0
      ICANCEL = 0
      IPLOT2 = 1
      IDECIM = 1
C
C DEFINE THE DIALOG RESOURCE
C
      CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,TIEPLOT,0,ID,0)
C
C CHECK ON THE DATA DEPTH UOM AND SET FLAGS, DEFAULTS ACCORDINGLY
C
      CALL MO_CLEANUP_STRING( MO_UOM)

      IF (MO_UOM.EQ.'METRES'.OR.MO_UOM.EQ.'METERS') THEN
	IFDATA_METRIC = 1
	IFPLOT_METRIC = 1
	CALL WIGSCDV(ID, TIEPLOT_METRIC, 1)
	LEFT_SCALE = 800
	RIGHT_SCALE = 130
      ELSE
	IFDATA_METRIC = 0
	IFPLOT_METRIC = 0
	CALL WIGSCDV(ID, TIEPLOT_ENGLISH, 1)
	LEFT_SCALE = 140
	RIGHT_SCALE= 40
      ENDIF

C
C SET OTHER DEFAULTS AND OPEN DIALOG BOX
C
      STRING=TITLE
      CALL WIGSCDT(ID,TIEPLOT_TITLE,STRING)

      WRITE(STRING,'(F5.1)') RIGHT_SCALE
      CALL WIGSCDT(ID,TIEPLOT_RIGHT,STRING)

      WRITE(STRING,'(F5.1)') LEFT_SCALE
      CALL WIGSCDT(ID,TIEPLOT_LEFT,STRING)

      WRITE(STRING,'(F5.1)') DEPTH_SCALE
      CALL WIGSCDT(ID,TIEPLOT_SCVALUE,STRING)

      WRITE(STRING,'(I2)') IDECIM
      CALL WIGSCDT(ID, TIEPLOT_DECIM_VALUE, STRING)


      CALL WIGSCDV(ID, TIEPLOT_DENSITY, 1)

      CALL WIGOPCD(ID)
100   CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)
C
      IF(CDITEM.EQ.TIEPLOT_OK)GOTO 999
      IF(CDITEM.EQ.TIEPLOT_CANCEL) THEN
	  ICANCEL=1
	  GOTO 9999
      ENDIF
C
C SET DEPTH SCALE UNITS
C
      IF (CDITEM.EQ.TIEPLOT_METRIC) IFPLOT_METRIC = 1
      IF (CDITEM.EQ.TIEPLOT_ENGLISH) IFPLOT_METRIC = 0
C
C SET SECONDARY PLOT TYPE (EITHER AC. IMP OR DENSITY WILL BE PLOTTED)
C
      IF (CDITEM.EQ.TIEPLOT_AC_IMP)  IPLOT2 = 2

      IF (CDITEM.EQ.TIEPLOT_DENSITY) IPLOT2 = 1

      IF (CDITEM.EQ.TIEPLOT_SON_ONLY) IPLOT2 = 0

      GOTO 100


C
C READ AND VERIFY DEPTH SCALE VALUE
C
999   CALL WIGQCCDI(CDLGID,TIEPLOT_SCVALUE,IDUM,STRING)
      NERR=0
      IF(STRING.EQ.' ')GOTO 1010
      READ(STRING,*,ERR=1010) DEPTH_SCALE
      IF(DEPTH_SCALE.LT.10.OR.DEPTH_SCALE.GT.2500.)THEN
	    NERR=NERR+1
	    STRING = 'Depth Scale value is out of range.'
	    CALL WIGALERT(1,HELP,STRING,'Valid range is 10 to 2500.')
      ENDIF
      GOTO 1040

1010  NERR=NERR+1
      STRING = 'Depth Scale value is not numeric.'
      CALL WIGALERT(1,HELP,STRING,'Please enter a numeric value.')
C
C READ AND VERIFY LEFT SCALE
C
1040  CALL WIGQCCDI(CDLGID,TIEPLOT_LEFT,IDUM,STRING)
      ILEFT=0
      IF(STRING.EQ.' ')GOTO 1050
      READ(STRING,*,ERR=1050)LEFT_SCALE

      IF(LEFT_SCALE.LT.60.0.OR.LEFT_SCALE.GT.1000.0)THEN
	 STRING = 'Left sonic scale is out of range.'
	 NERR=NERR+1
	 ILEFT=1
	 CALL  WIGALERT(1,HELP,STRING,'Valid range is 60. to 1000.')
      ENDIF
      GOTO 1060
1050  NERR=NERR+1
      ILEFT=1
      STRING = 'Left sonic scale is not numeric.'
      CALL WIGALERT(1,HELP,STRING,'Please enter a numeric value.')

1060  CALL WIGQCCDI(CDLGID,TIEPLOT_RIGHT,IDUM,STRING)
      IF(STRING.EQ.' ') GOTO 1070
      READ(STRING,*,ERR=1070) RIGHT_SCALE

      XLIMIT = LEFT_SCALE - 20.
      IF(ILEFT.EQ.1) XLIMIT = 980.

      IF(RIGHT_SCALE.LT.20.0.OR.RIGHT_SCALE.GT.XLIMIT)THEN
	 NERR=NERR+1
	 WRITE(STRING,105)XLIMIT
105      FORMAT('Valid range is ',F5.1,' to 20.0.')
	 CALL  WIGALERT(1,HELP,'Right sonic scale is out of range.',
     X                   STRING)
      ENDIF
      GOTO 1080
1070  NERR=NERR+1
      STRING = 'Right sonic scale is not numeric.'
      CALL WIGALERT(1,HELP,STRING,'Please enter a numeric value.')
C
C READ TITLE
C
1080  CALL WIGQCCDI(CDLGID,TIEPLOT_TITLE,IDUM,STRING)
      II=LEN(TITLE)
      TITLE=STRING(1:II)
      CALL STRLJ(TITLE)
C
C CHECK LOG PLOT DECIMATION FACTOR
C
      CALL WIGQCCDI(CDLGID,TIEPLOT_DECIM_VALUE,IDUM,STRING)
      IF(STRING.EQ.' ')GOTO 1090
      READ(STRING,*,ERR=1090) IDECIM
      IF(IDECIM.LT.1.OR.IDECIM.GT.8)THEN
	 STRING = 'Decimation Factor is out of range.'
	 NERR=NERR+1
	 CALL  WIGALERT(1,HELP,STRING,'Valid range is 1 to 8')
      ENDIF
      GOTO 1100
1090  NERR=NERR+1
      STRING = 'Decimation Factor is not numeric.'
      CALL WIGALERT(1,HELP,STRING,'Please enter a numeric value.')
C
C CHECK FOR ERRORS
C
1100  IF(NERR.NE.0)GOTO 100

C
C IF A METRIC PLOT, CONVERT THE DEPTH SCALE FROM MTRS/CM TO FEET/INCH
C
      IF (IFPLOT_METRIC.EQ.1) DEPTH_SCALE = DEPTH_SCALE * 8.33

9999  CALL WIGCLCD(ID)
      RETURN
      END




      SUBROUTINE MO_TIEPLOT_BATCH(MO_TYPE, TIEFILE, TITLE, IFSEGS,
     X                 SONIC_SCALE1, SONIC_SCALE2, DEPTH_SCALE,
     X                 IFPLOT_METRIC, IFDATA_METRIC, IDECIM, IPLOT2)
C *****************************************************************************
C
C     ROUTINE:     MO_TIEPLOT_BATCH
C
C     FUNCTION:    TO PERFORM BATCH PLOTTING OF THE TIEPLOT MODEL. THIS IS
C                  PERFORMED BY 1) MAKING A COPY OF THE TIE PLOT FILE SO THE
C                  INTERACTIVE JOB CAN CONTINUE, 2) CREATING A FILE WHICH
C                  CONTAINS THE PLOT PARAMETERS (FILENAME, SCALES, ETC.) TO
C                  BE LATER READ IN BY THE BATCH JOB,  3) CREATING A BATCH
C                  JOB (.COM FILE ON VMS) WHICH WILL CALL THE PLOT ROUTINE
C                  WHICH WILL WRITE OUT THE PLOT DATA TO A GKS NEUTRAL PLOT
C                  FILE, SUBMIT THE PLOT, ETC.
C
C ****************************************************************************

      INCLUDE 'esi_qs.i'
      INCLUDE 'esi_am.i'
C
      CHARACTER*(*) TIEFILE,TITLE,MO_TYPE
      REAL SONIC_SCALE1,SONIC_SCALE2
C
      CHARACTER*240 COMMAND_FILE, NEUTRAL_FILE, PARAM_FILE
      CHARACTER*32  F_ACCOUNT, F_PASSWORD, F_DATABASE, PROJECT
      CHARACTER*98  ORASTRING


C
      REAL*4 PXSIZE, PYSIZE
      INTEGER*4 PNPENS, PF_STATUS
      INTEGER*4 IFSEGS
      INTEGER*4 SPAWN_TYPE, USER
      CHARACTER*32 XMAXSTR, YMAXSTR
      CHARACTER*255 PDRIVER,PQUEUE, PSTATUS
      CHARACTER*255 STRING, COMMAND_ARGS
C
      CHARACTER*255 WIYESNO1,WIYESNO2
C
C SET UP STRINGS FOR THE VARIOUS FILENAMES
C

      CALL HOG_GET_UNIQUE_FILENAME( STRING )
      CALL TFSTRCAT( STRING, '.NPF', STRING )
      CALL HOG_ADD_PATH( 'ESI$PLOTS', STRING, LEN(NEUTRAL_FILE),
     +                   NEUTRAL_FILE )

      CALL HOG_GET_UNIQUE_FILENAME( STRING )
      CALL TFSTRCAT( STRING, '.PRM', STRING )
      CALL HOG_ADD_PATH( 'ESI$SCRATCH', STRING, LEN(PARAM_FILE),
     +                   PARAM_FILE )
      CALL HOG_TRANSLATE_FILENAME( PARAM_FILE, PARAM_FILE )

      CALL HOG_ADD_PATH( 'ESI$BIN', 'MO_TIE_PLT_COM',LEN(COMMAND_FILE),
     +                   COMMAND_FILE )

C
C SEE IF BATCH PLOT SHOULD BE LAUNCHED
C
      WIYESNO1='Would you like to plot the TIEPLOT?'
      WIYESNO2=' '
      CALL WIGYESNO(WIYESNO1,WIYESNO2,IFYES,IERR)
      IF(IFYES.EQ.0)RETURN
C
C GET THE DATE,TIME STRING
C
      STRING = 'Spawning job to create neutral file - '//NEUTRAL_FILE
      CALL AMG_MESSAGE(AM_DIALOG, STRING)
C
C 01/03/88 GS - was making a copy of TIEFILE "SO MODELING CAN GO ON", but
C               was doing nothing with it.
C
C      CALL TFSTRCAT ('COPY '//TIEFILE, ' '//NEW_TIEFILE, STRING)
C      CALL HOG_SYSCOM( STRING )

C
C WRITE OUT PLOT PARAMETERS TO A DATA FILE FOR USE BY BATCH JOB
C

      CALL HOGFNT( IUNIT)

      OPEN (IUNIT, FILE = PARAM_FILE, STATUS = 'UNKNOWN', RECL = 150)

      WRITE (IUNIT,1) MO_TYPE
      WRITE (IUNIT,1) TIEFILE
      WRITE (IUNIT,1) TITLE
1     FORMAT (A)

      WRITE (IUNIT,2) SONIC_SCALE1, SONIC_SCALE2, DEPTH_SCALE
2     FORMAT (3F20.2)

C 12/20/88 GS initialize it first
      IFBATCH = 0
      WRITE (IUNIT,3) IFBATCH, IFSEGS, IFPLOT_METRIC,
     X                IFDATA_METRIC, IPLOT2
3     FORMAT (5I5)

      CLOSE (IUNIT)


C
C INQUIRE AREA, FINDER ACCOUNT, PROJECT, DATABASE, ETC.
C

      CALL QSG_INQC(IQS_PROJECT_NAME, PROJECT, L1)
      CALL QSG_INQC(IQS_FINDER_ACCOUNT, F_ACCOUNT, L1)
      CALL QSG_INQC(IQS_FINDER_PASSWORD, F_PASSWORD, L1)
      CALL QSG_INQC(IQS_DATABASE, F_DATABASE, L1)
C

      PF_STATUS = 0
      CALL PFGL_GET_PLOTTER(PDRIVER,PQUEUE,PSTATUS,PNPENS,
     1                            PXSIZE,PYSIZE,PF_STATUS)

      IF (PF_STATUS .NE. 0) THEN
	    STRING = 'Plot Cancelled...'
	    CALL AMG_MESSAGE(AM_DIALOG, STRING)
	    RETURN
      ENDIF

      WRITE (UNIT=XMAXSTR, FMT='(F9.3)') PXSIZE
      WRITE (UNIT=YMAXSTR, FMT='(F9.3)') PYSIZE
C
C CREATE THE ORACLE LOGIN PART OF THE SPAWN STRING (MUST HAVE NO BLANKS)
C
      CALL TFSTRCAT( F_ACCOUNT, '/', STRING)
      CALL TFSTRCAT( STRING, F_PASSWORD, ORASTRING)
      CALL TFSTRCAT( ORASTRING, '@', STRING)
      CALL TFSTRCAT( STRING, F_DATABASE, ORASTRING)

C 01/03/89 GS - inserted param_file as 2nd argument
      CALL TFSTRCAT( '"'//ORASTRING, '",'//PARAM_FILE, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//NEUTRAL_FILE, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//PROJECT, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//PDRIVER, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//PQUEUE, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//XMAXSTR, COMMAND_ARGS )
      CALL TFSTRCAT( COMMAND_ARGS, ','//YMAXSTR, COMMAND_ARGS )
C
C SUBMIT THE BATCH JOB
C
      SPAWN_TYPE = 1
      CALL WIGQFRONT(IFRONT)
      CALL HOG_SPAWN (SPAWN_TYPE, COMMAND_FILE, COMMAND_ARGS, USER)
      CALL WIGOPCD(IFRONT)
      STRING = ' '
      CALL AMG_MESSAGE (AM_DIALOG, STRING)

      RETURN
      END

C  END CODE
