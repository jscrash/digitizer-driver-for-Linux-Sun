C  DEC/CMS REPLACEMENT HISTORY, Element MO_ARRAY.FOR
C  *8    18-DEC-1989 10:46:36 GILLESPIE "(SPR 5077) Use WMG_GPL"
C  *7     6-NOV-1989 10:11:43 GILLESPIE "(SPR 30) replace mog*resource with amg*resource"
C  *6     6-NOV-1989 09:04:13 PURNA "(SPR 30) fix mo_ calls to mog_"
C  *5     3-NOV-1989 12:01:08 GILLESPIE "(SPR 30) Change entry points for new n-List nomenclature"
C  *4    17-OCT-1989 08:53:54 GORDON "(SPR 4999) Update color selections"
C  *3    19-SEP-1989 10:12:31 GORDON "(PURNA) GULF MODS UNDER SPR 100"
C  *2    11-AUG-1989 07:44:51 GORDON "(SPR 105) change name & definition of BYTE_POINTER to INTEGER*4"
C  *1    10-AUG-1989 18:48:09 VINCE "Fortran code after UNIX mods"
C  DEC/CMS REPLACEMENT HISTORY, Element MO_ARRAY.FOR
C MO_ARRAY.F77,  VOIGHT>RASTER>ARRAY,  SPENCE,  12/10/86
C ARRAY GEOPHONE RESPONSE
C Copyright (c) 1986, Exploration Systems Inc, Sausalito, CA.
C
C TITLE : MO_ARRAY - ARRAY GEOPHONE RESPONSE
C
C START-HISTORY :
C 12/10/86 JOHN     ADD CHECK FOR NON-GRAPHICS TERMINAL
C 11/12/86 JULIAN   change references to WIENMNI to WIGENMNI
C 07/16/86 SPENCE   CHANGE WIALERT CALLS TO WIGALERT
C 06/19/86 SPENCE   INITIAL LOAD
C 06/19/86 SPENCE Template constructed
C END-HISTORY
C
C START-CODE :
C******************************************************************************
C
C                Copyright Finder Graphics Systems, Inc. 1989
C		   Unpublished -- All rights reserved
C
C THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Finder Graphics Systems, Inc AND MAY
C CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
C DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
C MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF
C
C			Finder Graphics Systems, Inc.
C			201 Tamal Vista Blvd
C			Corte Madera, California 94925
C			(415) 927-0100
C
C (The above notice does not constitute an admission of publication or
C unrestricted dissemination of the work)
C
C******************************************************************************
C
      INTEGER*4 FUNCTION MO_ARRAY(BYTE_POINTER)
C
C  GEOPHONE RESPONSE PROGRAM
C
C  STANDARD APPLICATION DATA FROM FINDER
C

      INCLUDE 'mo_array.ri'
      INCLUDE 'esi_am.i'
      INCLUDE 'esi_qs.i'
C
C
C ARRAY RESPONSE ARRAYS REQUIRED
C
      INTEGER*4 BYTE_POINTER
      PARAMETER ( MAX_ELEMENTS = 48 )
      REAL WEIGHTS(MAX_ELEMENTS),DISTANCES(MAX_ELEMENTS)
      REAL DBARRAY (200),SUMMED_RESPONSE(200)
C
C WI STUFF
C
      CHARACTER*255 STRING,HELP
C
C  ARRAY STUFF
C
      CHARACTER TITLE*80,DISTANCE_TYPE*1
      CHARACTER*10 RES_FILE
      CHARACTER*256 STR_IN,STR_OUT
      DATA RES_FILE/'MO_ARRAY'/
      DATA HELP/'MO_ARRAY'/
C
      CALL QSG_INQI(IQS_GRAPHIC_TERM,ITERM)
C RCH
      ITERM=1
      IF (ITERM.EQ.0) THEN
         STR_IN=
     X   'A graphics workstation is required to run this application'
         STR_OUT='Please move to another workstation.  Thanks.'
         CALL WIGALERT(1, HELP, STR_IN, STR_OUT)
         MO_ARRAY=1
         RETURN
      ENDIF
C
C DEFINE MENUS
C
      CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,MO_ARRAY_DIALOG,
     X 0,IDMAIN,0)
      CALL WIGOPCD(IDMAIN)
      CALL AMG_DEFINE_RESOURCE(AM_MENU,RES_FILE,ARRAY_MENU,0,MENUID,0)
      CALL WIGVISMN(MENUID,1)
C
C SET TOTAL AND NUMBER OF RESPONSES
C
      DO 900 JK = 1 , 200
900   SUMMED_RESPONSE(JK)=0.0
      NRESPONSES=0
      DISTANCE_TYPE='C'
      TITLE=' '
      CONSTANT_DISTANCE=25.
      NELEMENTS=12
C
C GET A MENU PICK AND PROCESS
C
1000  STRING='Pick an item from the menus.'
      CALL WIGSCDT(IDMAIN,MO_ARRAY_TEXT,STRING)
      IF(NRESPONSES.EQ.2)CALL WIGENMNI(MENUID,ARRAY_SUMMED,1)
      IF(NRESPONSES.EQ.1)CALL WIGENMNI(MENUID,ARRAY_RESET,1)
      IF(NRESPONSES.EQ.0)THEN
            CALL WIGENMNI(MENUID,ARRAY_RESET,0)
            CALL WIGENMNI(MENUID,ARRAY_SUMMED,0)
      ENDIF
      CALL WIGRQEVT(0, ICLASS, MN, ID)
      IF(MN.NE.MENUID)GOTO 1000
      STRING = ' '
      CALL WIGSCDT(IDMAIN,MO_ARRAY_TEXT,STRING)
C
C QUIT TIME
C
      IF(ID.EQ.ARRAY_QUIT)GOTO 9999
C
C RESET SUMMED RESPONSE ARRAY
C
      IF(ID.EQ.ARRAY_RESET)THEN
              DO 1010 JK = 1 , 200
1010          SUMMED_RESPONSE(JK)=0.0
              NRESPONSES = 0
              GOTO 1000
      ENDIF
C
C  PLOT SUMMED RESPONSE
C
      IF(ID.EQ.ARRAY_SUMMED)THEN
            CALL MO_ARRAY_PLOT(SUMMED_RESPONSE,'SUMMED RESPONSE')
            GOTO 1000
      ENDIF
C
C GENERATE TIME
C
      NRESPONSES=NRESPONSES+1
      CALL MO_ARRAY_DIALOG1(MODULE,NRESPONSES,DISTANCE_TYPE,
     X MAX_ELEMENTS,NELEMENTS,CONSTANT_DISTANCE,TITLE,ICANCEL)
      IF(ICANCEL.EQ.1)THEN
            NRESPONSES = NRESPONSES-1
            GOTO 1000
      ENDIF
C
C GET WEIGHTS AND DISTANCES
C
      IF(DISTANCE_TYPE.EQ.'C')THEN
           CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,MO_ARRAY2,
     X                              0,ID_BOX,0)
      ELSE
           CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,MO_ARRAY3,
     X                              0,ID_BOX,0)
      ENDIF
C
      DO 1100 JK = 1,NELEMENTS
            IF(DISTANCE_TYPE.EQ.'C')THEN
                  CALL MO_ARRAY_DIALOG2(MODULE,JK,NELEMENTS,
     X                           WEIGHTS(JK),ID_BOX,ICANCEL)
            ELSE
                  CALL MO_ARRAY_DIALOG3(MODULE,JK,NELEMENTS,
     X             WEIGHTS(JK),DISTANCES,ID_BOX,ICANCEL)
            ENDIF
            IF(ICANCEL.EQ.1)THEN
                  NRESPONSES = NRESPONSES - 1
                  GOTO 1000
            ENDIF
1100        CONTINUE
            CALL MO_ARRAY_CALC(DISTANCE_TYPE,NELEMENTS,
     X                         CONSTANT_DISTANCE,WEIGHTS,DISTANCES,
     X                         SUMMED_RESPONSE,DBARRAY)
            CALL MO_ARRAY_PLOT(DBARRAY,TITLE)
      GOTO 1000
9999  CALL AMG_RELEASE_RESOURCE(MENUID)
      CALL AMG_QUIT()
      MO_ARRAY=0
      RETURN
      END
C
C***********************************************************************
C
      SUBROUTINE MO_ARRAY_CALC(DISTANCE_TYPE,NELEMENTS,
     X                         CONSTANT_DISTANCE,WEIGHTS,DISTANCES,
     X                         SUMMED_RESPONSE,DBARRAY)
C
C CALCULATE ARRAY RESPONSE
C
C DISTANCE_TYPE  = CONSTANT OR VARYING
C NELEMENTS      = NUMBER OF WEIGHTS
C CONSTANT_DISTANCE = DISTANCE TO USE IF DISTANCE_TYPE IS CONSTANT
C WEIGHTS        = WEIGHT ARRAY
C DISTANCES      = DISTANCES ARRAY
C SUMMED_RESPONSE = SUMMED RESPONSE ARRAY
C DBARRAY         = DB ARRAY
C
      REAL WEIGHTS(NELEMENTS),DISTANCES(NELEMENTS)
      REAL SUMMED_RESPONSE(200),DBARRAY(200)
      CHARACTER*(*) DISTANCE_TYPE
C
      IF(DISTANCE_TYPE.EQ.'C')THEN
            SMALD=CONSTANT_DISTANCE/10000.
      ELSE
            SMALD=(DISTANCES(NELEMENTS)-DISTANCES(1))/
     X      ((NELEMENTS-1)*10000.)
      ENDIF
C
      XMID_ROWS=(NELEMENTS+1.0)/2.0
      DO 60 LOOP=1,200
      DELTAL=6.2832*(LOOP-1)*SMALD
      SUMR=0.
      SUMI=0.
      DO 70 I = 1 , NELEMENTS
        IF(DISTANCE_TYPE.EQ.'V')THEN
            SUMR=SUMR+WEIGHTS(I)*COS( DELTAL*(NELEMENTS-1)*(-.5+
     X          (DISTANCES(I)-DISTANCES(1))/
     X          (DISTANCES(NELEMENTS)-DISTANCES(1))))
            SUMI=SUMI-WEIGHTS(I)*SIN( DELTAL*(NELEMENTS-1)*(-.5+
     X          (DISTANCES(I)-DISTANCES(1))/
     X          (DISTANCES(NELEMENTS)-DISTANCES(1))))
      ELSE
            SUMR=SUMR+WEIGHTS(I)*COS(DELTAL*(I-XMID_ROWS))
            SUMI=SUMI-WEIGHTS(I)*SIN(DELTAL*(I-XMID_ROWS))
      ENDIF
70    CONTINUE
C
      STA=SUMR**2+SUMI**2
      IF(STA.LE.0.0)THEN
           DBARRAY(LOOP)=0.
      ELSE
           DBARRAY(LOOP)=4.3429*ALOG(STA)
      ENDIF
   60 CONTINUE
C
      DB = DBARRAY(1)
      DO 80 I = 1 , 200
      DBARRAY(I)=DBARRAY(I)-DB
80    SUMMED_RESPONSE(I)=SUMMED_RESPONSE(I)+DBARRAY(I)
C
      RETURN
      END
C
C***********************************************************************
C
      SUBROUTINE MO_ARRAY_DIALOG1(MODULE,NRESPONSES,DISTANCE_TYPE,
     X MAX_ELEMENTS,NELEMENTS,CONSTANT_DISTANCE,TITLE,ICANCEL)
C
C MODULE        = MODULE ID
C NRESPONSES    = NUMBER OF THIS RESPONSE IN SERIES SINCE LAST RESET
C DISTANCE_TYPE = 'C' OR CONSTANT, 'V' FOR VARYING
C NELEMENTS     = NUMBER OF ELEMENTS IN ARRAY
C TITLE         = TITLE TO GO ON PLOT
C ICANCEL       = 0 OK, 1 FOR CANCEL
C
      INCLUDE 'mo_array.ri'
      INCLUDE 'esi_am.i'
C
      CHARACTER*(*)DISTANCE_TYPE,TITLE
      CHARACTER*255 RSRC,STRING,HELP
      CHARACTER*10 RES_FILE
      EQUIVALENCE(RSRC,PTR_RSRC)
      INTEGER CDLGID,CDITEM,CDVALUE
      DATA RES_FILE/'MO_ARRAY'/
      DATA HELP/'MO_ARRAY'/
C
C DEFINE BOX
C
      CALL AMG_DEFINE_RESOURCE(AM_DIALOG,RES_FILE,MO_ARRAY1,0,ID,0)
C
C FILL BOX
C
      WRITE(STRING,'(F10.2)')CONSTANT_DISTANCE
      CALL STRLJ(STRING)
      CALL WIGSCDT(ID,MO_ARRAY1_CONSTANT_DISTANCE,STRING)
C
      WRITE(STRING,'(I5)')NRESPONSES
      CALL STRLJ(STRING)
      CALL WIGSCDT(ID,MO_ARRAY1_RESPONSE_NUMBER,STRING)
C
      WRITE(STRING,'(I5)')NELEMENTS
      CALL STRLJ(STRING)
      CALL WIGSCDT(ID,MO_ARRAY1_NELEMENTS,STRING)
      IF(DISTANCE_TYPE.EQ.'C')THEN
            CALL WIGSCDV(ID,MO_ARRAY1_CONSTANT,1)
            CALL WIGENCDI(ID,MO_ARRAY1_CONSTANT_DISTANCE,1)
      ELSE
            CALL WIGSCDV(ID,MO_ARRAY1_VARYING,1)
            CALL WIGENCDI(ID,MO_ARRAY1_CONSTANT_DISTANCE,0)
      ENDIF
C
      STRING=TITLE
      CALL WIGSCDT(ID,MO_ARRAY1_TITLE,STRING)
C
C GET USER RESPONSES
C
      ICANCEL=0
      CALL WIGOPCD(ID)
1000  CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)
      IF(CDITEM.EQ.MO_ARRAY1_CANCEL)THEN
            ICANCEL=1
            CALL AMG_RELEASE_RESOURCE(ID)
            RETURN
      ENDIF
      IF(CDITEM.EQ.MO_ARRAY1_VARYING)THEN
            DISTANCE_TYPE='V'
            CALL WIGENCDI(ID,MO_ARRAY1_CONSTANT_DISTANCE,0)
            GOTO 1000
      ENDIF
      IF(CDITEM.EQ.MO_ARRAY1_CONSTANT)THEN
            DISTANCE_TYPE='C'
            CALL WIGENCDI(ID,MO_ARRAY1_CONSTANT_DISTANCE,1)
            GOTO 1000
      ENDIF
C
C EQUALS OK
C
      NERR=0
C
C GET TITLE
C
      CALL WIGQCCDI(ID,MO_ARRAY1_TITLE,CDVALUE,STRING)
      TITLE=STRING
C
C CHECK NELEMENTS
C
      CALL WIGQCCDI(ID,MO_ARRAY1_NELEMENTS,CDVALUE,STRING)
      IF(STRING.EQ.' ')GOTO 1200
      READ(STRING,*,ERR=1200)NELEMENTS
      IF(NELEMENTS.LT.2.OR.NELEMENTS.GT.MAX_ELEMENTS)THEN
            WRITE(STRING,1150)MAX_ELEMENTS
1150        FORMAT('The valid range is 2 to ',I5, '.')
            CALL STRN2B(STRING)
            CALL WIGALERT(1,HELP,'Number of elements is out of range.',
     X      STRING)
            NERR=NERR+1
      ENDIF
      GOTO 1250
1200  CALL WIGALERT(1,HELP,'Number of elements is not numeric.',
     X                      'Please enter a numeric value.')
      NERR=NERR+1
C
C CHECK CONSTANT DISTANCE
C
1250  IF(DISTANCE_TYPE.EQ.'V')GOTO 1400
      CALL WIGQCCDI(ID,MO_ARRAY1_CONSTANT_DISTANCE,CDVALUE,STRING)
      IF(STRING.EQ.' ')GOTO 1300
      READ(STRING,*,ERR=1300)CONSTANT_DISTANCE
      IF(CONSTANT_DISTANCE.LT.1.0 .OR.CONSTANT_DISTANCE.GT.10000.0)THEN
            CALL WIGALERT(1,HELP,'Constant distance is out of range.',
     X        'Valid range is 1 to 10000.0')
            NERR=NERR+1
      ENDIF
      GOTO 1400
1300  CALL WIGALERT(1,HELP,'Constant distance is not numeric.',
     X                      'Please enter a numeric value.')
      NERR=NERR+1
C
C ALL OK?
C
1400  IF(NERR.NE.0)GOTO 1000
      CALL AMG_RELEASE_RESOURCE(ID)
      RETURN
      END
C
C***********************************************************************
C
      SUBROUTINE MO_ARRAY_DIALOG2(MODULE,IELEMENT,NELEMENTS,
     X  WEIGHT,ID_BOX2,ICANCEL)
C
C MODULE        = MODULE ID
C IELEMENT      = THIS ELEMENT NUMBER
C NELEMENTS     = TOTAL NUMBER OF ELEMENTS
C WEIGHT        = WEIGHT ELEMENT
C ID_BOX2       = ID OF DIALOG BOX
C ICANCEL       = 0 OK, 1 FOR CANCEL
C
      INCLUDE 'mo_array.ri'
C
      CHARACTER*255 STRING,HELP
      INTEGER CDLGID,CDITEM,CDVALUE
      DATA HELP/'MO_ARRAY'/
C
C FILL BOX
C
      WRITE(STRING,600)IELEMENT,NELEMENTS
600   FORMAT(I5,' of ',I5)
      CALL STRLJ(STRING)
      CALL STRN2B(STRING)
      CALL WIGSCDT(ID_BOX2,MO_ARRAY2_NOF_TEXT,STRING)
C
      STRING=' '
      CALL WIGSCDT(ID_BOX2,MO_ARRAY2_WEIGHT,STRING)
      IF(IELEMENT.EQ.1)CALL WIGOPCD(ID_BOX2)
C
C
C GET USER RESPONSES
C
      ICANCEL=0
1000  CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)
      IF(CDITEM.EQ.MO_ARRAY2_CANCEL)THEN
            ICANCEL=1
            CALL AMG_RELEASE_RESOURCE(ID_BOX2)
            RETURN
      ENDIF
C
C EQUALS OK
C
      NERR=0
C
C CHECK WEIGHT
C
      CALL WIGQCCDI(ID_BOX2,MO_ARRAY2_WEIGHT,CDVALUE,STRING)
      IF(STRING.EQ.' ')GOTO 1200
      READ(STRING,*,ERR=1200)WEIGHT
      IF(WEIGHT.LT.0.0 .OR. WEIGHT .GT. 10000.0)THEN
            CALL WIGALERT(1,HELP,'Weight is out of range.',
     X      'Valid range is 0.0 to 10000.0')
            NERR=NERR+1
      ENDIF
      GOTO 1250
1200  CALL WIGALERT(1,HELP,'Weight is not numeric.',
     X                      'Please enter a numeric value.')
      NERR=NERR+1
C
C ALL OK?
C
1250  IF(NERR.NE.0)GOTO 1000
      IF(IELEMENT.EQ.NELEMENTS)CALL AMG_RELEASE_RESOURCE(ID_BOX2)
      RETURN
      END
C
C***********************************************************************
C
      SUBROUTINE MO_ARRAY_DIALOG3(MODULE,IELEMENT,NELEMENTS,
     X  WEIGHT,DISTANCES,ID_BOX3,ICANCEL)
C
C MODULE        = MODULE ID
C IELEMENT      = THIS ELEMENT NUMBER
C NELEMENTS     = TOTAL NUMBER OF ELEMENTS
C WEIGHT        = WEIGHT ELEMENT
C DISTANCES     = DISTANCE ARRAY
C ID_BOX3       = ID OF DIALOG BOX
C ICANCEL       = 0 OK, 1 FOR CANCEL
C
      INCLUDE 'mo_array.ri'
C
      REAL DISTANCES(NELEMENTS)
      CHARACTER*255 STRING,HELP
      INTEGER CDLGID,CDITEM,CDVALUE
      DATA HELP/'MO_ARRAY'/
C
C FILL BOX
C
      WRITE(STRING,600)IELEMENT,NELEMENTS
600   FORMAT(I5,' of ',I5)
      CALL STRLJ(STRING)
      CALL STRN2B(STRING)
      CALL WIGSCDT(ID_BOX3,MO_ARRAY3_NOF_TEXT,STRING)
      CALL WIGSCDT(ID_BOX3,MO_ARRAY3_NOFD_TEXT,STRING)
C
      STRING=' '
      CALL WIGSCDT(ID_BOX3,MO_ARRAY3_WEIGHT,STRING)
      CALL WIGSCDT(ID_BOX3,MO_ARRAY3_DISTANCE,STRING)
      IF(IELEMENT.EQ.1)CALL WIGOPCD(ID_BOX3)
C
C
C GET USER RESPONSES
C
      ICANCEL=0
1000  CALL WIGRQCDI(CDLGID,CDITEM,CDVALUE,STRING)
      IF(CDITEM.EQ.MO_ARRAY3_CANCEL)THEN
            ICANCEL=1
            CALL AMG_RELEASE_RESOURCE(ID_BOX3)
            RETURN
      ENDIF
C
C EQUALS OK
C
      NERR=0
C
C CHECK WEIGHT
C
      CALL WIGQCCDI(ID_BOX3,MO_ARRAY3_WEIGHT,CDVALUE,STRING)
      IF(STRING.EQ.' ')GOTO 1200
      READ(STRING,*,ERR=1200)WEIGHT
      IF(WEIGHT.LT.0.0 .OR. WEIGHT .GT. 10000.0)THEN
            CALL WIGALERT(1,HELP,'Weight is out of range.',
     X      'Valid range is 0.0 to 10000.0.')
            NERR=NERR+1
      ENDIF
      GOTO 1250
1200  CALL WIGALERT(1,HELP,'Weight is not numeric.',
     X                      'Please enter a numeric value.')
      NERR=NERR+1
C
1250  CALL WIGQCCDI(ID_BOX3,MO_ARRAY3_DISTANCE,CDVALUE,STRING)
      IF(STRING.EQ.' ')GOTO 1300
      READ(STRING,*,ERR=1300)DISTANCES(IELEMENT)
      IDIST_BAD=0
      IF(IELEMENT.EQ.1)THEN
          IF(DISTANCES(IELEMENT) .LT. 0.0   .OR.
     X       DISTANCES(IELEMENT) .GT. 10000.0)THEN
             RANGE1=0.0
             RANGE2=10000.0
             IDIST_BAD=1
          ENDIF
      ELSE
          IF(DISTANCES(IELEMENT) .LT. DISTANCES(IELEMENT-1)+1 .OR.
     X       DISTANCES(IELEMENT) .GT. DISTANCES(IELEMENT-1)+10000.)THEN
             RANGE1=DISTANCES(IELEMENT-1)+ 1.0
             RANGE2=RANGE1+10000.0
             IDIST_BAD=1
          ENDIF
      ENDIF
      IF(IDIST_BAD.EQ.1)THEN
            WRITE(STRING,1310)RANGE1,RANGE2
1310        FORMAT('Valid range is ',F10.2,' to ',F10.2,'.')
            CALL STRN2B(STRING)
            NERR=NERR+1
            CALL WIGALERT(1,HELP,'Distance is out of range.',STRING)
      ENDIF
      GOTO 1400
1300  CALL WIGALERT(1,HELP,'Distance is not numeric.',
     X                      'Please enter a numeric value.')
      NERR=NERR+1
C
C ALL OK?
C
1400  IF(NERR.NE.0)GOTO 1000
      IF(IELEMENT.EQ.NELEMENTS)CALL AMG_RELEASE_RESOURCE(ID_BOX3)
      RETURN
      END
C
C***********************************************************************
C
      SUBROUTINE MO_ARRAY_PLOT(DBARRAY,TITLE)
C
C PLOT ARRAY RESPONSE WINDOW
C
C DBARRAY = DBARRAY
C TITLE   = TITLE
C

      INCLUDE 'sun_gks77.i'

      INCLUDE 'esi_wm.i'
C
      INTEGER HIGHLIGHT, NORMAL, BACKGROUND
      REAL DBARRAY(200)
      CHARACTER*(*) TITLE
      REAL XBUF(202),YBUF(202)
      CHARACTER*8 JNUMB
      CHARACTER*255 STRING,WSTRING
      DATA WSTRING/'MO_ARRAY_PLOT'/
	
      CALL LUG_TEXT_TO_INDEX( 'COLOR', HIGHLIGHT, 'HIGHLIGHT' )
      CALL LUG_TEXT_TO_INDEX( 'COLOR', NORMAL, 'NORMAL' )
      CALL LUG_TEXT_TO_INDEX( 'COLOR', BACKGROUND, 'BACKGROUND' )
C
C ALLOCATE WINDOW
C
      CALL MO_ARRAY_RESET_TEXT
      CALL WMG_INQ_WKWN(XNDC1,XNDC2,YNDC1,YNDC2)
      CALL WMGWALLOCATE(IW1,XNDC1,XNDC2,YNDC1,YNDC2,BACKGROUND)
      STRING='Geophone Response '//TITLE
      CALL WMGOSET(IW1,WM_CLASS_WINDOW,WSTRING,STRING)
      XMIN=0.
      XMAX=11.
      YMIN=0.
      YMAX=11.
      CALL WMGTALLOCATE(ITNR,0.,1.,0.,1.,XMIN,XMAX,YMIN,YMAX)
C
C SET SOME GKS ATTRIBUTES
C
      CALL GSPLCI(HIGHLIGHT)
      CHAR_SIZE=.125
      CALL GSCHH(CHAR_SIZE)
      CALL GSLWSC(1.)
C
C MAKE TEXT SEGMENT
C
      CALL WMGSALLOCATE(IS1)
      STRING='TEXT AND LABELS'
      CALL WMGOSET(IS1,WM_CLASS_SEGMENT,WSTRING,STRING)
C
C DRAW TEXT AND BORDER
C
      XBUF(1)=0.0
      YBUF(1)=0.0
      XBUF(2)=0.0
      YBUF(2)=YMAX
      XBUF(3)=XMAX
      YBUF(3)=YMAX
      XBUF(4)=XMAX
      YBUF(4)=0.0
      XBUF(5)=0.0
      YBUF(5)=0.0
      CALL WMG_GPL(5,XBUF,YBUF)
C
      CALL GSTXCI(NORMAL)
      CALL GTX(0.5,10.5,'GEOPHONE RESPONSE')
      CALL GTX(0.5,10.0,TITLE)
      CALL GSTXCI(NORMAL)
      CALL GTX(5.0,9.25,'WAVELENGTH')
      CALL GSCHUP(-1.,0.)
      CALL GTX(0.7,4.0,'PLOT (DB)')
      CALL GSCHUP(0.,1.)
C
      FPN=0.
      JNUMB='10000'
      X=2.
      CALL GSTXAL(GACENT,GAVNOR)
      DO 100 I=1,9
      CALL GTX(X-.075,8.75,JNUMB)
      CALL GTX(X,8.5,'+')
      FPN=FPN+25.
      FP=10000.0 / FPN
      WRITE(JNUMB,'(F5.1)') FP
      CALL STRLJ(JNUMB)
  100 X=X+1.
      CALL GSTXAL(GARITE,GAVNOR)
      FPN=0.
      IPN = FPN
      WRITE(JNUMB,'(I3)')  IPN
      Y=8.5
      DO 701 I=1,7
      IF(I.EQ.1)THEN
        YY=Y-.15
      ELSE
        YY=Y
      ENDIF
      CALL GTX(1.75,YY,JNUMB)
      FPN=FPN-10.
      IPN = FPN
      WRITE(JNUMB,'(I3)') IPN
  701 Y=Y-1.41
      CALL WMGSCLOSE(IS1)
C
C FILLED AREA AND POLY LINE
C
      CALL WMGTALLOCATE(ITNR,.1818,.909,0.,0.7727,0.,200.,0.,60.)
      CALL WMGSALLOCATE(IS1)
      STRING = 'GEOPHONE RESPONSE ARRAY CURVE'
      CALL WMGOSET(IS1,WM_CLASS_SEGMENT,WSTRING,STRING)
C
      CALL GSFAIS(GSOLID)
      CALL GSFACI(HIGHLIGHT)
      XBUF(1)=0.0
      YBUF(1)=0.0
      XBUF(202)=200
      YBUF(202)=0.
      XINC=200./199.
      DO 702 I=1,200
          IF(DBARRAY(I).EQ.0.) DBARRAY(I)=-.00001
          IF(DBARRAY(I).LT.-60.) DBARRAY(I)=-60.
          XBUF(I+1)=(I-1)*XINC
          YBUF(I+1)=DBARRAY(I)+60.
  702 CONTINUE
      CALL GFABREAK(202,XBUF,YBUF)
      CALL WMGSCLOSE(IS1)
C
C BORDER SEGMENT
C
      CALL WMGSALLOCATE(IS1)
      STRING='GEOPHONE RESPONSE CURVE BORDER'
      CALL WMGOSET(IS1,WM_CLASS_SEGMENT,WSTRING,STRING)
      CALL GSLWSC(2.)
      XBUF(1)=0.
      XBUF(2)=200.
      XBUF(3)=200.
      XBUF(4)=0.
      YBUF(1)=0.
      YBUF(2)=0.
      YBUF(3)=60.
      YBUF(4)=60.
      XBUF(5)=0.
      YBUF(5)=0.
      CALL WMG_GPL(5,XBUF,YBUF)
      XBUF(1)=0.
      YBUF(1)=40.
      XBUF(2)=200.
      YBUF(2)=40.
      CALL WMG_GPL(2,XBUF,YBUF)
      CALL WMGSCLOSE(IS1)
      CALL WMGWCLOSE(IW1)
      RETURN
      END
C
C***********************************************************************
C
      SUBROUTINE MO_ARRAY_RESET_TEXT
      
      INCLUDE 'sun_gks77.i'

      CALL GSTXFP(SIMPLX,GSTRKP)
      CALL GSTXAL(GAHNOR,GAVNOR)
      CALL GSCHUP(0.,1.)
      CALL GSCHXP(1.0)
      CALL GSCHSP(0.4)
      RETURN
      END
C END-CODE
