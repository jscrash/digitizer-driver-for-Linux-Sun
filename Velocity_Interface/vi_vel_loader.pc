/* DEC/CMS REPLACEMENT HISTORY, Element VI_VEL_LOADER.PC */
/* *2    20-JUN-1991 16:47:39 DOUG "(SPR 0) Initial code checkin." */
/* *1    20-JUN-1991 16:46:56 DOUG "Velocity analysis function data loader.  Puts velocity functions into SEIS_VEL_HDR and */
/*SEIS_VEL_DATA." */
/* DEC/CMS REPLACEMENT HISTORY, Element VI_VEL_LOADER.PC */
/******************************************************************************

                Copyright Finder Graphics Systems, Inc. 1991
                    Unpublished -- All rights reserved
 
THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc.  AND MAY
CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF

                            Finder Graphics Systems
                            201 Tamal Vista Blvd.
                            Corte Madera, CA  94925
                            (415) 927-0100

(The above notice does not constitute an admission of publication or
unrestricted dissemination of the work)

******************************************************************************/

/* Function Description -------------------------------------------------------
Description:
    Load velocity functions from ASCII file (BHP format).
    VERSION 1.0

Prototype:
    vi_vel_loader -oid aaa -proj bbb -surv ccc -vtyp ddd  -file eee
                  -zunit fff -vunit ggg -src hhh

Parameters:
    -oid aaa                    Oracle ID/Password, e.g. EUREKA/EUREKA
    -proj bbb                   Project name
    -surv ccc                   Seismic survey name
    -vtyp ddd                   Type of input velocity data, legal
                                values are 'AVG', 'INT' or 'STK'
    -file eee                   Velocity function file name
    -zunit fff                  Z-value unit - default is "MSEC"
    -vunit ggg                  Velocity unit - legal values are
                                FEET/SEC or METERS/SEC - default is "METERS/SEC"
    -src hhh                    Data source - default is "LOADER"
 
Limitations/Assumptions:

Revisions:
    04 Jun 1991: DAV - Added velocity function checking before storing.
 
-----------------------------------------------------------------------------*/

#include "esi_c_lib.h"            /* for strings */

#ifndef ESI_QS_H
#include "esi_qs.h"            /* for project projection */
#endif

#include "esi_se.h"            /* for se typedefs and prototypes */

#ifndef ESI_VI_H
#include "esi_vi.h"            
#endif

#ifndef ESI_OR_H
#include "esi_or.h"
#endif

#ifndef ESI_ORACLE_H
#include "esi_oracle.h"
#endif

publicdef INT main (argc, argv)
INT argc;
CHAR *argv[];
    {
    
    PROJECT_NAME project;
    SEIS_SURV survey;
    INT status;
    INT i, j;
    INT num;
    INT numfile;
    BOOL go;
    CHAR vel[4];
    CHAR filename[81];
    CHAR zunit[13];
    CHAR vunit[13];
    CHAR src[13];
    
    /* process command line arguments */
    /* ------------------------------ */
    go = TRUE;
    
    /* Get ORACLE id/password */
    /* ---------------------- */
    i = vi_args (argc, argv, "-oid", &num);
    if (i < 0)
        {
        fprintf (stderr, "No Oracle ID.\n");
        go = FALSE;
        }
    else
        {
        if ((status = or_login (argc, argv)) IS_NOT_EQUAL_TO SUCCESS)
            {
            fprintf (stderr, 
                     "Unable to connect to Oracle using %s: Terminating.\n",
                     argv[i + 1]);
            exit (EXIT_FAILURE);
            }
        }

    /* Get survey name */
    /* --------------- */
    i = vi_args (argc, argv, "-surv", &num);
    if (i < 0)
        {
        fprintf (stderr, "No survey.\n");
        go = FALSE;
        }
    else
        strcpy ((char *)survey, ts_sto_upper (argv[i + 1]));
    
    /* Get project name */
    /* ---------------- */
    i = vi_args (argc, argv, "-proj", &num);
    if (i < 0)
        {
        fprintf (stderr, "No project.\n");
        go = FALSE;
        }
    else
        {
        qs_set_c (QS_PROJECT_NAME, ts_sto_upper (argv[i + 1]), 0);
        strcpy (project, argv[i + 1]);
        if ((status = finder_config_project (FALSE)) IS_NOT_EQUAL_TO SUCCESS)
            {
            fprintf (stderr, "Unable to connect to project %s: Terminating.\n",
                     argv[i + 1]);
            or_logout (FALSE);
            goto NO_PROCESS;
            }
        }

    /* Get input velocity data type */
    /* ---------------------------- */
    i = vi_args (argc, argv, "-vtyp", &num);
    if (i > 0)
        {
        ts_sto_upper (argv[i + 1]);
        if (strcmp (argv[i + 1], "STK") != 0 
            AND strcmp (argv[i + 1], "AVG") != 0)
            {
            go = FALSE;
            fprintf (stderr, "-vtyp must have 'STK' or 'AVG' as argument\n");
            }
        else
            strcpy (vel, argv[i + 1]);
        }
    else
        strcpy (vel, "AVG");        /* default */
    
    /* Get file name */
    /* ------------- */
    i = vi_args (argc, argv, "-file", &numfile);
    if (i > 0 AND numfile > 0 AND go == TRUE)
        {
        strcpy (filename, argv[i + 1]);
        }
    else
        {
        fprintf (stderr,
            "Velocity function file name improperly specified.\n");
        go = FALSE;
        }

    /* If main parameters were present, then can proceed. */
    /* -------------------------------------------------- */
    if (go EQUALS FALSE)
        {
        or_logout (TRUE);
        goto NO_PROCESS;
        }

    /* Get z-value units */
    /* ----------------- */
    i = vi_args (argc, argv, "-zunit", &num);
    if (i > 0 && num > 0)
        {
        ts_sto_upper (argv[i + 1]);
        strcpy(zunit, argv[i + 1]);
        }
    else
        strcpy (zunit, "MSEC");        /* default */

    /* Get velocity units */
    /* ------------------ */
    i = vi_args (argc, argv, "-vunit", &num);
    if (i > 0 && num > 0)
        {
        ts_sto_upper (argv[i + 1]);
        strcpy(vunit, argv[i + 1]);
        }
    else
        strcpy (vunit, "METERS/SEC");        /* default */

    /* Get source */
    /* ---------- */
    i = vi_args (argc, argv, "-src", &num);
    if (i > 0 && num > 0)
        {
        ts_sto_upper (argv[i + 1]);
        strcpy(src, argv[i + 1]);
        }
    else
        strcpy (src, "LOADER");        /* default */

    /* we're ready to process */
    /* ---------------------- */
    status = viz_ld_vel_fun (project, survey, vel, filename, zunit,
                             vunit, src);
    
    or_logout (TRUE);
    
    exit (EXIT_SUCCESS);
    
NO_PROCESS:
    fprintf (stderr,
            "Usage: vi_vel_loader -oid <oracle_login>\n");
    fprintf (stderr, 
            "                     -proj <project>\n");
    fprintf (stderr, 
            "                     -surv <survey>\n");
    fprintf (stderr, 
            "                     -vtyp <velocity type>\n");
    fprintf (stderr, 
            "                     -file <file name>\n");
    fprintf (stderr, 
            "                     -zunit <data unit - 'MSEC' is def.>\n");
    fprintf (stderr, 
            "                     -vunit <vel. unit - 'METERS/SEC' is def.>\n");
    fprintf (stderr, 
            "                     -src <data source - 'LOADER' is def.>\n");
    exit (EXIT_FAILURE);
    
    }
    
/* ========================================================================*/

/* Function Description -------------------------------------------------------
Description:
    Function to load and store velocity functions to DB (BHP).

Prototype:
    publicdef INT viz_ld_vel_fun (PROJECT_NAME project, SEIS_SURV survey,
                                  CHAR *vel, CHAR *filename,
                                  CHAR *zunit, CHAR *vunit
                                  CHAR *src)
    
Parameters:
    (I) project     -(PROJECT_NAME) Name of project containing data.
    (I) surv        -(SEIS_SURV)    Seismic survey name.
    (I) vel         -(CHAR *)       Type of velocity data
                                    - 'STK' or 'AVG'.
    (I) filename    -(CHAR *)       Name of file containing data.
    (I) zunit       -(CHAR *)       Z-value unit.
    (I) vunit       -(CHAR *)       Velocity unit system - FEET, METERS
    (I) src         -(CHAR *)       Source of data - def. is LOADER

Return Value/Status:
    SUCCESS.
    FAIL.

Scope:
    PUBLIC

Limitations/Assumptions:

-----------------------------------------------------------------------------*/
#define TVSIZ 30  /* max no. elements for velocity function */

#ifdef PROTOTYPES
privatedef INT viz_ld_vel_fun (PROJECT_NAME project, SEIS_SURV survey,
                               CHAR *vel, CHAR *filename,
                               CHAR *zunit, CHAR *vunit, CHAR *src)
#else
privatedef INT viz_ld_vel_fun (project, survey, vel, filename, zunit,
                               vunit, src)
PROJECT_NAME project;
SEIS_SURV survey;
CHAR *vel;
CHAR *filename;
CHAR *zunit;
CHAR *vunit;
CHAR *src;
#endif
    {
    DOUBLE ctime[TVSIZ];
    DOUBLE cvnmo[TVSIZ];
    INT status;                     /* status flag for function calls */
    INT time[TVSIZ];                /* time array pointer             */
    INT vnmo[TVSIZ];                /* nmo vel array pointer          */
    INT ntv;                        /* tv pair count                  */
    INT i;                          /* loop index                     */
    INT j;                          /* loop index                     */
    INT iflag;                      /* initial velocity file open flag*/
    CHAR old_line_name[21];         /* previous line_name string      */
    CHAR line_name[21];             /* seismic line name              */
    
    EXEC SQL BEGIN DECLARE SECTION;
        long lineid;
        long shotpt;
        long velid;
        long newid;
        char source[13];
        char vel_type[4];
        char vel_unit[13];
        char z_unit[13];
        char ludate[16];
        long tim;
        long velocity;
        VARCHAR linestmt[500];
        VARCHAR ohdrstmt[500];
        VARCHAR ovdstmt[500];
    EXEC SQL END DECLARE SECTION;
    
    strcpy (old_line_name, "EMPTY");
    
    strcpy (z_unit, zunit);
    strcpy (vel_unit, vunit);
    strcpy (vel_type, vel);
    strcpy (source, src);
    
    /* Set error handling */
    /* ------------------ */
    EXEC SQL WHENEVER SQLERROR GOTO :serr;
    
    iflag = 0;
    FOREVER
        {
        status = vi_get_vel_fun (filename, &iflag, line_name, &shotpt,
                                 &ntv, time, vnmo);
        if (status < 0)
            {
            fprintf (stderr, 
                "(-1 - Could not open file;-2 - unexpected card type)\n");
            fprintf (stderr,
                "(-3 - Different number of times & velocities       )\n");
            fprintf (stderr,
                "Status = %ld\n", status);
            continue;
            }
        else if (status > 0)
            {
            break;
            }

        /* Check for valid velocity function before storing */
        /* ------------------------------------------------ */
        for(i = 0; i < ntv; i++)
            {
            ctime[i] = (DOUBLE)time[i];
            cvnmo[i] = (DOUBLE)vnmo[i];
            }

        status = vi_vel_chk(ntv, ctime, cvnmo);
        if(status EQUALS -1)
            {
            fprintf (stderr, 
                " Filename: '%s'\n", filename);
            fprintf(stderr,
                " lineid = %d\n shotpoint = %d\n\n", lineid, shotpt);
            fprintf(stderr," Times out of order - vel function not saved\n");
            continue;
            }
        else if(status EQUALS -2 AND strcmp(vel, "INT") != 0)
            {
            fprintf (stderr, 
                " Filename: '%s'\n", filename);
            fprintf(stderr,
                " lineid = %d\n shotpoint = %d\n\n", lineid, shotpt);
            fprintf(stderr,
                " Impossible velocity value - most likely a multiple or\n");
            fprintf(stderr,
                " other bad velocity pick.\n");
            fprintf(stderr,
                " Velocity function saved anyway.\n");
            }

        /* Check if line_name changed */
        /* -------------------------- */
        if(strcmp(line_name, old_line_name) != 0)
            {
            strcpy(old_line_name, line_name);
            
            /* Get line_id for this line */
            /* ------------------------- */
            linestmt.len = sprintf ((char *)linestmt.arr,
            "SELECT LINE_ID FROM %s.SEIS_LINE_HDR WHERE \
            LINE_NAME = '%s' AND SURVEY = '%s'" 
            , project, line_name, survey);
                
            EXEC SQL PREPARE S10 FROM  :linestmt;
            EXEC SQL DECLARE C10 CURSOR FOR S10;
            EXEC SQL OPEN C10;
            EXEC SQL FETCH C10 INTO :lineid;
            EXEC SQL CLOSE C10;
            }
            
        /* Get next unique vel_id */
        /* ---------------------- */
        EXEC SQL SELECT ESI.SEIS_VEL_ID_SEQ.NEXTVAL INTO :newid FROM DUAL;
        
        /* Build statement for SEIS_VEL_HDR - Output */
        /* ----------------------------------------- */        
        ohdrstmt.len = sprintf ((char *)ohdrstmt.arr, 
        "INSERT INTO %s.SEIS_VEL_HDR (VEL_ID, LINE_ID, SOURCE, \
        SHOT_POINT, VELOCITY_TYPE, VELOCITY_UNIT, Z_UNIT, \
        LAST_UPDATE) VALUES (%ld, \
        %ld, '%s', %ld, '%s', '%s', '%s', SYSDATE )",
         project, newid, lineid, source, shotpt, vel_type, vel_unit, z_unit);
        
        /* Output new velocity header record */
        /* --------------------------------- */
        EXEC SQL EXECUTE IMMEDIATE :ohdrstmt;
        EXEC SQL COMMIT WORK;
        
        /* Now stuff velocity function into DB */
        /* ----------------------------------- */
        for (j = 0; j < ntv; j++)
            {
            tim = *(time + j);
            velocity = *(vnmo + j);
            
            /*  Build statement for SEIS_VEL_DATA - Output */
            /* ------------------------------------------- */
            
            ovdstmt.len = sprintf ((char *)ovdstmt.arr, 
            "INSERT INTO %s.SEIS_VEL_DATA (VEL_ID,Z_VALUE,VELOCITY) \
            VALUES (%ld, %ld, %ld)",
             project, newid, tim, velocity);
            
            EXEC SQL EXECUTE IMMEDIATE :ovdstmt;
            }
        }
DONE:
    EXEC SQL COMMIT WORK;
    
    /* All ok - clear status flag */
    /* -------------------------- */
    status = SUCCESS;
    return status;
    
serr:
    status = OR_STATUS;
    fprintf (stderr, "SQL error: %d occurred.\n%-70.70s\n", 
             OR_STATUS, OR_MESSAGE);
    return status;
    }
