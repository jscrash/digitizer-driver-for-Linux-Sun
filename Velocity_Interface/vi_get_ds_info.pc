/* DEC/CMS REPLACEMENT HISTORY, Element VI_GET_DS_INFO.PC */
/* *2    11-JUN-1991 14:12:34 JESSIE "(SPR 0) get info from Data Selection   " */
/* *1    11-JUN-1991 14:11:34 JESSIE "VI user interface" */
/* DEC/CMS REPLACEMENT HISTORY, Element VI_GET_DS_INFO.PC */
/******************************************************************************

                Copyright Exploration Systems, Inc. 1989
                    Unpublished -- All rights reserved

THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc.  AND MAY
CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF

                            Exploration Systems
                            c/o Finder Graphics Systems
                            201 Tamal Vista Blvd.
                            Corte Madera, CA  94925
                            (415) 927-0100

(The above notice does not constitute an admission of publication or
unrestricted dissemination of the work)

******************************************************************************/

#include "esi_c_lib.h"
#include "esi_am.h"
#include "esi_tc.h"
#include "esi_ts.h"
#include "esi_wi.h"
#include "esi_oracle.h"
#include "esi_qs.h"
#include "esi_sl.h"
#include "esi_sl_err.h"
#include "esi_vi.h"
#include "vi_ds_cdlgs.rh"
static CHAR VI_RESOURCE_FILE[] = "VI_DS_CDLGS";
#define NullString  ""

/* File Description ---------------------------------------------------------
Overview:

Prototypes and one line descriptions of each function in the file.
Public_Functions:
    publicdef INT vi_get_ds_info (VI_STRUCT pvi);

-----------------------------------------------------------------------------*/

/* Function Description -----------------------------------------------------
Description:

Prototype:
    publicdef INT vi_get_ds_info (NLIST_HEADER *selected_list, CHAR *hor_list);

Parameters:     (indicate (I)/(O)/(M) for input/output/input-and-modified)

Return Value/Status:
    SUCCESS - Successful completion.
    CANCEL
    
Scope:
    PUBLIC
    
Limitations/Assumptions:

-----------------------------------------------------------------------------*/
#if USE_PROTOTYPES
publicdef INT vi_get_ds_info (VI_STRUCT *pvi)
#else
publicdef INT vi_get_ds_info (pvi)
VI_STRUCT *pvi;
#endif
  {
  BOOL done = FALSE;
  INT status = SUCCESS; 
  INT i;
  INT id = 0;
  INT event_id = 0;
  INT event_class = 0;
  INT npnames = 0;
  INT nsource = 0;
  INT item;
  INT selected_items[1];
  INT *hor_selected = (INT *) 0;
  CHAR data_type_name[32];
  CHAR *slist_string = (CHAR *) 0;
  CHAR *hor_string = (CHAR *) 0;
  PROJECT_NAME project;
  NLIST_HEADER select_list = (NLIST_HEADER)0;
  TCP slist_tcp = (TCP ) 0;
  TCP hor_tcp = (TCP ) 0;
    
  EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR horizon_name[80];
  VARCHAR stmt[1000];
  int num_hor;
  EXEC SQL END DECLARE SECTION;
    
    
  status = am_define_resource (AM_DIALOG, VI_RESOURCE_FILE, VI_DATASEL,
                                 NULL_FUNCTION_PTR, &id, NULL);

  if (status != SUCCESS)
    {
    wi_beep(1);
    am_message (AM_STATUS,"Cannot open resource file");
    return FAIL;
    }

  qs_inq_c (QS_PROJECT_NAME, project, (INT *) 0);
  

  status =sl_inq_dtype_string("DATA_TYPE_NAME", SEISMIC_DATA_TYPE,
				data_type_name);
  
  if(status != SUCCESS)
    {
    wi_beep(1);
    am_message (AM_STATUS, "cannot find data type name");
    return FAIL;
    }

  status = sl_inq_slist_names(data_type_name, &slist_tcp, &item);

  /********************************/
  /* end of retrieve seismic list */
  /********************************/

  if (item <= 0)
    {
    wi_beep(1);
    am_message (AM_ALERT, "There are no seismic select lists for this project.\
Please use the Make or Highlight List function to create a seismic select list \
containing the seismic lines that you wish to use for the velocity interpolation processing.");
    return FAIL;
    }

  if (status)
    {
    select_list = NULL;
    wi_beep(1);
    am_message (AM_STATUS,"get seismic list fail!");
    return FAIL;
    }

  fi_push ();

  /* display list on select box */
  /* slist_string = ts_pack_strings (item, slist_tcp); */
  wisselt (id, VI_SEIS_SELECTOR, VI_SEIS_VSCROLL, item, 1, slist_tcp);

  wi_activate (id, VI_SEIS_SELECTOR, ON);

  wiopcd(id);

  /* get event from select box */
  done = FALSE;
  while (done == FALSE)
    {
    wi_request_event (0, &event_class, &event_id, &item);

    switch (item)
    {
    case VI_DS_CANCEL:
      done = TRUE;
      status = FAIL;
      break;

    case VI_SEIS_SELECTOR:
      
      am_message (AM_DIALOG,"Starting retrieve horizon data....");
      wi_query_selections (id, VI_SEIS_SELECTOR, &item, selected_items);
      status = sl_read_list( SEISMIC_DATA_TYPE, slist_tcp[selected_items[0]-1],
   	  		                        &select_list);
      or_load_seismic (slist_tcp[selected_items[0] -1], select_list); 

  /****************************************/
  /* retrieve horizon data from data base */
  /****************************************/
  
  stmt.len = sprintf ((CHAR *) stmt.arr,
  "SELECT DISTINCT SURFACE_CODE FROM %s.SEIS_SURFACE WHERE LINE_ID IN \
  (SELECT LINE_ID FROM TEMP_SEISMIC_LISTS WHERE TEMP_LIST_NAME = '%s')\
  ORDER BY SURFACE_CODE", project, slist_tcp[selected_items[0] -1]);

  EXEC SQL PREPARE S1 FROM :stmt;
  EXEC SQL DECLARE C1 CURSOR FOR S1;
  EXEC SQL OPEN C1 ;

  hor_tcp = (TCP ) 0;
  EXEC SQL FETCH C1 INTO :horizon_name;
  for (i = 0; OR_STATUS == SUCCESS; i++)
    {
    V_SETZERO (horizon_name);
    ts_tcp_append (&hor_tcp,(CHAR *) horizon_name.arr);
    EXEC SQL FETCH C1 INTO :horizon_name;
    }
  EXEC SQL CLOSE C1;

  hor_string = ts_pack_strings (i,hor_tcp);
  /* am_message (AM_DIALOG,"End of retrieve horizon data."); */
  am_message (AM_DIALOG,"");
  
  if (i == 0)
    {
    wi_beep (1);
    am_message (AM_STATUS,"No horizon data was retrieved.");
    wi_set_dialog_text (id, VI_HOR_SELECTOR, NullString);
    }
  else
    {
    hor_selected = TI_ALLOCATE(i);
    wi_set_selection_limit(id, VI_HOR_SELECTOR, i);

    wi_set_dialog_text (id,VI_HOR_SELECTOR,hor_string);
    }
	break;
    case VI_DS_OK:
      wi_query_selections (id,VI_SEIS_SELECTOR,&item, selected_items);
      if (item != 1)
        {
        wi_beep (1);
        am_message (AM_ALERT,"Please select seismic list.");
        }
      else
        {
        wi_query_selections (id,VI_HOR_SELECTOR,&npnames,hor_selected);
        if (npnames < 1)
          {
          wi_beep (1);
          am_message (AM_ALERT,"You must select a seismic horizon for use with the Velocity Interpolation application. \
Please click on the name of the horizon you wish to use, \
or click on the Cnacel button to terminate the Velocity Interpolation process.");
          }
        else
          {
          strcpy (pvi->list_name, slist_tcp[selected_items[0] -1]);
          /*sscanf(slist_tcp[selected_items[0] -1],"%s", pvi->list_name);*/
	  
          pvi->hor_tcp = (TCP) 0;
	  for (i = 0; i < npnames; i++)
	    ts_tcp_append (&pvi->hor_tcp, hor_tcp[ hor_selected[i] -1]);
	  
	  status = SUCCESS;
	  done = TRUE;
	  break;
          }
        }
    }
    }
  if (slist_tcp != (TCP) 0)
    ts_tcp_free(slist_tcp);
  if (hor_tcp != (TCP) 0)
    ts_tcp_free(hor_tcp);
  if (slist_string != (CHAR *) 0)
    tc_free (slist_string);
  if (hor_string != (CHAR *) 0)
    tc_free (hor_string);
  if (hor_selected != (INT *) 0)
    tc_free (hor_selected);
  am_release_resource(id);
  fi_pop ();
  return status;
  }

