/* DEC/CMS REPLACEMENT HISTORY, Element SL_FD_LYNX_NL.PC */
/* *3     6-MAY-1991 16:48:31 PURNA "(SPR 0) add select list in culture overlay for data mover" */
/* *2    30-JUL-1990 17:23:42 PURNA "(SPR 0) add lynx,lease select_list" */
/* *1    30-JUL-1990 17:14:40 PURNA "feed lynx nlinst" */
/* DEC/CMS REPLACEMENT HISTORY, Element SL_FD_LYNX_NL.PC */
#include "esi_sl.h"
#ifndef ESI_C_LIB_H
#include "esi_c_lib.h"
#endif
#ifndef ESI_ORACLE_H
#include "esi_oracle.h"
#endif
#ifndef ESI_NL_H
#include "esi_nl.h"
#endif
#ifndef ESI_QS_H
#include "esi_qs.h"
#endif
#ifndef ESI_TS_H
#include "esi_ts.h"
#endif


publicdef INT sl_feed_lynx_nl(sl_struct)
SL_FEED_NL_STRUCT *sl_struct;
{
    INT status;
    PROJECT_NAME project_name;
    static UINT ndim=1;
    static UINT dim_list[1];
    static VOIDPTR value_list[1];

    EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR select[1024];
	int id;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO errpt;

    qs_inq_c (QS_PROJECT_NAME, project_name, (INT *)0);

    if (sl_struct->null_control)
	{
	if (sl_struct->null_sql)
	    {
            select.len = sprintf ((char *)select.arr,
	    "SELECT DISTINCT %s FROM %s.%s ",
		sl_struct->key_column, project_name,sl_struct->table_name);
	    }
	else
	    {
	    select.len = sprintf ((char *)select.arr,
	    "SELECT DISTINCT %s FROM %s.%s WHERE %s",
		sl_struct->key_column, project_name,
		sl_struct->table_name, sl_struct->sql_phrase);
	    }
	}
    else
	{
	if (sl_struct->null_sql)
	    {
	    select.len = sprintf ((char *)select.arr, 
	    "SELECT DISTINCT B.LYNX_ID \
FROM %s.%s A, TEMP_LYNX_LISTS B \
WHERE A.%s = B.LYNX_ID AND TEMP_PROCESS_ID = USERENV('SESSIONID') \
AND TEMP_LIST_NAME = '%s'",
		project_name, sl_struct->table_name,
		sl_struct->key_column,sl_struct->name);
	    }
	else
	    {
	    select.len = sprintf ((char *)select.arr, 
	    "SELECT DISTINCT B.LYNX_ID \
FROM %s.%s A,TEMP_LYNX_LISTS B \
WHERE A.%s = B.LYNX_ID AND TEMP_PROCESS_ID = USERENV('SESSIONID') \
AND TEMP_LIST_NAME = '%s' AND (%s)",
		project_name, sl_struct->table_name,
		sl_struct->key_column,sl_struct->name,
		sl_struct->sql_phrase);
	    }
	}
        /*  prepare the SQL.                */

    EXEC SQL PREPARE S3 FROM : select;
    EXEC SQL DECLARE C3 CURSOR FOR S3;
    EXEC SQL OPEN C3;

    dim_list[0] = 1, value_list[0] = (VOIDPTR) &id;

    FOREVER
	{
	EXEC SQL FETCH C3 INTO : id;
	if(OR_STATUS EQUALS OR_EOF) 
	    break;
	status = nl_add_points (sl_struct->nlist, 1, ndim, dim_list,
                                    value_list);
	if(status != SUCCESS) return status;
	}
    EXEC SQL CLOSE C3;

errpt :
    return OR_STATUS;
}
