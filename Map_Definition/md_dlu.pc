/* DEC/CMS REPLACEMENT HISTORY, Element MD_DLU.PC*/
/* *2    17-AUG-1990 21:56:34 VINCE "(SPR 5644) Code Cleanup"*/
/* *1    19-JUN-1989 12:34:12 SYSTEM ""*/
/* DEC/CMS REPLACEMENT HISTORY, Element MD_DLU.PC*/
/*****************************************************************************/
/******************************************************************************

                Copyright Exploration Systems, Inc. 1989
                    Unpublished -- All rights reserved

THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc.  AND MAY
CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF

                            Exploration Systems
                            c/o Finder Graphics Systems
                            201 Tamal Vista Blvd.
                            Corte Madera, CA  94925
                            (415) 927-0100

(The above notice does not constitute an admission of publication or
unrestricted dissemination of the work)

******************************************************************************/

#include "esi_c_lib.h"
#include "esi_gl_defs.h"
#include "esi_md_defs.h"
#include "esi_md_err.h"
#include "esi_md_msg.h"
#include "esi_am.h"
#include "esi_oracle.h"
#include "esi_mg.h"

/* Function Description -----------------------------------------------------
Description:
    Function to do dictionary table lookup parameter validation
    on given parameter.

Prototype:
    publicdef INT md_dlu(MD_PARM_STRUCT *parmstruc,MD_KEYLIST *keylist);

Parameters:     (indicate (I)/(O)/(M) for input/output/input-and-modified)
    parmstruc       -(MD_PARM_STRUCT *) Map def parameter structure.
    keylist         -(MD_KEYLIST *) Keyword attributes.

Return Value/Status:
    SUCCESS - Successful completion.
    MD_ORACLE_ERROR
    MD_COLUMN_NOT_FOUND
    
Scope:
    PUBLIC
    
Limitations/Assumptions:

-----------------------------------------------------------------------------*/

/* BEGIN:   */
#if USE_PROTOTYPES
publicdef INT md_dlu (MD_PARM_STRUCT *parmstruc, MD_KEYLIST *keylist)
#else
publicdef INT md_dlu (parmstruc, keylist)
MD_PARM_STRUCT *parmstruc;
MD_KEYLIST *keylist;
#endif
    {
    PROGNAME ("MD_DLU");
    INT status;                     /* RETURN STATUS */
    CHAR text[STMAX];
    
/*     EXEC ORACLE OPTION (REBIND = NO); */
    
    EXEC SQL BEGIN DECLARE SECTION;
    static VARCHAR colname[31];     /* COLUMN NAME */
    static VARCHAR tabname[31];     /* TABLE NAME */
    static VARCHAR dumname[31];     /* DUMMY INTO VARIABLE */
    EXEC SQL END DECLARE SECTION;
    
    /* ********************************************************************** */
    
    status = SUCCESS;
    
    /* * SET BRANCHING AND DO SELECT * */
    /* ------------------------------- */
    
    EXEC SQL WHENEVER SQLERROR GOTO orcerr;
    EXEC SQL WHENEVER NOT FOUND GOTO not_found;
    
    V_FROMC (colname, parmstruc->parmval.cval);
    V_FROMC (tabname, keylist->val_arg);
    
    EXEC SQL SELECT CNAME INTO : dumname FROM ESI.FINDER_COLUNMS WHERE TNAME =  :
                                                                               tabname 
                                                                               AND 
                                                                               CNAME =
                                                                               : 
                                                                               colname;
    
    parmstruc->parmtype = 1;
    goto finished;
    
    /* * COLUMN VALUE NOT FOUND * */
    /* -------------------------- */
    
not_found:
    status = MD_COLUMN_NOT_FOUND;
    sprintf (text, mg_message (MD_COLUMN_NOT_FOUND_MSG), keylist->val_arg,
             parmstruc->parmval.cval);
    
    am_message (AM_ALERT, text);
    goto finished;
    
    /* * ORACLE ERROR * */
    /* ---------------- */
    
orcerr:
    status = MD_ORACLE_ERROR;
    
    /* * RETURN * */
    /* ---------- */
    
finished:
    return status;
    }
/* END:     */
