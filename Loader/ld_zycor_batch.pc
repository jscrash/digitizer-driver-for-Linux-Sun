/* DEC/CMS REPLACEMENT HISTORY, Element LD_ZYCOR_BATCH.PC */
/* *2     1-MAY-1991 13:57:26 KEE "(SPR -1) Zycor batch main" */
/* *1     1-MAY-1991 13:57:08 KEE "Zycor batch main" */
/* DEC/CMS REPLACEMENT HISTORY, Element LD_ZYCOR_BATCH.PC */
/******************************************************************************     */
/*                                                                                  */
/*                Copyright Finder Graphics Systems, Inc. 1989                      */
/*           Unpublished -- All rights reserved                                     */
/*                                                                                  */
/*THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Finder Graphics Systems, Inc.  AND   */
/*MAY CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE  */
/*DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE         */
/*MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF       */
/*                                                                                  */
/*            Finder Graphics Systems, Inc.                                         */
/*            201 Tamal Vista Blvd                                                  */
/*            Corte Madera, CA  USA 94925                                           */
/*            (415) 927-0100                                                        */
/*                                                                                  */
/*(The above notice does not constitute an admission of publication or              */
/*unrestricted dissemination of the work)                                           */
/*                                                                                  */
/******************************************************************************     */

/* ************************************************************************

   NAME: LD_ZYCOR_BATCH.PC

   AUTHOR: Rod Hanks (BHP - Consultant)
   DATE:   May 17th, 1990
   DESCRIPTION: Batch job to extract information from a map for output to
		ZYCOR.

   MODIFY: Jim Green (Unocal)
   DATE:   November, 1990

   ************************************************************************ */

#ifndef ESI_GL_DEFS_H
#include "esi_gl_defs.h"
#endif
#ifndef ESI_ORACLE_H
#include "esi_oracle.h"
#endif
#ifndef ESI_QS_H
#include "esi_qs.h"
#endif
#ifndef ESI_CT_H
#include "esi_ct.h"
#endif
#ifndef ESI_FI_H
#include "esi_fi.h"
#endif
#ifndef ESI_CT_ERR_H
#include "esi_ct_err.h"
#endif
#ifndef ESI_SL_METH_AH
#include "esi_sl_meth.ah"
#endif
#ifndef ESI_MG_H
#include "esi_mg.h"
#endif
#ifndef ESI_AM_H
#include "esi_am.h"
#endif
#ifndef LD_ZYCOR_WORK_H
#include "ld_zycor_work.h"
#endif

publicdef INT main ()
    {
/****************************************************************************

	V a r i a b l e   D e c l a r a t i o n s .

******************************************************************************/

    PROJECT_NAME project;
    PROJECT_NAME database;
    ANALYST_NAME account;
    ORACLE_NAME password;
    CHAR dummy[255];
    CHAR *pos;
    CHAR mapName[32][80];
    CHAR *login_list[3];
    CHAR *dummyAddr;
    CHAR faultFile[81];
    CHAR cultureFile[81];
    CHAR xyzFile[81];
    INT maxMaps;
    INT mapCounter;
    INT status;
/*
				General variable declarations.
*/
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR sqlstmt[400];
	VARCHAR mapProjection[16];
    EXEC SQL END DECLARE SECTION;
/*
				Oracle variable declarations.
*/
/****************************************************************************

	I n i t i a l i z a t i o n .

******************************************************************************/

    account[0] = 0;
    password[0] = 0;
    database[0] = 0;
    project[0] = 0;
    faultFile[0] = 0;
    cultureFile[0] = 0;
    xyzFile[0] = 0;
    maxMaps = 0;
/*
					Initialize in case any of this stuff
					is missing from the command stream.
*/
    while (gets(dummy) != (CHAR *) 0)
        {
	    pos = dummy;
	    while (*pos != ':' && *pos != 0)
	        {
		pos++;
		}
	    if (*pos == ':')
	        {
		*pos = 0;
		*pos++;
		}
	    if (strcmp(dummy, "ACCOUNT") == 0)
		{
		strcpy(account, pos);
		}
	    else if (strcmp(dummy, "PASSWORD") == 0)
		{
		strcpy(password, pos);
		}
	    else if (strcmp(dummy, "DATABASE") == 0)
		{
		strcpy(database, pos);
		}
	    else if (strcmp(dummy, "PROJECT") == 0)
		{
		strcpy(project, pos);
		}
	    else if (strcmp(dummy, "FAULT") == 0)
		{
		strcpy(faultFile, pos);
		}
	    else if (strcmp(dummy, "XYZ") == 0)
		{
		strcpy(xyzFile, pos);
		}
	    else if (strcmp(dummy, "CULTURE") == 0)
		{
		strcpy(cultureFile, pos);
		}
	    else if (strcmp(dummy, "MAPNAME") == 0)
		{
		strcpy(mapName[maxMaps], pos);
		maxMaps = maxMaps + 1;
		}
	}
/*
				Above, retrieve all the lines in the command
				file and parse them out by label.
*/
    strcpy(dummy, account);
    strcat(dummy, "/");
    strcat(dummy, password);
    if (strlen(database) > 0)
	{
	strcat(dummy, "@");
	strcat(dummy, database);
	} 
    login_list[0] = dummy;
    login_list[1] = login_list[0];
    login_list[2] = login_list[0];
    status = or_login(3, login_list);
/*
				I give up, why DO we pass it 3 times?
*/
    if (status != 0)
        {
        printf("Unable to login to Oracle, code = %d\n", status);
        }
/*
				Above, pull out the initial info from the
				command file, and log on to Oracle.
*/
    else
	{
	am_initialize();
        qs_set_c(QS_PROJECT_NAME, project, 0);
        if ((status = finder_config_project(FALSE)) != SUCCESS)
            {
    	    printf("Unable to connect to project\n");
	    }
	else
	    {
/*****************************************************************************

	M a i n   L o g i c .

*****************************************************************************/
	    for (mapCounter = 0; mapCounter < maxMaps; mapCounter++)
	        {
/*
				Retrieve the map name from the command file.
*/
    	        sqlstmt.len = sprintf((char *)sqlstmt.arr,
"SELECT PROJECTION FROM %s.MAP_DEFINITIONS \
WHERE MAP_NAME = '%s'", project, mapName[mapCounter]);

		EXEC SQL PREPARE S1 FROM :sqlstmt;
		EXEC SQL DECLARE OBJ_CUR CURSOR FOR S1;
                EXEC SQL OPEN OBJ_CUR;
		EXEC SQL FETCH OBJ_CUR INTO :mapProjection;
/*
				Get the projection and the clip region.
*/
		if (OR_STATUS EQUALS SUCCESS)
		    {
		    EXEC SQL CLOSE OBJ_CUR;
                    qs_set_c(QS_MAP_PROJECTION, (CHAR *)mapProjection.arr, 0);
	            if (strlen(xyzFile) != 0)
		        {
		        ld_zycor_xyz(mapName[mapCounter], project, xyzFile);
		        }
/*
				Above, unload seismic data.
*/
	            if (strlen(faultFile) != 0)
		        {
		        ld_zycor_fault(mapName[mapCounter], project, account, faultFile);
		        }
/*
				Above, unload fault data.
*/
	            if (strlen(cultureFile) != 0)
		        {
		        ld_zycor_culture(mapName[mapCounter], project, cultureFile);
		        }
/*
				Above, unload culture data.
*/
		    }
	        }
/*
				Above, loop to unload map data.
*/
/****************************************************************************

	C l e a n   U p   A n d   E x i t .

******************************************************************************/
	    exit(EXIT_SUCCESS);
	    }
	}
    }
