/* DEC/CMS REPLACEMENT HISTORY, Element LD_LM2_EXP_WELLS_OUT.PC */
/* *3    14-AUG-1991 11:59:15 KEE "(SPR -1) Put in File Lock/Unlock logic" */
/* *2     1-MAY-1991 21:58:49 KEE "(SPR -1) Landmark Export" */
/* *1     1-MAY-1991 21:10:27 KEE "Landmark Import & Export, Zycor Export and Mimic Export" */
/* DEC/CMS REPLACEMENT HISTORY, Element LD_LM2_EXP_WELLS_OUT.PC */
/******************************************************************************     */
/*                                                                                  */
/*                Copyright Finder Graphics Systems, Inc. 1989                      */
/*           Unpublished -- All rights reserved                                     */
/*                                                                                  */
/*THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Finder Graphics Systems, Inc.  AND   */
/*MAY CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE  */
/*DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE         */
/*MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF       */
/*                                                                                  */
/*            Finder Graphics Systems, Inc.                                         */
/*            201 Tamal Vista Blvd                                                  */
/*            Corte Madera, CA  USA 94925                                           */
/*            (415) 927-0100                                                        */
/*                                                                                  */
/*(The above notice does not constitute an admission of publication or              */
/*unrestricted dissemination of the work)                                           */
/*                                                                                  */
/******************************************************************************     */

/* ************************************************************************

   NAME: LD_LM2_EXP_WELLS_OUT.C

   AUTHOR: Rod Hanks
   DATE:   June 15th, 1990
   DESCRIPTION: Unload well information (name, status, x, y)
		from a particular map overlay in Finder.

   ************************************************************************ */

#ifndef ESI_ORACLE_H
#include "esi_oracle.h"
#endif
#ifndef ESI_NL_H
#include "esi_nl.h"
#endif
#ifndef ESI_CT_H
#include "esi_ct.h"
#endif
#ifndef LD_LM2_EXP_WORK_H
#include "ld_lm2_exp_work.h"
#endif

#if USE_PROTOTYPES
publicdef VOID ld_lm2_exp_wells_out(CHAR *selectPhrase, CHAR *selectList, 
		   BOOL *firstIteration, FILE **spfile, 
		   CHAR *mapName, PROJECT_NAME projectName, 
		   DOUBLE lowerLeftX, DOUBLE lowerLeftY,
		   DOUBLE upperRightX, DOUBLE upperRightY,
		   FILENAME fileName1, BOOL convertProj, 
		   PROJECTION_STRUCTURE *defaultProj, 
	           PROJECTION_STRUCTURE *inputProj)
#else
publicdef VOID ld_lm2_exp_wells_out(selectPhrase, selectList,
		     firstIteration, spfile,
		     mapName, projectName, 
		     lowerLeftX, lowerLeftY, upperRightX, upperRightY,
		     fileName1, convertProj, defaultProj, inputProj)
CHAR		*selectPhrase;
CHAR		*selectList;
BOOL		*firstIteration;
FILE		**spfile;
CHAR		*mapName;
PROJECT_NAME	projectName;
DOUBLE		lowerLeftX;
DOUBLE		lowerLeftY;
DOUBLE		upperRightX;
DOUBLE		upperRightY;
FILENAME	fileName1;
BOOL	             convertProj;
PROJECTION_STRUCTURE *defaultProj;
PROJECTION_STRUCTURE *inputProj;
#endif
    {
/****************************************************************************

	V a r i a b l e   D e c l a r a t i o n s .

******************************************************************************/

    INT			status;
    NLIST_HEADER	wellList = (NLIST_HEADER) 0;
    INT			wellCount;
    FLOAT 		x,y;
    VOIDPTR 		v_list[4];
    UINT    		colList[4];
    CHAR		thisName[51];
    CHAR		thisStatus[11];
    COORD		coordX;
    COORD		coordY;
    CHAR		thisUWI[51];
/*
				General variable declarations.
*/
    static BOOL declare_section = FALSE;
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR sqlstmt[400];
        static VARCHAR xref_wellname[51];
	static VARCHAR wellUWI[21];
    EXEC SQL END DECLARE SECTION;

    if (declare_section == FALSE)
      {
        sqlstmt.len = sprintf((char *)sqlstmt.arr,
                      "SELECT VENDOR_WELL_NAME \
                      FROM %s.WELL_NAME_UWI_XREF \
                      WHERE FINDER_UWI = :wellUWI AND VENDOR = 'LANDMARK'", projectName);
        EXEC SQL PREPARE S1 FROM :sqlstmt;
        EXEC SQL DECLARE C1 CURSOR FOR S1;
      }
    EXEC SQL WHENEVER SQLERROR GOTO err;

/****************************************************************************

	I n i t i a l i z a t i o n .

******************************************************************************/

    if (*firstIteration)
	{
	printf("Processing well information for map %s\n", mapName);
	printf("UWI, well name, status, x, y file is %s\n", fileName1);
	*spfile = ho_open(fileName1, "w", NULL);
	status = ho_lock(*spfile, ON);
	if (*spfile == (FILE *)NULL || status != SUCCESS)
	    {
	    printf("Unable to open file -- %s\n", fileName1);
	    }
        else
	    {
	    fprintf(*spfile, 
"UWI             Key well                         Stat   X_Surf     Y_Surf\n");
	    *firstIteration = FALSE;
	    }
	}
/*****************************************************************************

	M a i n   L o g i c .

*****************************************************************************/

    if (*spfile != (FILE *)NULL)
	{
	ld_get_wells(selectPhrase, selectList, 
			    &wellList, &wellCount,
		            lowerLeftX, lowerLeftY, 
			    upperRightX, upperRightY,
			    projectName);
/*
				Get a list of wells which match our
				list and phrase criteria.
*/
	if (wellCount <= 0)
	    {
	    printf("Null well information found for map %s\n", mapName);
	    }
	else
	    {
	    colList[0] = 1;
	    colList[1] = 2;
	    colList[2] = 3;
	    colList[3] = 4;
	    v_list[0] = (VOIDPTR)thisName;
	    v_list[1] = (VOIDPTR)thisStatus;
	    v_list[2] = (VOIDPTR)&x;
	    v_list[3] = (VOIDPTR)&y;
            status = nl_first_row(wellList, 4, colList, v_list);
/*
				Initialize to take a trip thru the NLIST
				of wells for this map.
*/
	    while (status >= 0 && ((status & NL_EOL) != NL_EOL))
		{
		ld_lm2_get_uwi(projectName, thisName, thisUWI);

	        V_FROMC(wellUWI,thisUWI);
                EXEC SQL OPEN C1 using :wellUWI;
                EXEC SQL FETCH C1 INTO :xref_wellname;
	      
	        if (OR_STATUS == SUCCESS)
	          {
   	             V_SETZERO(xref_wellname);
	             strcpy(thisName,(CHAR *)xref_wellname.arr);
	          }
		while (strlen(thisName) < 33)
		    {
		    strcat(thisName, " ");
		    }
		thisName[33-1] = ' ';
		thisName[33] = 0;
		while (strlen(thisStatus) < 7) 
		    {
		    strcat(thisStatus, " ");
		    }
		thisStatus[7-1] = ' ';
		thisStatus[7] = 0;
		coordX = (COORD) x;
		coordY = (COORD) y;
		if (convertProj)
		    {
		    ct_transform_point(coordX, coordY, defaultProj,
					  &coordX, &coordY, inputProj);
		    }
		fprintf(*spfile, "                %s%s%10.0lf %13.0lf\n", 
			thisName, thisStatus, coordX, coordY);
		status = nl_next_row(wellList, 4, colList, v_list);
		}
	    if (status < 0)
		{
		printf("error reading nlist %s\n", mg_message(status));
		}
	    nl_free_nlist(wellList);
	    }
	}
/*****************************************************************************

	C l e a n   U p   A n d   E x i t .

******************************************************************************/
    EXEC SQL CLOSE C1;
    return;

err:
    printf("\n %.70s\n",sqlca.sqlerrm.sqlerrmc);
    return;
    }


