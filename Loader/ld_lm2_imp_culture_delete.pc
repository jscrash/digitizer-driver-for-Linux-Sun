/* DEC/CMS REPLACEMENT HISTORY, Element LD_LM2_IMP_CULTURE_DELETE.PC */
/* *2     1-MAY-1991 21:53:02 KEE "(SPR -1) Landmark Import" */
/* *1     1-MAY-1991 21:14:18 KEE "Landmark Import & Export, Zycor Export and Mimic Export" */
/* DEC/CMS REPLACEMENT HISTORY, Element LD_LM2_IMP_CULTURE_DELETE.PC */
/******************************************************************************     */
/*                                                                                  */
/*                Copyright Finder Graphics Systems, Inc. 1989                      */
/*           Unpublished -- All rights reserved                                     */
/*                                                                                  */
/*THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Finder Graphics Systems, Inc.  AND   */
/*MAY CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE  */
/*DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE         */
/*MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF       */
/*                                                                                  */
/*            Finder Graphics Systems, Inc.                                         */
/*            201 Tamal Vista Blvd                                                  */
/*            Corte Madera, CA  USA 94925                                           */
/*            (415) 927-0100                                                        */
/*                                                                                  */
/*(The above notice does not constitute an admission of publication or              */
/*unrestricted dissemination of the work)                                           */
/*                                                                                  */
/******************************************************************************     */

/* ************************************************************************

   NAME: LD_LM2_IMP_CULTURE_DELETE.PC

   AUTHOR: Rod Hanks
   DATE:   June 21st, 1990
   DESCRIPTION: Delete an existing graphic object we have decided to
		overwrite.

   ************************************************************************ */

#ifndef ESI_ORACLE_H
#include "esi_oracle.h"
#endif
#ifndef ESI_NL_H
#include "esi_nl.h"
#endif
#ifndef ESI_NL_ERR_H
#include "esi_nl_err.h"
#endif
#ifndef ESI_HO_FILES_H
#include "esi_ho_files.h"
#endif

#if USE_PROTOTYPES
publicdef VOID  ld_lm2_imp_culture_delete (CHAR *objectName, INT object_id, 
				      CHAR *project)
#else
publicdef VOID ld_lm2_imp_culture_delete (objectName, object_id, project)
CHAR		*objectName;
INT		object_id;
CHAR		*project;
#endif
    {
/****************************************************************************

	V a r i a b l e   D e c l a r a t i o n s .

******************************************************************************/

    INT 	   status;
    CHAR	   nlist_id[26];
    FILENAME	   full_filename;
/*
				General variable declarations.
*/
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR sqlstmt[200];
	int	lineID;
	int	objectID;
    EXEC SQL END DECLARE SECTION;
/*
				Oracle variable declarations.
*/
/****************************************************************************

	I n i t i a l i z a t i o n .

******************************************************************************/

    ho_add_path("ESI$CULTURE", objectName, sizeof(FILENAME),
					full_filename);
    objectID = object_id;
    sqlstmt.len = sprintf((char *)sqlstmt.arr,
"SELECT ITEM_ID FROM %s.GRAPHIC_OBJECT_CORRELATIONS \
WHERE OBJECT_ID = :objectID AND ITEM_CLASS = 'LINE'", project);

    EXEC SQL PREPARE s11 FROM :sqlstmt;
    if (OR_STATUS != 0) ld_show_error(OR_STATUS, "prepare s11");
    EXEC SQL DECLARE ITEM_LOOK CURSOR FOR S11;
    EXEC SQL OPEN ITEM_LOOK USING :objectID;
    if (OR_STATUS != 0) ld_show_error(OR_STATUS, "OPEN ITEM_LOOK");
    EXEC SQL FETCH ITEM_LOOK INTO :lineID;
    while (OR_STATUS == SUCCESS)
	{
        sprintf(nlist_id, "%d", lineID);
	status = nl_delete_nlist(full_filename, nlist_id);
       	if (status != 0) ld_show_error(status, "nl_delete_nlist");
/*
					Delete the existing Nlists.
*/
        EXEC SQL FETCH ITEM_LOOK INTO :lineID;
        }
    if (OR_STATUS < 0) ld_show_error(OR_STATUS, "FETCH ITEM_LOOK");
    EXEC SQL CLOSE ITEM_LOOK;
    if (OR_STATUS != 0) ld_show_error(OR_STATUS, "CLOSE ITEM_LOOK");

    sqlstmt.len = sprintf((char *)sqlstmt.arr,
"DELETE FROM %s.LINES \
WHERE LINE_ID IN (SELECT ITEM_ID FROM %s.GRAPHIC_OBJECT_CORRELATIONS \
WHERE OBJECT_ID = :objectID)", project, project);

    EXEC SQL PREPARE s15 FROM :sqlstmt;
    if (OR_STATUS != 0) ld_show_error(OR_STATUS, "prepare s15");
    EXEC SQL EXECUTE S15 using :objectID;
    if (OR_STATUS < SUCCESS) ld_show_error(OR_STATUS, "execute s15");
/*
					Delete from the Lines table.
*/
    sqlstmt.len = sprintf((char *)sqlstmt.arr,
"DELETE FROM %s.TEXT \
WHERE TEXT_ID IN (SELECT ITEM_ID FROM %s.GRAPHIC_OBJECT_CORRELATIONS \
WHERE OBJECT_ID = :objectID)", project, project);

    EXEC SQL PREPARE s15 FROM :sqlstmt;
    if (OR_STATUS != 0) ld_show_error(OR_STATUS, "prepare s15");
    EXEC SQL EXECUTE S15 using :objectID;
    if (OR_STATUS < SUCCESS) ld_show_error(OR_STATUS, "execute s15");
/*
					Delete from the TEXT table.
*/
    sqlstmt.len = sprintf((char *)sqlstmt.arr,
"DELETE FROM %s.NODES \
WHERE NODE_ID IN (SELECT ITEM_ID FROM %s.GRAPHIC_OBJECT_CORRELATIONS \
WHERE OBJECT_ID = :objectID)", project, project);

    EXEC SQL PREPARE s15 FROM :sqlstmt;
    if (OR_STATUS != 0) ld_show_error(OR_STATUS, "prepare s15");
    EXEC SQL EXECUTE S15 using :objectID;
    if (OR_STATUS < SUCCESS) ld_show_error(OR_STATUS, "execute s15");
/*
					Delete from the NODES table.
*/
    sqlstmt.len = sprintf((char *)sqlstmt.arr,
"DELETE FROM %s.GRAPHIC_OBJECT_CORRELATIONS \
WHERE OBJECT_ID = :objectID", project);

    EXEC SQL PREPARE s16 FROM :sqlstmt;
    if (OR_STATUS != 0) ld_show_error(OR_STATUS, "prepare s16");
    EXEC SQL EXECUTE S16 using :objectID;
    if (OR_STATUS < SUCCESS) ld_show_error(OR_STATUS, "execute s16");
/*
					Delete from the correlations table.
*/
    sqlstmt.len = sprintf((char *)sqlstmt.arr,
"DELETE FROM %s.GRAPHIC_OBJECTS \
WHERE OBJECT_ID = :objectID", project);

    EXEC SQL PREPARE s17 FROM :sqlstmt;
    if (OR_STATUS != 0) ld_show_error(OR_STATUS, "prepare s17");
    EXEC SQL EXECUTE s17 using :objectID;
    if (OR_STATUS < SUCCESS) ld_show_error(OR_STATUS, "execute s17");
/*
					Delete from the objects table.
*/
    return;
    }
