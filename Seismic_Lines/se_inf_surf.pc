/* DEC/CMS REPLACEMENT HISTORY, Element SE_INF_SURF.PC*/
/* *3    17-AUG-1990 22:16:57 VINCE "(SPR 5644) Code Cleanup"*/
/* *2    25-JUL-1989 20:02:47 GILLESPIE "(SPR 50) Seismic system revamp"*/
/* *1    19-JUN-1989 12:36:39 SYSTEM ""*/
/* DEC/CMS REPLACEMENT HISTORY, Element SE_INF_SURF.PC*/
/*****************************************************************************/
/******************************************************************************

                Copyright Exploration Systems, Inc. 1989
                    Unpublished -- All rights reserved

THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc.  AND MAY
CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF

                            Exploration Systems
                            c/o Finder Graphics Systems
                            201 Tamal Vista Blvd.
                            Corte Madera, CA  94925
                            (415) 927-0100

(The above notice does not constitute an admission of publication or
unrestricted dissemination of the work)

******************************************************************************/

#include "esi_c_lib.h"
#include "esi_se_int.h"

#ifndef ESI_NL_H

#include "esi_nl.h"

#endif

#ifndef ESI_QS_H

#include "esi_qs.h"

#endif

#ifndef ESI_ORACLE_H

#include "esi_oracle.h"

#endif

#define NDIM 1
static BOOL first = TRUE;

/* Function Description -----------------------------------------------------
Description:
    Used to get  list of suface picked for a given line on a
    given surface type attribute and format. 

Prototype:
    publicdef INT se_inf_surf (SEIS_SURFACE_DATA_CLASS surf_type ,SEIS_SURFACE_DATA_TYPE data_type,
        FULL_LINE_NAME *line,CHAR *source , SEIS_ATTRIBUTE_DATA_TYPE attribute , 
        SEIS_SURFACE_NLIST_TYPE format,SEIS_LINE_TYPE line_type , INT version , 
        NLIST_HEADER *nl_surf );

Parameters:     (indicate (I)/(O)/(M) for input/output/input-and-modified)
SEIS_SURFACE_DATA_CLASS surf_type ;
SEIS_SURFACE_DATA_TYPE data_type ;
FULL_LINE_NAME *line;
CHAR *source ;
SEIS_ATTRIBUTE_DATA_TYPE attribute ;
SEIS_SURFACE_NLIST_TYPE format ;
SEIS_LINE_TYPE line_type ;
INT version ;
NLIST_HEADER *nl_surf ;
    (I) line        -(FULL_LINE_NAME *) Line name and survey structure pointer.
    (I) surf_type   -(SEIS_SURFACE_DATA_CLASS) Type of the surface to be stored.    
    (I) data_type   -(SEIS_SURFACE_DATA_TYPE) Type of the data  stored for the surface.     
    (I) source      -(CHAR *) Source to which pertains the data.    
    (I) attribute   -(SEIS_ATTRIBUTE_DATA_TYPE) Gives the attribute of the seismic
                        traces where data was picked.
    (I) format      -(SEIS_SURFACE_NLIST_TYPE) Format in which the data is stored 
                        in the nlist.
    (I) line_type   -(SEIS_LINE_TYPE) Type of the seismic line.         
    (I) version     -(INT) Version number for the pick.
    (O) nl_surf     -(NLIST_HEADER *) One dimensional nlist containing the result of 
                        the query; First dimension is  :  surf_code.

Return Value/Status:
    SUCCESS - Successful completion.
    OR_STATUS
    
Scope:
    PUBLIC
    
Limitations/Assumptions:

-----------------------------------------------------------------------------*/

/* BEGIN:   */
#if USE_PROTOTYPES
publicdef INT se_inf_surf (SEIS_SURFACE_DATA_CLASS surf_type,
                           SEIS_SURFACE_DATA_TYPE data_type, FULL_LINE_NAME *line,
                           CHAR *source, SEIS_ATTRIBUTE_DATA_TYPE attribute,
                           SEIS_SURFACE_NLIST_TYPE format, SEIS_LINE_TYPE line_type,
                           INT version, NLIST_HEADER *nl_surf)
#else
publicdef INT se_inf_surf (surf_type, data_type, line, source, attribute, format,
                           line_type, version, nl_surf)
SEIS_SURFACE_DATA_CLASS surf_type;
SEIS_SURFACE_DATA_TYPE data_type;
FULL_LINE_NAME *line;
CHAR *source;
SEIS_ATTRIBUTE_DATA_TYPE attribute;
SEIS_SURFACE_NLIST_TYPE format;
SEIS_LINE_TYPE line_type;
INT version;
NLIST_HEADER *nl_surf;
#endif
    {
    
    /*    declare  local variables  */
    
    CHAR source_hori[31];
    INT istatus, k, rest, tot;
    BOOL fetch;
    INT MAX_ARR = 20;
    CHAR surf[31];
    UINT stroke;
    
    /*     definition of  variables use for nlist manipulations  */
    
    INT datatype[NDIM];
    size_t datawidth[NDIM];
    INT units[NDIM];
    VOIDPTR value_list[1];
    UINT dimlist[NDIM];
    INT value_inc[NDIM];
    INT blocksize = 100;
    UINT ndim = NDIM;
    
    /*   declare variables used in PRO*C   statements    */
    
    EXEC SQL BEGIN DECLARE SECTION;
    
    VARCHAR select[1024];
    VARCHAR s_surf[20][31];
    int s_surf_type;
    int s_data_type;
    VARCHAR s_line_name[21];
    VARCHAR s_survey[21];
    VARCHAR s_source[21];
    int s_attribute;
    int s_format;
    int s_line_type;
    int s_version;
    
    EXEC SQL END DECLARE SECTION;
    
    /*  initialize complex auto variables */
    
    datatype[0] = CHAR_TYPE;
    datawidth[0] = 31;
    units[0] = 0;
    dimlist[0] = 1;
    value_inc[0] = VALUE_LIST;
    
    /* -----------------------------------   
        set returned status to SUCCESS
       -----------------------------------   */
    
    istatus = SUCCESS;
    
    /*   set pointer for nl_surf to 0  */
    
    *nl_surf = (NLIST_HEADER)0;
    
    /* ---------------------------------------------            
        fill source for the surface to store
        if the source is null we take the current oracle account 
       ---------------------------------------------  */
    
    sez_fillsource (source, source_hori);
    
    
    EXEC SQL WHENEVER SQLERROR GOTO errsql;
    
    /*     ------------------------------------------------------
           prepare the SQL statement only the first time we enter
           this routine
          -------------------------------------------------------  */
    
    if (first)
        {
        PROJECT_NAME project_name;
        TABLE_NAME table_hor;
        
        /*    inquire project name to build the table name */
        
        qs_inq_c (QS_PROJECT_NAME, project_name, (INT *)0);
        sez_table_name (SEIS_SURFACE_TABLE, table_hor);
        
        select.len = sprintf ((char *)select.arr, 
"SELECT SURFACE_CODE \
FROM %s.%s  WHERE LINE_NAME =:line_name AND SURVEY =: survey \
AND SURFACE_TYPE =:surf_type AND DATA_TYPE=:data_type AND \
LINE_TYPE=:line_type AND SOURCE=:source AND \
ATTRIBUTE =:attribute AND FORMAT =:format AND VERSION =:version"
                , project_name, table_hor);
        
        /*  prepare the statement  */
        
        EXEC SQL PREPARE S1 FROM : select;
        
        /* declare a cursor   */
        
        EXEC SQL DECLARE C1 CURSOR FOR S1;
        
        first = FALSE;
        
        }
    /*  ---------------------------------------------
        fill all variables used in the SQL statement   
        ---------------------------------------------    */
    
    V_FROMC (s_source, source_hori);
    V_FROMC (s_line_name, line->line_name);
    V_FROMC (s_survey, line->survey);
    s_line_type = (INT)line_type;
    s_surf_type = (INT)surf_type;
    s_data_type = (INT)data_type;
    s_attribute = (INT)attribute;
    s_format = (INT)format;
    s_version = version;
    
    /*   -------------------------------- 
                open the cursor     
         --------------------------------- */
    
    EXEC SQL OPEN C1 USING : s_line_name,  : s_survey,  : s_surf_type,  : s_data_type,
        : s_line_type,  : s_source,  : s_attribute,  : s_format,  : s_version;
    
    /*   -------------------------------- 
        execute the FETCH statement    
         --------------------------------- */
    
    fetch = TRUE;
    tot = 0;
    rest = 0;
    
    /*   -------------------------------- 
         initialise the nlist     
         --------------------------------- */
    
    istatus = nl_init_nlist (nl_surf, NDIM, units, datawidth, datatype, value_inc,
                             blocksize);
    
    istatus = nl_start_stroke (*nl_surf, &stroke);
    
    /* in case of error in the nlist initialisation 
       return to the caller with the nl error
    */
    
    if (istatus)
        return istatus;
    
    /*   -------------------------------- 
         fetch the result of the query     
         --------------------------------- */
    
    
    value_list[0] = (VOIDPTR)surf;
    
    while (fetch)
        {
        
        EXEC SQL FETCH C1 INTO : s_surf;
        
        rest = OR_ROWCOUNT - tot;
        tot = OR_ROWCOUNT;
        
        for (k = 0; k < rest; k++)
            {
            
            V_FROMV (surf, s_surf[k]);
            
            /*    add new point in the nlist     */
            
            istatus = nl_add_points (*nl_surf, 1, ndim, dimlist, value_list);
            
            }
        if (rest < MAX_ARR)
            fetch = FALSE;
        
        }
    /*       end  while     */
    
    
    return SUCCESS;
    /*********************/
    
    
    /*    ---------------------------------------------
          we come here in case of SQL error 
          ---------------------------------------------             */
    
    errsql : printf (" oracle error  in se_inf_surf : %d \n oracle  message %s ",
                     OR_STATUS, OR_MESSAGE);
    
    istatus = OR_STATUS;
    
    /*** return  ERROR  ***/
    return istatus;
    /*********************/
    
    
    }
/* END:     */
