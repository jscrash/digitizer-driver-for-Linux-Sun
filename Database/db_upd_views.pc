/* DEC/CMS REPLACEMENT HISTORY, Element DB_UPD_VIEWS.PC*/
/* *2    14-AUG-1990 13:11:30 VINCE "(SPR 5644) Header Standardization"*/
/* *1    19-JUN-1989 12:30:36 SYSTEM ""*/
/* DEC/CMS REPLACEMENT HISTORY, Element DB_UPD_VIEWS.PC*/
/*****************************************************************************/
/******************************************************************************

                Copyright Exploration Systems, Inc. 1989
                    Unpublished -- All rights reserved

THIS SOFTWARE IS THE PROPRIETARY PROPERTY OF Exploration Systems, Inc.  AND MAY
CONTAIN CONFIDENTIAL TRADE SECRET INFORMATION. IT IS LICENSED FOR USE ON THE
DESIGNATED EQUIPMENT ON WHICH IT WAS ORIGINALLY INSTALLED AND  MAY NOT BE
MODIFIED, DUPLICATED OR COPIED IN ANY FORM WITHOUT PRIOR WRITTEN CONSENT OF

                            Exploration Systems
                            c/o Finder Graphics Systems
                            201 Tamal Vista Blvd.
                            Corte Madera, CA  94925
                            (415) 927-0100

(The above notice does not constitute an admission of publication or
unrestricted dissemination of the work)

******************************************************************************/

#include "esi_c_lib.h"

#ifndef ESI_AM_H

#include "esi_am.h"

#endif

#ifndef ESI_DB_H

#include "esi_db.h"

#endif

#ifndef ESI_DB_MSG_H

#include "esi_db_msg.h"

#endif

#ifndef ESI_MG_H

#include "esi_mg.h"

#endif

#ifndef ESI_ORACLE_H

#include "esi_oracle.h"

#endif

#ifndef ESI_TS_H

#include "esi_ts.h"

#endif
/* EXEC ORACLE OPTION (REBIND = NO); */

/* Function Description -----------------------------------------------------
Description:
    Routine to update views in ORACLE.

Prototype:
    publicdef INT dba_update_views(DB_ACCOUNT_STRUCT *db_account);
    
Parameters:     (indicate (I)/(O)/(M) for input/output/input-and-modified)
    (I) db_account  -(DB_ACCOUNT_STRUCT *) Account structure.
    
Return Value/Status:
    SUCCESS - Successful completion
    
Scope:
    PUBLIC
    
Limitations/Assumptions:

-----------------------------------------------------------------------------*/

/* BEGIN:   */
#if USE_PROTOTYPES
publicdef INT dba_update_views (DB_ACCOUNT_STRUCT *db_account) 
#else
publicdef INT dba_update_views (db_account)
DB_ACCOUNT_STRUCT *db_account;
#endif
    {
    INT status;
    BOOL view_cursor = FALSE;
    INT i = 0;
    INT *id = (INT *)0;
    CHAR string[128];
    CHAR create_view_format[128];
    CHAR *ps;
    
    EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR view[31];
    VARCHAR text[511];
    VARCHAR scope[11];
    VARCHAR stmt[1024];
    int count;
    EXEC SQL END DECLARE SECTION;
    
    /* retrieve string formats */
    strcpy (create_view_format, mg_message (DB_CREATE_VIEW));
    
    sprintf (string, mg_message (DB_CREATING_VIEWS), db_account->scope,
             db_account->name);
    am_message (AM_DIALOG, string);
    am_message (AM_STATUS, string);
    
    EXEC ORACLE OPTION (RELEASE_CURSOR = YES);
    
    V_FROMC (scope, db_account->scope);
    count = 0;
    EXEC SQL SELECT COUNT (*)INTO : count FROM ESI.FINDER_VIEWS WHERE SCOPE =  : scope;
    
    if (count > 0)
        {
        EXEC ORACLE OPTION (RELEASE_CURSOR = NO);
        
        EXEC SQL DECLARE VIEW_CURSOR CURSOR FOR SELECT VIEW_NAME,
            VIEW_TEXT FROM ESI.FINDER_VIEWS WHERE SCOPE =  : scope ORDER BY VIEW_NAME;
        
        EXEC SQL OPEN VIEW_CURSOR;
        
        view_cursor = TRUE;
        
        EXEC SQL WHENEVER SQLERROR CONTINUE;
        
        EXEC SQL FETCH VIEW_CURSOR INTO : view,  : text;
        i = 0;
        while (OR_STATUS IS_NOT_EQUAL_TO OR_EOF)
            {
            V_SETZERO (view);
            V_SETZERO (text);
            sprintf (string, create_view_format, view.arr, ++i, count);
            am_message (AM_DIALOG, string);
            
            /* first, drop the view, if it exists */
            stmt.len = sprintf ((char *)stmt.arr, "DROP VIEW %s", view.arr);
            EXEC SQL EXECUTE IMMEDIATE : stmt;
            
            /* now create the view */
            ps = ts_snowhite ((char *)text.arr);
            /* The TEXT string will have one of two forms:
               (col1, col2, ... coln) AS SELECT ...
            OR
               SELECT ...       
            In the second case, we need to add the word AS to our CREATE VIEW statement;
            nothing is required for the first case */
            
            stmt.len = sprintf ((char *)stmt.arr, "CREATE VIEW %s %s %s", view.arr,
                                *ps EQUALS '(' ? "" : "AS", text.arr);
            
            EXEC SQL EXECUTE IMMEDIATE : stmt;
            EXEC SQL FETCH VIEW_CURSOR INTO : view,  : text;
            }
        }
    if (view_cursor)
        {
        EXEC SQL CLOSE VIEW_CURSOR;
        }
    status = SUCCESS;
    
    return status;
    }
/* END:     */
